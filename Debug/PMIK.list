
PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  0800e488  0800e488  0001e488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb44  0800eb44  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb44  0800eb44  0001eb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb4c  0800eb4c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb4c  0800eb4c  0001eb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb50  0800eb50  0001eb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800eb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001e0  0800ed34  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800ed34  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156f3  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317e  00000000  00000000  000358fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00038a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00039c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f9  00000000  00000000  0003acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd6  00000000  00000000  000522c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c6f  00000000  00000000  00068f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1c06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  000f1c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e46c 	.word	0x0800e46c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e46c 	.word	0x0800e46c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fb4d 	bl	8001adc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa9d 	bl	800198c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb3f 	bl	8001adc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb35 	bl	8001adc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fac5 	bl	8001a10 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fabb 	bl	8001a10 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f93f 	bl	80027dc <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fd88 	bl	800207c <__aeabi_dsub>
 800056c:	f002 f936 	bl	80027dc <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 faed 	bl	8001ba4 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 f96a 	bl	80028a8 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fae4 	bl	8001ba4 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fd4a 	bl	800207c <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f923 	bl	8002848 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 facd 	bl	8001ba4 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f94a 	bl	80028a8 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fb86 	bl	8000d28 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 fa44 	bl	8002ad0 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 fa3f 	bl	8002ad0 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	469b      	mov	fp, r3
 800065a:	d433      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065c:	465a      	mov	r2, fp
 800065e:	4653      	mov	r3, sl
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83a      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e078      	b.n	8000768 <__udivmoddi4+0x144>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e075      	b.n	800076e <__udivmoddi4+0x14a>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e028      	b.n	80006ee <__udivmoddi4+0xca>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	40da      	lsrs	r2, r3
 80006ce:	4641      	mov	r1, r8
 80006d0:	0013      	movs	r3, r2
 80006d2:	464a      	mov	r2, r9
 80006d4:	408a      	lsls	r2, r1
 80006d6:	0017      	movs	r7, r2
 80006d8:	4642      	mov	r2, r8
 80006da:	431f      	orrs	r7, r3
 80006dc:	4653      	mov	r3, sl
 80006de:	4093      	lsls	r3, r2
 80006e0:	001e      	movs	r6, r3
 80006e2:	42af      	cmp	r7, r5
 80006e4:	d9c4      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e6:	2200      	movs	r2, #0
 80006e8:	2300      	movs	r3, #0
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	4643      	mov	r3, r8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0d9      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f4:	07fb      	lsls	r3, r7, #31
 80006f6:	0872      	lsrs	r2, r6, #1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	4646      	mov	r6, r8
 80006fc:	087b      	lsrs	r3, r7, #1
 80006fe:	e00e      	b.n	800071e <__udivmoddi4+0xfa>
 8000700:	42ab      	cmp	r3, r5
 8000702:	d101      	bne.n	8000708 <__udivmoddi4+0xe4>
 8000704:	42a2      	cmp	r2, r4
 8000706:	d80c      	bhi.n	8000722 <__udivmoddi4+0xfe>
 8000708:	1aa4      	subs	r4, r4, r2
 800070a:	419d      	sbcs	r5, r3
 800070c:	2001      	movs	r0, #1
 800070e:	1924      	adds	r4, r4, r4
 8000710:	416d      	adcs	r5, r5
 8000712:	2100      	movs	r1, #0
 8000714:	3e01      	subs	r6, #1
 8000716:	1824      	adds	r4, r4, r0
 8000718:	414d      	adcs	r5, r1
 800071a:	2e00      	cmp	r6, #0
 800071c:	d006      	beq.n	800072c <__udivmoddi4+0x108>
 800071e:	42ab      	cmp	r3, r5
 8000720:	d9ee      	bls.n	8000700 <__udivmoddi4+0xdc>
 8000722:	3e01      	subs	r6, #1
 8000724:	1924      	adds	r4, r4, r4
 8000726:	416d      	adcs	r5, r5
 8000728:	2e00      	cmp	r6, #0
 800072a:	d1f8      	bne.n	800071e <__udivmoddi4+0xfa>
 800072c:	9800      	ldr	r0, [sp, #0]
 800072e:	9901      	ldr	r1, [sp, #4]
 8000730:	465b      	mov	r3, fp
 8000732:	1900      	adds	r0, r0, r4
 8000734:	4169      	adcs	r1, r5
 8000736:	2b00      	cmp	r3, #0
 8000738:	db24      	blt.n	8000784 <__udivmoddi4+0x160>
 800073a:	002b      	movs	r3, r5
 800073c:	465a      	mov	r2, fp
 800073e:	4644      	mov	r4, r8
 8000740:	40d3      	lsrs	r3, r2
 8000742:	002a      	movs	r2, r5
 8000744:	40e2      	lsrs	r2, r4
 8000746:	001c      	movs	r4, r3
 8000748:	465b      	mov	r3, fp
 800074a:	0015      	movs	r5, r2
 800074c:	2b00      	cmp	r3, #0
 800074e:	db2a      	blt.n	80007a6 <__udivmoddi4+0x182>
 8000750:	0026      	movs	r6, r4
 8000752:	409e      	lsls	r6, r3
 8000754:	0033      	movs	r3, r6
 8000756:	0026      	movs	r6, r4
 8000758:	4647      	mov	r7, r8
 800075a:	40be      	lsls	r6, r7
 800075c:	0032      	movs	r2, r6
 800075e:	1a80      	subs	r0, r0, r2
 8000760:	4199      	sbcs	r1, r3
 8000762:	9000      	str	r0, [sp, #0]
 8000764:	9101      	str	r1, [sp, #4]
 8000766:	e79f      	b.n	80006a8 <__udivmoddi4+0x84>
 8000768:	42a3      	cmp	r3, r4
 800076a:	d8bc      	bhi.n	80006e6 <__udivmoddi4+0xc2>
 800076c:	e783      	b.n	8000676 <__udivmoddi4+0x52>
 800076e:	4642      	mov	r2, r8
 8000770:	2320      	movs	r3, #32
 8000772:	2100      	movs	r1, #0
 8000774:	1a9b      	subs	r3, r3, r2
 8000776:	2200      	movs	r2, #0
 8000778:	9100      	str	r1, [sp, #0]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	40da      	lsrs	r2, r3
 8000780:	9201      	str	r2, [sp, #4]
 8000782:	e786      	b.n	8000692 <__udivmoddi4+0x6e>
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	002a      	movs	r2, r5
 800078c:	4646      	mov	r6, r8
 800078e:	409a      	lsls	r2, r3
 8000790:	0023      	movs	r3, r4
 8000792:	40f3      	lsrs	r3, r6
 8000794:	4644      	mov	r4, r8
 8000796:	4313      	orrs	r3, r2
 8000798:	002a      	movs	r2, r5
 800079a:	40e2      	lsrs	r2, r4
 800079c:	001c      	movs	r4, r3
 800079e:	465b      	mov	r3, fp
 80007a0:	0015      	movs	r5, r2
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	dad4      	bge.n	8000750 <__udivmoddi4+0x12c>
 80007a6:	4642      	mov	r2, r8
 80007a8:	002f      	movs	r7, r5
 80007aa:	2320      	movs	r3, #32
 80007ac:	0026      	movs	r6, r4
 80007ae:	4097      	lsls	r7, r2
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	40de      	lsrs	r6, r3
 80007b4:	003b      	movs	r3, r7
 80007b6:	4333      	orrs	r3, r6
 80007b8:	e7cd      	b.n	8000756 <__udivmoddi4+0x132>
 80007ba:	46c0      	nop			; (mov r8, r8)

080007bc <__aeabi_fadd>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	46c6      	mov	lr, r8
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	024e      	lsls	r6, r1, #9
 80007c6:	0045      	lsls	r5, r0, #1
 80007c8:	004f      	lsls	r7, r1, #1
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	0fc4      	lsrs	r4, r0, #31
 80007ce:	469c      	mov	ip, r3
 80007d0:	0a70      	lsrs	r0, r6, #9
 80007d2:	4690      	mov	r8, r2
 80007d4:	b500      	push	{lr}
 80007d6:	0e2d      	lsrs	r5, r5, #24
 80007d8:	0e3f      	lsrs	r7, r7, #24
 80007da:	0fc9      	lsrs	r1, r1, #31
 80007dc:	09b6      	lsrs	r6, r6, #6
 80007de:	428c      	cmp	r4, r1
 80007e0:	d04b      	beq.n	800087a <__aeabi_fadd+0xbe>
 80007e2:	1bea      	subs	r2, r5, r7
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	dd36      	ble.n	8000856 <__aeabi_fadd+0x9a>
 80007e8:	2f00      	cmp	r7, #0
 80007ea:	d061      	beq.n	80008b0 <__aeabi_fadd+0xf4>
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x36>
 80007f0:	e0ad      	b.n	800094e <__aeabi_fadd+0x192>
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	04db      	lsls	r3, r3, #19
 80007f6:	431e      	orrs	r6, r3
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dc00      	bgt.n	80007fe <__aeabi_fadd+0x42>
 80007fc:	e0d3      	b.n	80009a6 <__aeabi_fadd+0x1ea>
 80007fe:	2001      	movs	r0, #1
 8000800:	4643      	mov	r3, r8
 8000802:	1a18      	subs	r0, r3, r0
 8000804:	0143      	lsls	r3, r0, #5
 8000806:	d400      	bmi.n	800080a <__aeabi_fadd+0x4e>
 8000808:	e08c      	b.n	8000924 <__aeabi_fadd+0x168>
 800080a:	0180      	lsls	r0, r0, #6
 800080c:	0987      	lsrs	r7, r0, #6
 800080e:	0038      	movs	r0, r7
 8000810:	f002 f940 	bl	8002a94 <__clzsi2>
 8000814:	3805      	subs	r0, #5
 8000816:	4087      	lsls	r7, r0
 8000818:	4285      	cmp	r5, r0
 800081a:	dc00      	bgt.n	800081e <__aeabi_fadd+0x62>
 800081c:	e0b6      	b.n	800098c <__aeabi_fadd+0x1d0>
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	48b3      	ldr	r0, [pc, #716]	; (8000af0 <__aeabi_fadd+0x334>)
 8000822:	4038      	ands	r0, r7
 8000824:	0743      	lsls	r3, r0, #29
 8000826:	d004      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000828:	230f      	movs	r3, #15
 800082a:	4003      	ands	r3, r0
 800082c:	2b04      	cmp	r3, #4
 800082e:	d000      	beq.n	8000832 <__aeabi_fadd+0x76>
 8000830:	3004      	adds	r0, #4
 8000832:	0143      	lsls	r3, r0, #5
 8000834:	d400      	bmi.n	8000838 <__aeabi_fadd+0x7c>
 8000836:	e078      	b.n	800092a <__aeabi_fadd+0x16e>
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	2dfe      	cmp	r5, #254	; 0xfe
 800083c:	d065      	beq.n	800090a <__aeabi_fadd+0x14e>
 800083e:	0180      	lsls	r0, r0, #6
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	469c      	mov	ip, r3
 8000844:	b2d2      	uxtb	r2, r2
 8000846:	4663      	mov	r3, ip
 8000848:	05d0      	lsls	r0, r2, #23
 800084a:	4318      	orrs	r0, r3
 800084c:	07e4      	lsls	r4, r4, #31
 800084e:	4320      	orrs	r0, r4
 8000850:	bc80      	pop	{r7}
 8000852:	46b8      	mov	r8, r7
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d035      	beq.n	80008c6 <__aeabi_fadd+0x10a>
 800085a:	1b7a      	subs	r2, r7, r5
 800085c:	2d00      	cmp	r5, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_fadd+0xa6>
 8000860:	e0af      	b.n	80009c2 <__aeabi_fadd+0x206>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d100      	bne.n	800086a <__aeabi_fadd+0xae>
 8000868:	e0a7      	b.n	80009ba <__aeabi_fadd+0x1fe>
 800086a:	1e53      	subs	r3, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0xb6>
 8000870:	e12f      	b.n	8000ad2 <__aeabi_fadd+0x316>
 8000872:	2aff      	cmp	r2, #255	; 0xff
 8000874:	d069      	beq.n	800094a <__aeabi_fadd+0x18e>
 8000876:	001a      	movs	r2, r3
 8000878:	e0aa      	b.n	80009d0 <__aeabi_fadd+0x214>
 800087a:	1be9      	subs	r1, r5, r7
 800087c:	2900      	cmp	r1, #0
 800087e:	dd70      	ble.n	8000962 <__aeabi_fadd+0x1a6>
 8000880:	2f00      	cmp	r7, #0
 8000882:	d037      	beq.n	80008f4 <__aeabi_fadd+0x138>
 8000884:	2dff      	cmp	r5, #255	; 0xff
 8000886:	d062      	beq.n	800094e <__aeabi_fadd+0x192>
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	431e      	orrs	r6, r3
 800088e:	291b      	cmp	r1, #27
 8000890:	dc00      	bgt.n	8000894 <__aeabi_fadd+0xd8>
 8000892:	e0b0      	b.n	80009f6 <__aeabi_fadd+0x23a>
 8000894:	2001      	movs	r0, #1
 8000896:	4440      	add	r0, r8
 8000898:	0143      	lsls	r3, r0, #5
 800089a:	d543      	bpl.n	8000924 <__aeabi_fadd+0x168>
 800089c:	3501      	adds	r5, #1
 800089e:	2dff      	cmp	r5, #255	; 0xff
 80008a0:	d033      	beq.n	800090a <__aeabi_fadd+0x14e>
 80008a2:	2301      	movs	r3, #1
 80008a4:	4a93      	ldr	r2, [pc, #588]	; (8000af4 <__aeabi_fadd+0x338>)
 80008a6:	4003      	ands	r3, r0
 80008a8:	0840      	lsrs	r0, r0, #1
 80008aa:	4010      	ands	r0, r2
 80008ac:	4318      	orrs	r0, r3
 80008ae:	e7b9      	b.n	8000824 <__aeabi_fadd+0x68>
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e083      	b.n	80009be <__aeabi_fadd+0x202>
 80008b6:	1e51      	subs	r1, r2, #1
 80008b8:	2a01      	cmp	r2, #1
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x102>
 80008bc:	e0d8      	b.n	8000a70 <__aeabi_fadd+0x2b4>
 80008be:	2aff      	cmp	r2, #255	; 0xff
 80008c0:	d045      	beq.n	800094e <__aeabi_fadd+0x192>
 80008c2:	000a      	movs	r2, r1
 80008c4:	e798      	b.n	80007f8 <__aeabi_fadd+0x3c>
 80008c6:	27fe      	movs	r7, #254	; 0xfe
 80008c8:	1c6a      	adds	r2, r5, #1
 80008ca:	4217      	tst	r7, r2
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fadd+0x114>
 80008ce:	e086      	b.n	80009de <__aeabi_fadd+0x222>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fadd+0x11a>
 80008d4:	e0b7      	b.n	8000a46 <__aeabi_fadd+0x28a>
 80008d6:	4643      	mov	r3, r8
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x122>
 80008dc:	e0f3      	b.n	8000ac6 <__aeabi_fadd+0x30a>
 80008de:	2200      	movs	r2, #0
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0b0      	beq.n	8000846 <__aeabi_fadd+0x8a>
 80008e4:	1b98      	subs	r0, r3, r6
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d400      	bmi.n	80008ec <__aeabi_fadd+0x130>
 80008ea:	e0fa      	b.n	8000ae2 <__aeabi_fadd+0x326>
 80008ec:	4643      	mov	r3, r8
 80008ee:	000c      	movs	r4, r1
 80008f0:	1af0      	subs	r0, r6, r3
 80008f2:	e797      	b.n	8000824 <__aeabi_fadd+0x68>
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_fadd+0x13e>
 80008f8:	e0c8      	b.n	8000a8c <__aeabi_fadd+0x2d0>
 80008fa:	1e4a      	subs	r2, r1, #1
 80008fc:	2901      	cmp	r1, #1
 80008fe:	d100      	bne.n	8000902 <__aeabi_fadd+0x146>
 8000900:	e0ae      	b.n	8000a60 <__aeabi_fadd+0x2a4>
 8000902:	29ff      	cmp	r1, #255	; 0xff
 8000904:	d023      	beq.n	800094e <__aeabi_fadd+0x192>
 8000906:	0011      	movs	r1, r2
 8000908:	e7c1      	b.n	800088e <__aeabi_fadd+0xd2>
 800090a:	2300      	movs	r3, #0
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	469c      	mov	ip, r3
 8000910:	e799      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000912:	21fe      	movs	r1, #254	; 0xfe
 8000914:	1c6a      	adds	r2, r5, #1
 8000916:	4211      	tst	r1, r2
 8000918:	d077      	beq.n	8000a0a <__aeabi_fadd+0x24e>
 800091a:	2aff      	cmp	r2, #255	; 0xff
 800091c:	d0f5      	beq.n	800090a <__aeabi_fadd+0x14e>
 800091e:	0015      	movs	r5, r2
 8000920:	4446      	add	r6, r8
 8000922:	0870      	lsrs	r0, r6, #1
 8000924:	0743      	lsls	r3, r0, #29
 8000926:	d000      	beq.n	800092a <__aeabi_fadd+0x16e>
 8000928:	e77e      	b.n	8000828 <__aeabi_fadd+0x6c>
 800092a:	08c3      	lsrs	r3, r0, #3
 800092c:	2dff      	cmp	r5, #255	; 0xff
 800092e:	d00e      	beq.n	800094e <__aeabi_fadd+0x192>
 8000930:	025b      	lsls	r3, r3, #9
 8000932:	0a5b      	lsrs	r3, r3, #9
 8000934:	469c      	mov	ip, r3
 8000936:	b2ea      	uxtb	r2, r5
 8000938:	e785      	b.n	8000846 <__aeabi_fadd+0x8a>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d007      	beq.n	800094e <__aeabi_fadd+0x192>
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	03d2      	lsls	r2, r2, #15
 8000942:	4213      	tst	r3, r2
 8000944:	d003      	beq.n	800094e <__aeabi_fadd+0x192>
 8000946:	4210      	tst	r0, r2
 8000948:	d101      	bne.n	800094e <__aeabi_fadd+0x192>
 800094a:	000c      	movs	r4, r1
 800094c:	0003      	movs	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0db      	beq.n	800090a <__aeabi_fadd+0x14e>
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	03c0      	lsls	r0, r0, #15
 8000956:	4318      	orrs	r0, r3
 8000958:	0240      	lsls	r0, r0, #9
 800095a:	0a43      	lsrs	r3, r0, #9
 800095c:	469c      	mov	ip, r3
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	e771      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000962:	2900      	cmp	r1, #0
 8000964:	d0d5      	beq.n	8000912 <__aeabi_fadd+0x156>
 8000966:	1b7a      	subs	r2, r7, r5
 8000968:	2d00      	cmp	r5, #0
 800096a:	d160      	bne.n	8000a2e <__aeabi_fadd+0x272>
 800096c:	4643      	mov	r3, r8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d024      	beq.n	80009bc <__aeabi_fadd+0x200>
 8000972:	1e53      	subs	r3, r2, #1
 8000974:	2a01      	cmp	r2, #1
 8000976:	d073      	beq.n	8000a60 <__aeabi_fadd+0x2a4>
 8000978:	2aff      	cmp	r2, #255	; 0xff
 800097a:	d0e7      	beq.n	800094c <__aeabi_fadd+0x190>
 800097c:	001a      	movs	r2, r3
 800097e:	2a1b      	cmp	r2, #27
 8000980:	dc00      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 8000982:	e085      	b.n	8000a90 <__aeabi_fadd+0x2d4>
 8000984:	2001      	movs	r0, #1
 8000986:	003d      	movs	r5, r7
 8000988:	1980      	adds	r0, r0, r6
 800098a:	e785      	b.n	8000898 <__aeabi_fadd+0xdc>
 800098c:	2320      	movs	r3, #32
 800098e:	003a      	movs	r2, r7
 8000990:	1b45      	subs	r5, r0, r5
 8000992:	0038      	movs	r0, r7
 8000994:	3501      	adds	r5, #1
 8000996:	40ea      	lsrs	r2, r5
 8000998:	1b5d      	subs	r5, r3, r5
 800099a:	40a8      	lsls	r0, r5
 800099c:	1e43      	subs	r3, r0, #1
 800099e:	4198      	sbcs	r0, r3
 80009a0:	2500      	movs	r5, #0
 80009a2:	4310      	orrs	r0, r2
 80009a4:	e73e      	b.n	8000824 <__aeabi_fadd+0x68>
 80009a6:	2320      	movs	r3, #32
 80009a8:	0030      	movs	r0, r6
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	0031      	movs	r1, r6
 80009ae:	4098      	lsls	r0, r3
 80009b0:	40d1      	lsrs	r1, r2
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	4198      	sbcs	r0, r3
 80009b6:	4308      	orrs	r0, r1
 80009b8:	e722      	b.n	8000800 <__aeabi_fadd+0x44>
 80009ba:	000c      	movs	r4, r1
 80009bc:	0003      	movs	r3, r0
 80009be:	0015      	movs	r5, r2
 80009c0:	e7b4      	b.n	800092c <__aeabi_fadd+0x170>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d0c1      	beq.n	800094a <__aeabi_fadd+0x18e>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4640      	mov	r0, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4318      	orrs	r0, r3
 80009ce:	4680      	mov	r8, r0
 80009d0:	2a1b      	cmp	r2, #27
 80009d2:	dd51      	ble.n	8000a78 <__aeabi_fadd+0x2bc>
 80009d4:	2001      	movs	r0, #1
 80009d6:	000c      	movs	r4, r1
 80009d8:	003d      	movs	r5, r7
 80009da:	1a30      	subs	r0, r6, r0
 80009dc:	e712      	b.n	8000804 <__aeabi_fadd+0x48>
 80009de:	4643      	mov	r3, r8
 80009e0:	1b9f      	subs	r7, r3, r6
 80009e2:	017b      	lsls	r3, r7, #5
 80009e4:	d42b      	bmi.n	8000a3e <__aeabi_fadd+0x282>
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d000      	beq.n	80009ec <__aeabi_fadd+0x230>
 80009ea:	e710      	b.n	800080e <__aeabi_fadd+0x52>
 80009ec:	2300      	movs	r3, #0
 80009ee:	2400      	movs	r4, #0
 80009f0:	2200      	movs	r2, #0
 80009f2:	469c      	mov	ip, r3
 80009f4:	e727      	b.n	8000846 <__aeabi_fadd+0x8a>
 80009f6:	2320      	movs	r3, #32
 80009f8:	0032      	movs	r2, r6
 80009fa:	0030      	movs	r0, r6
 80009fc:	40ca      	lsrs	r2, r1
 80009fe:	1a59      	subs	r1, r3, r1
 8000a00:	4088      	lsls	r0, r1
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	4310      	orrs	r0, r2
 8000a08:	e745      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d14a      	bne.n	8000aa4 <__aeabi_fadd+0x2e8>
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d063      	beq.n	8000adc <__aeabi_fadd+0x320>
 8000a14:	2200      	movs	r2, #0
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e714      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a1c:	0030      	movs	r0, r6
 8000a1e:	4440      	add	r0, r8
 8000a20:	0143      	lsls	r3, r0, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x26a>
 8000a24:	e77e      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <__aeabi_fadd+0x334>)
 8000a28:	3501      	adds	r5, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	e77a      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a2e:	2fff      	cmp	r7, #255	; 0xff
 8000a30:	d08c      	beq.n	800094c <__aeabi_fadd+0x190>
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	4641      	mov	r1, r8
 8000a36:	04db      	lsls	r3, r3, #19
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	4688      	mov	r8, r1
 8000a3c:	e79f      	b.n	800097e <__aeabi_fadd+0x1c2>
 8000a3e:	4643      	mov	r3, r8
 8000a40:	000c      	movs	r4, r1
 8000a42:	1af7      	subs	r7, r6, r3
 8000a44:	e6e3      	b.n	800080e <__aeabi_fadd+0x52>
 8000a46:	4642      	mov	r2, r8
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_fadd+0x292>
 8000a4c:	e775      	b.n	800093a <__aeabi_fadd+0x17e>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fadd+0x298>
 8000a52:	e77a      	b.n	800094a <__aeabi_fadd+0x18e>
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	03db      	lsls	r3, r3, #15
 8000a58:	2400      	movs	r4, #0
 8000a5a:	469c      	mov	ip, r3
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	e6f2      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000a60:	0030      	movs	r0, r6
 8000a62:	4440      	add	r0, r8
 8000a64:	2501      	movs	r5, #1
 8000a66:	0143      	lsls	r3, r0, #5
 8000a68:	d400      	bmi.n	8000a6c <__aeabi_fadd+0x2b0>
 8000a6a:	e75b      	b.n	8000924 <__aeabi_fadd+0x168>
 8000a6c:	2502      	movs	r5, #2
 8000a6e:	e718      	b.n	80008a2 <__aeabi_fadd+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	2501      	movs	r5, #1
 8000a74:	1b98      	subs	r0, r3, r6
 8000a76:	e6c5      	b.n	8000804 <__aeabi_fadd+0x48>
 8000a78:	2320      	movs	r3, #32
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	40d4      	lsrs	r4, r2
 8000a80:	1a9a      	subs	r2, r3, r2
 8000a82:	4090      	lsls	r0, r2
 8000a84:	1e43      	subs	r3, r0, #1
 8000a86:	4198      	sbcs	r0, r3
 8000a88:	4320      	orrs	r0, r4
 8000a8a:	e7a4      	b.n	80009d6 <__aeabi_fadd+0x21a>
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	e74d      	b.n	800092c <__aeabi_fadd+0x170>
 8000a90:	2320      	movs	r3, #32
 8000a92:	4641      	mov	r1, r8
 8000a94:	4640      	mov	r0, r8
 8000a96:	40d1      	lsrs	r1, r2
 8000a98:	1a9a      	subs	r2, r3, r2
 8000a9a:	4090      	lsls	r0, r2
 8000a9c:	1e43      	subs	r3, r0, #1
 8000a9e:	4198      	sbcs	r0, r3
 8000aa0:	4308      	orrs	r0, r1
 8000aa2:	e770      	b.n	8000986 <__aeabi_fadd+0x1ca>
 8000aa4:	4642      	mov	r2, r8
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x2f0>
 8000aaa:	e74f      	b.n	800094c <__aeabi_fadd+0x190>
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000ab0:	e74d      	b.n	800094e <__aeabi_fadd+0x192>
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	03d2      	lsls	r2, r2, #15
 8000ab6:	4213      	tst	r3, r2
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x300>
 8000aba:	e748      	b.n	800094e <__aeabi_fadd+0x192>
 8000abc:	4210      	tst	r0, r2
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fadd+0x306>
 8000ac0:	e745      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e743      	b.n	800094e <__aeabi_fadd+0x192>
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d090      	beq.n	80009ec <__aeabi_fadd+0x230>
 8000aca:	000c      	movs	r4, r1
 8000acc:	4684      	mov	ip, r0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e6b9      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	1af0      	subs	r0, r6, r3
 8000ad8:	3501      	adds	r5, #1
 8000ada:	e693      	b.n	8000804 <__aeabi_fadd+0x48>
 8000adc:	4684      	mov	ip, r0
 8000ade:	2200      	movs	r2, #0
 8000ae0:	e6b1      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_fadd+0x32c>
 8000ae6:	e71d      	b.n	8000924 <__aeabi_fadd+0x168>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2400      	movs	r4, #0
 8000aec:	469c      	mov	ip, r3
 8000aee:	e6aa      	b.n	8000846 <__aeabi_fadd+0x8a>
 8000af0:	fbffffff 	.word	0xfbffffff
 8000af4:	7dffffff 	.word	0x7dffffff

08000af8 <__aeabi_fdiv>:
 8000af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000afa:	464f      	mov	r7, r9
 8000afc:	4646      	mov	r6, r8
 8000afe:	46d6      	mov	lr, sl
 8000b00:	0245      	lsls	r5, r0, #9
 8000b02:	b5c0      	push	{r6, r7, lr}
 8000b04:	0047      	lsls	r7, r0, #1
 8000b06:	1c0c      	adds	r4, r1, #0
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e3f      	lsrs	r7, r7, #24
 8000b0c:	0fc6      	lsrs	r6, r0, #31
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x1c>
 8000b12:	e070      	b.n	8000bf6 <__aeabi_fdiv+0xfe>
 8000b14:	2fff      	cmp	r7, #255	; 0xff
 8000b16:	d100      	bne.n	8000b1a <__aeabi_fdiv+0x22>
 8000b18:	e075      	b.n	8000c06 <__aeabi_fdiv+0x10e>
 8000b1a:	00eb      	lsls	r3, r5, #3
 8000b1c:	2580      	movs	r5, #128	; 0x80
 8000b1e:	04ed      	lsls	r5, r5, #19
 8000b20:	431d      	orrs	r5, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	4699      	mov	r9, r3
 8000b26:	469a      	mov	sl, r3
 8000b28:	3f7f      	subs	r7, #127	; 0x7f
 8000b2a:	0260      	lsls	r0, r4, #9
 8000b2c:	0a43      	lsrs	r3, r0, #9
 8000b2e:	4698      	mov	r8, r3
 8000b30:	0063      	lsls	r3, r4, #1
 8000b32:	0e1b      	lsrs	r3, r3, #24
 8000b34:	0fe4      	lsrs	r4, r4, #31
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d04e      	beq.n	8000bd8 <__aeabi_fdiv+0xe0>
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d046      	beq.n	8000bcc <__aeabi_fdiv+0xd4>
 8000b3e:	4642      	mov	r2, r8
 8000b40:	00d0      	lsls	r0, r2, #3
 8000b42:	2280      	movs	r2, #128	; 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4302      	orrs	r2, r0
 8000b48:	4690      	mov	r8, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	3b7f      	subs	r3, #127	; 0x7f
 8000b4e:	0031      	movs	r1, r6
 8000b50:	1aff      	subs	r7, r7, r3
 8000b52:	464b      	mov	r3, r9
 8000b54:	4061      	eors	r1, r4
 8000b56:	b2c9      	uxtb	r1, r1
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	2b0f      	cmp	r3, #15
 8000b5c:	d900      	bls.n	8000b60 <__aeabi_fdiv+0x68>
 8000b5e:	e0b5      	b.n	8000ccc <__aeabi_fdiv+0x1d4>
 8000b60:	486e      	ldr	r0, [pc, #440]	; (8000d1c <__aeabi_fdiv+0x224>)
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	58c3      	ldr	r3, [r0, r3]
 8000b66:	469f      	mov	pc, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4698      	mov	r8, r3
 8000b6c:	0026      	movs	r6, r4
 8000b6e:	4645      	mov	r5, r8
 8000b70:	4692      	mov	sl, r2
 8000b72:	4653      	mov	r3, sl
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d100      	bne.n	8000b7a <__aeabi_fdiv+0x82>
 8000b78:	e089      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fdiv+0x88>
 8000b7e:	e09e      	b.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d018      	beq.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000b84:	003b      	movs	r3, r7
 8000b86:	337f      	adds	r3, #127	; 0x7f
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd69      	ble.n	8000c60 <__aeabi_fdiv+0x168>
 8000b8c:	076a      	lsls	r2, r5, #29
 8000b8e:	d004      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b90:	220f      	movs	r2, #15
 8000b92:	402a      	ands	r2, r5
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fdiv+0xa2>
 8000b98:	3504      	adds	r5, #4
 8000b9a:	012a      	lsls	r2, r5, #4
 8000b9c:	d503      	bpl.n	8000ba6 <__aeabi_fdiv+0xae>
 8000b9e:	4b60      	ldr	r3, [pc, #384]	; (8000d20 <__aeabi_fdiv+0x228>)
 8000ba0:	401d      	ands	r5, r3
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	3380      	adds	r3, #128	; 0x80
 8000ba6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ba8:	dd00      	ble.n	8000bac <__aeabi_fdiv+0xb4>
 8000baa:	e070      	b.n	8000c8e <__aeabi_fdiv+0x196>
 8000bac:	01ad      	lsls	r5, r5, #6
 8000bae:	0a6d      	lsrs	r5, r5, #9
 8000bb0:	b2d8      	uxtb	r0, r3
 8000bb2:	e002      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000bb4:	000e      	movs	r6, r1
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	2500      	movs	r5, #0
 8000bba:	05c0      	lsls	r0, r0, #23
 8000bbc:	4328      	orrs	r0, r5
 8000bbe:	07f6      	lsls	r6, r6, #31
 8000bc0:	4330      	orrs	r0, r6
 8000bc2:	bce0      	pop	{r5, r6, r7}
 8000bc4:	46ba      	mov	sl, r7
 8000bc6:	46b1      	mov	r9, r6
 8000bc8:	46a8      	mov	r8, r5
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13f      	bne.n	8000c52 <__aeabi_fdiv+0x15a>
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	3fff      	subs	r7, #255	; 0xff
 8000bd6:	e003      	b.n	8000be0 <__aeabi_fdiv+0xe8>
 8000bd8:	4643      	mov	r3, r8
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d12d      	bne.n	8000c3a <__aeabi_fdiv+0x142>
 8000bde:	2201      	movs	r2, #1
 8000be0:	0031      	movs	r1, r6
 8000be2:	464b      	mov	r3, r9
 8000be4:	4061      	eors	r1, r4
 8000be6:	b2c9      	uxtb	r1, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d834      	bhi.n	8000c58 <__aeabi_fdiv+0x160>
 8000bee:	484d      	ldr	r0, [pc, #308]	; (8000d24 <__aeabi_fdiv+0x22c>)
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	58c3      	ldr	r3, [r0, r3]
 8000bf4:	469f      	mov	pc, r3
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d113      	bne.n	8000c22 <__aeabi_fdiv+0x12a>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	3b03      	subs	r3, #3
 8000c00:	2700      	movs	r7, #0
 8000c02:	469a      	mov	sl, r3
 8000c04:	e791      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d105      	bne.n	8000c16 <__aeabi_fdiv+0x11e>
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	3b06      	subs	r3, #6
 8000c10:	27ff      	movs	r7, #255	; 0xff
 8000c12:	469a      	mov	sl, r3
 8000c14:	e789      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c16:	230c      	movs	r3, #12
 8000c18:	4699      	mov	r9, r3
 8000c1a:	3b09      	subs	r3, #9
 8000c1c:	27ff      	movs	r7, #255	; 0xff
 8000c1e:	469a      	mov	sl, r3
 8000c20:	e783      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c22:	0028      	movs	r0, r5
 8000c24:	f001 ff36 	bl	8002a94 <__clzsi2>
 8000c28:	2776      	movs	r7, #118	; 0x76
 8000c2a:	1f43      	subs	r3, r0, #5
 8000c2c:	409d      	lsls	r5, r3
 8000c2e:	2300      	movs	r3, #0
 8000c30:	427f      	negs	r7, r7
 8000c32:	4699      	mov	r9, r3
 8000c34:	469a      	mov	sl, r3
 8000c36:	1a3f      	subs	r7, r7, r0
 8000c38:	e777      	b.n	8000b2a <__aeabi_fdiv+0x32>
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	f001 ff2a 	bl	8002a94 <__clzsi2>
 8000c40:	4642      	mov	r2, r8
 8000c42:	1f43      	subs	r3, r0, #5
 8000c44:	409a      	lsls	r2, r3
 8000c46:	2376      	movs	r3, #118	; 0x76
 8000c48:	425b      	negs	r3, r3
 8000c4a:	4690      	mov	r8, r2
 8000c4c:	1a1b      	subs	r3, r3, r0
 8000c4e:	2200      	movs	r2, #0
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	2203      	movs	r2, #3
 8000c56:	e77a      	b.n	8000b4e <__aeabi_fdiv+0x56>
 8000c58:	000e      	movs	r6, r1
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	e7ac      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c60:	2001      	movs	r0, #1
 8000c62:	1ac0      	subs	r0, r0, r3
 8000c64:	281b      	cmp	r0, #27
 8000c66:	dca6      	bgt.n	8000bb6 <__aeabi_fdiv+0xbe>
 8000c68:	379e      	adds	r7, #158	; 0x9e
 8000c6a:	002a      	movs	r2, r5
 8000c6c:	40bd      	lsls	r5, r7
 8000c6e:	40c2      	lsrs	r2, r0
 8000c70:	1e6b      	subs	r3, r5, #1
 8000c72:	419d      	sbcs	r5, r3
 8000c74:	4315      	orrs	r5, r2
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d004      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	402b      	ands	r3, r5
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fdiv+0x18c>
 8000c82:	3504      	adds	r5, #4
 8000c84:	016b      	lsls	r3, r5, #5
 8000c86:	d544      	bpl.n	8000d12 <__aeabi_fdiv+0x21a>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	2500      	movs	r5, #0
 8000c8c:	e795      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c8e:	20ff      	movs	r0, #255	; 0xff
 8000c90:	2500      	movs	r5, #0
 8000c92:	e792      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c94:	2580      	movs	r5, #128	; 0x80
 8000c96:	2600      	movs	r6, #0
 8000c98:	20ff      	movs	r0, #255	; 0xff
 8000c9a:	03ed      	lsls	r5, r5, #15
 8000c9c:	e78d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2080      	movs	r0, #128	; 0x80
 8000ca4:	03c0      	lsls	r0, r0, #15
 8000ca6:	4205      	tst	r5, r0
 8000ca8:	d009      	beq.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000caa:	4643      	mov	r3, r8
 8000cac:	4203      	tst	r3, r0
 8000cae:	d106      	bne.n	8000cbe <__aeabi_fdiv+0x1c6>
 8000cb0:	4645      	mov	r5, r8
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	026d      	lsls	r5, r5, #9
 8000cb6:	0026      	movs	r6, r4
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	0a6d      	lsrs	r5, r5, #9
 8000cbc:	e77d      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000cbe:	2080      	movs	r0, #128	; 0x80
 8000cc0:	03c0      	lsls	r0, r0, #15
 8000cc2:	4305      	orrs	r5, r0
 8000cc4:	026d      	lsls	r5, r5, #9
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	e776      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000ccc:	4642      	mov	r2, r8
 8000cce:	016b      	lsls	r3, r5, #5
 8000cd0:	0150      	lsls	r0, r2, #5
 8000cd2:	4283      	cmp	r3, r0
 8000cd4:	d219      	bcs.n	8000d0a <__aeabi_fdiv+0x212>
 8000cd6:	221b      	movs	r2, #27
 8000cd8:	2500      	movs	r5, #0
 8000cda:	3f01      	subs	r7, #1
 8000cdc:	2601      	movs	r6, #1
 8000cde:	001c      	movs	r4, r3
 8000ce0:	006d      	lsls	r5, r5, #1
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	db01      	blt.n	8000cec <__aeabi_fdiv+0x1f4>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	d801      	bhi.n	8000cf0 <__aeabi_fdiv+0x1f8>
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	4335      	orrs	r5, r6
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d1f3      	bne.n	8000cde <__aeabi_fdiv+0x1e6>
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	4193      	sbcs	r3, r2
 8000cfa:	431d      	orrs	r5, r3
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	337f      	adds	r3, #127	; 0x7f
 8000d00:	000e      	movs	r6, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dd00      	ble.n	8000d08 <__aeabi_fdiv+0x210>
 8000d06:	e741      	b.n	8000b8c <__aeabi_fdiv+0x94>
 8000d08:	e7aa      	b.n	8000c60 <__aeabi_fdiv+0x168>
 8000d0a:	221a      	movs	r2, #26
 8000d0c:	2501      	movs	r5, #1
 8000d0e:	1a1b      	subs	r3, r3, r0
 8000d10:	e7e4      	b.n	8000cdc <__aeabi_fdiv+0x1e4>
 8000d12:	01ad      	lsls	r5, r5, #6
 8000d14:	2000      	movs	r0, #0
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e74f      	b.n	8000bba <__aeabi_fdiv+0xc2>
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	0800e52c 	.word	0x0800e52c
 8000d20:	f7ffffff 	.word	0xf7ffffff
 8000d24:	0800e56c 	.word	0x0800e56c

08000d28 <__aeabi_dadd>:
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	464f      	mov	r7, r9
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	000d      	movs	r5, r1
 8000d32:	0004      	movs	r4, r0
 8000d34:	b5c0      	push	{r6, r7, lr}
 8000d36:	001f      	movs	r7, r3
 8000d38:	0011      	movs	r1, r2
 8000d3a:	0328      	lsls	r0, r5, #12
 8000d3c:	0f62      	lsrs	r2, r4, #29
 8000d3e:	0a40      	lsrs	r0, r0, #9
 8000d40:	4310      	orrs	r0, r2
 8000d42:	007a      	lsls	r2, r7, #1
 8000d44:	0d52      	lsrs	r2, r2, #21
 8000d46:	00e3      	lsls	r3, r4, #3
 8000d48:	033c      	lsls	r4, r7, #12
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	0a64      	lsrs	r4, r4, #9
 8000d4e:	0ffa      	lsrs	r2, r7, #31
 8000d50:	0f4f      	lsrs	r7, r1, #29
 8000d52:	006e      	lsls	r6, r5, #1
 8000d54:	4327      	orrs	r7, r4
 8000d56:	4692      	mov	sl, r2
 8000d58:	46b8      	mov	r8, r7
 8000d5a:	0d76      	lsrs	r6, r6, #21
 8000d5c:	0fed      	lsrs	r5, r5, #31
 8000d5e:	00c9      	lsls	r1, r1, #3
 8000d60:	4295      	cmp	r5, r2
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x3e>
 8000d64:	e099      	b.n	8000e9a <__aeabi_dadd+0x172>
 8000d66:	464c      	mov	r4, r9
 8000d68:	1b34      	subs	r4, r6, r4
 8000d6a:	46a4      	mov	ip, r4
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	dc00      	bgt.n	8000d72 <__aeabi_dadd+0x4a>
 8000d70:	e07c      	b.n	8000e6c <__aeabi_dadd+0x144>
 8000d72:	464a      	mov	r2, r9
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x52>
 8000d78:	e0b8      	b.n	8000eec <__aeabi_dadd+0x1c4>
 8000d7a:	4ac5      	ldr	r2, [pc, #788]	; (8001090 <__aeabi_dadd+0x368>)
 8000d7c:	4296      	cmp	r6, r2
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dadd+0x5a>
 8000d80:	e11c      	b.n	8000fbc <__aeabi_dadd+0x294>
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	003c      	movs	r4, r7
 8000d86:	0412      	lsls	r2, r2, #16
 8000d88:	4314      	orrs	r4, r2
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	2a38      	cmp	r2, #56	; 0x38
 8000d90:	dd00      	ble.n	8000d94 <__aeabi_dadd+0x6c>
 8000d92:	e161      	b.n	8001058 <__aeabi_dadd+0x330>
 8000d94:	2a1f      	cmp	r2, #31
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_dadd+0x72>
 8000d98:	e1cc      	b.n	8001134 <__aeabi_dadd+0x40c>
 8000d9a:	4664      	mov	r4, ip
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	1b12      	subs	r2, r2, r4
 8000da0:	4644      	mov	r4, r8
 8000da2:	4094      	lsls	r4, r2
 8000da4:	000f      	movs	r7, r1
 8000da6:	46a1      	mov	r9, r4
 8000da8:	4664      	mov	r4, ip
 8000daa:	4091      	lsls	r1, r2
 8000dac:	40e7      	lsrs	r7, r4
 8000dae:	464c      	mov	r4, r9
 8000db0:	1e4a      	subs	r2, r1, #1
 8000db2:	4191      	sbcs	r1, r2
 8000db4:	433c      	orrs	r4, r7
 8000db6:	4642      	mov	r2, r8
 8000db8:	4321      	orrs	r1, r4
 8000dba:	4664      	mov	r4, ip
 8000dbc:	40e2      	lsrs	r2, r4
 8000dbe:	1a80      	subs	r0, r0, r2
 8000dc0:	1a5c      	subs	r4, r3, r1
 8000dc2:	42a3      	cmp	r3, r4
 8000dc4:	419b      	sbcs	r3, r3
 8000dc6:	425f      	negs	r7, r3
 8000dc8:	1bc7      	subs	r7, r0, r7
 8000dca:	023b      	lsls	r3, r7, #8
 8000dcc:	d400      	bmi.n	8000dd0 <__aeabi_dadd+0xa8>
 8000dce:	e0d0      	b.n	8000f72 <__aeabi_dadd+0x24a>
 8000dd0:	027f      	lsls	r7, r7, #9
 8000dd2:	0a7f      	lsrs	r7, r7, #9
 8000dd4:	2f00      	cmp	r7, #0
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0xb2>
 8000dd8:	e0ff      	b.n	8000fda <__aeabi_dadd+0x2b2>
 8000dda:	0038      	movs	r0, r7
 8000ddc:	f001 fe5a 	bl	8002a94 <__clzsi2>
 8000de0:	0001      	movs	r1, r0
 8000de2:	3908      	subs	r1, #8
 8000de4:	2320      	movs	r3, #32
 8000de6:	0022      	movs	r2, r4
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	408f      	lsls	r7, r1
 8000dec:	40da      	lsrs	r2, r3
 8000dee:	408c      	lsls	r4, r1
 8000df0:	4317      	orrs	r7, r2
 8000df2:	42b1      	cmp	r1, r6
 8000df4:	da00      	bge.n	8000df8 <__aeabi_dadd+0xd0>
 8000df6:	e0ff      	b.n	8000ff8 <__aeabi_dadd+0x2d0>
 8000df8:	1b89      	subs	r1, r1, r6
 8000dfa:	1c4b      	adds	r3, r1, #1
 8000dfc:	2b1f      	cmp	r3, #31
 8000dfe:	dd00      	ble.n	8000e02 <__aeabi_dadd+0xda>
 8000e00:	e0a8      	b.n	8000f54 <__aeabi_dadd+0x22c>
 8000e02:	2220      	movs	r2, #32
 8000e04:	0039      	movs	r1, r7
 8000e06:	1ad2      	subs	r2, r2, r3
 8000e08:	0020      	movs	r0, r4
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	40d8      	lsrs	r0, r3
 8000e10:	1e62      	subs	r2, r4, #1
 8000e12:	4194      	sbcs	r4, r2
 8000e14:	40df      	lsrs	r7, r3
 8000e16:	2600      	movs	r6, #0
 8000e18:	4301      	orrs	r1, r0
 8000e1a:	430c      	orrs	r4, r1
 8000e1c:	0763      	lsls	r3, r4, #29
 8000e1e:	d009      	beq.n	8000e34 <__aeabi_dadd+0x10c>
 8000e20:	230f      	movs	r3, #15
 8000e22:	4023      	ands	r3, r4
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d005      	beq.n	8000e34 <__aeabi_dadd+0x10c>
 8000e28:	1d23      	adds	r3, r4, #4
 8000e2a:	42a3      	cmp	r3, r4
 8000e2c:	41a4      	sbcs	r4, r4
 8000e2e:	4264      	negs	r4, r4
 8000e30:	193f      	adds	r7, r7, r4
 8000e32:	001c      	movs	r4, r3
 8000e34:	023b      	lsls	r3, r7, #8
 8000e36:	d400      	bmi.n	8000e3a <__aeabi_dadd+0x112>
 8000e38:	e09e      	b.n	8000f78 <__aeabi_dadd+0x250>
 8000e3a:	4b95      	ldr	r3, [pc, #596]	; (8001090 <__aeabi_dadd+0x368>)
 8000e3c:	3601      	adds	r6, #1
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dadd+0x11c>
 8000e42:	e0b7      	b.n	8000fb4 <__aeabi_dadd+0x28c>
 8000e44:	4a93      	ldr	r2, [pc, #588]	; (8001094 <__aeabi_dadd+0x36c>)
 8000e46:	08e4      	lsrs	r4, r4, #3
 8000e48:	4017      	ands	r7, r2
 8000e4a:	077b      	lsls	r3, r7, #29
 8000e4c:	0571      	lsls	r1, r6, #21
 8000e4e:	027f      	lsls	r7, r7, #9
 8000e50:	4323      	orrs	r3, r4
 8000e52:	0b3f      	lsrs	r7, r7, #12
 8000e54:	0d4a      	lsrs	r2, r1, #21
 8000e56:	0512      	lsls	r2, r2, #20
 8000e58:	433a      	orrs	r2, r7
 8000e5a:	07ed      	lsls	r5, r5, #31
 8000e5c:	432a      	orrs	r2, r5
 8000e5e:	0018      	movs	r0, r3
 8000e60:	0011      	movs	r1, r2
 8000e62:	bce0      	pop	{r5, r6, r7}
 8000e64:	46ba      	mov	sl, r7
 8000e66:	46b1      	mov	r9, r6
 8000e68:	46a8      	mov	r8, r5
 8000e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d04b      	beq.n	8000f08 <__aeabi_dadd+0x1e0>
 8000e70:	464c      	mov	r4, r9
 8000e72:	1ba4      	subs	r4, r4, r6
 8000e74:	46a4      	mov	ip, r4
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d000      	beq.n	8000e7c <__aeabi_dadd+0x154>
 8000e7a:	e123      	b.n	80010c4 <__aeabi_dadd+0x39c>
 8000e7c:	0004      	movs	r4, r0
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x15c>
 8000e82:	e1af      	b.n	80011e4 <__aeabi_dadd+0x4bc>
 8000e84:	4662      	mov	r2, ip
 8000e86:	1e54      	subs	r4, r2, #1
 8000e88:	2a01      	cmp	r2, #1
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_dadd+0x166>
 8000e8c:	e215      	b.n	80012ba <__aeabi_dadd+0x592>
 8000e8e:	4d80      	ldr	r5, [pc, #512]	; (8001090 <__aeabi_dadd+0x368>)
 8000e90:	45ac      	cmp	ip, r5
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dadd+0x16e>
 8000e94:	e1c8      	b.n	8001228 <__aeabi_dadd+0x500>
 8000e96:	46a4      	mov	ip, r4
 8000e98:	e11b      	b.n	80010d2 <__aeabi_dadd+0x3aa>
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	1ab2      	subs	r2, r6, r2
 8000e9e:	4694      	mov	ip, r2
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_dadd+0x17e>
 8000ea4:	e0ac      	b.n	8001000 <__aeabi_dadd+0x2d8>
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d043      	beq.n	8000f34 <__aeabi_dadd+0x20c>
 8000eac:	4a78      	ldr	r2, [pc, #480]	; (8001090 <__aeabi_dadd+0x368>)
 8000eae:	4296      	cmp	r6, r2
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dadd+0x18c>
 8000eb2:	e1af      	b.n	8001214 <__aeabi_dadd+0x4ec>
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	003c      	movs	r4, r7
 8000eb8:	0412      	lsls	r2, r2, #16
 8000eba:	4314      	orrs	r4, r2
 8000ebc:	46a0      	mov	r8, r4
 8000ebe:	4662      	mov	r2, ip
 8000ec0:	2a38      	cmp	r2, #56	; 0x38
 8000ec2:	dc67      	bgt.n	8000f94 <__aeabi_dadd+0x26c>
 8000ec4:	2a1f      	cmp	r2, #31
 8000ec6:	dc00      	bgt.n	8000eca <__aeabi_dadd+0x1a2>
 8000ec8:	e15f      	b.n	800118a <__aeabi_dadd+0x462>
 8000eca:	4647      	mov	r7, r8
 8000ecc:	3a20      	subs	r2, #32
 8000ece:	40d7      	lsrs	r7, r2
 8000ed0:	4662      	mov	r2, ip
 8000ed2:	2a20      	cmp	r2, #32
 8000ed4:	d005      	beq.n	8000ee2 <__aeabi_dadd+0x1ba>
 8000ed6:	4664      	mov	r4, ip
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	1b12      	subs	r2, r2, r4
 8000edc:	4644      	mov	r4, r8
 8000ede:	4094      	lsls	r4, r2
 8000ee0:	4321      	orrs	r1, r4
 8000ee2:	1e4a      	subs	r2, r1, #1
 8000ee4:	4191      	sbcs	r1, r2
 8000ee6:	000c      	movs	r4, r1
 8000ee8:	433c      	orrs	r4, r7
 8000eea:	e057      	b.n	8000f9c <__aeabi_dadd+0x274>
 8000eec:	003a      	movs	r2, r7
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x1cc>
 8000ef2:	e105      	b.n	8001100 <__aeabi_dadd+0x3d8>
 8000ef4:	0022      	movs	r2, r4
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	2c01      	cmp	r4, #1
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x1d6>
 8000efc:	e182      	b.n	8001204 <__aeabi_dadd+0x4dc>
 8000efe:	4c64      	ldr	r4, [pc, #400]	; (8001090 <__aeabi_dadd+0x368>)
 8000f00:	45a4      	cmp	ip, r4
 8000f02:	d05b      	beq.n	8000fbc <__aeabi_dadd+0x294>
 8000f04:	4694      	mov	ip, r2
 8000f06:	e741      	b.n	8000d8c <__aeabi_dadd+0x64>
 8000f08:	4c63      	ldr	r4, [pc, #396]	; (8001098 <__aeabi_dadd+0x370>)
 8000f0a:	1c77      	adds	r7, r6, #1
 8000f0c:	4227      	tst	r7, r4
 8000f0e:	d000      	beq.n	8000f12 <__aeabi_dadd+0x1ea>
 8000f10:	e0c4      	b.n	800109c <__aeabi_dadd+0x374>
 8000f12:	0004      	movs	r4, r0
 8000f14:	431c      	orrs	r4, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d000      	beq.n	8000f1c <__aeabi_dadd+0x1f4>
 8000f1a:	e169      	b.n	80011f0 <__aeabi_dadd+0x4c8>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x1fa>
 8000f20:	e1bf      	b.n	80012a2 <__aeabi_dadd+0x57a>
 8000f22:	4644      	mov	r4, r8
 8000f24:	430c      	orrs	r4, r1
 8000f26:	d000      	beq.n	8000f2a <__aeabi_dadd+0x202>
 8000f28:	e1d0      	b.n	80012cc <__aeabi_dadd+0x5a4>
 8000f2a:	0742      	lsls	r2, r0, #29
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	08c0      	lsrs	r0, r0, #3
 8000f32:	e029      	b.n	8000f88 <__aeabi_dadd+0x260>
 8000f34:	003a      	movs	r2, r7
 8000f36:	430a      	orrs	r2, r1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x214>
 8000f3a:	e170      	b.n	800121e <__aeabi_dadd+0x4f6>
 8000f3c:	4662      	mov	r2, ip
 8000f3e:	4664      	mov	r4, ip
 8000f40:	3a01      	subs	r2, #1
 8000f42:	2c01      	cmp	r4, #1
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x220>
 8000f46:	e0e0      	b.n	800110a <__aeabi_dadd+0x3e2>
 8000f48:	4c51      	ldr	r4, [pc, #324]	; (8001090 <__aeabi_dadd+0x368>)
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dadd+0x228>
 8000f4e:	e161      	b.n	8001214 <__aeabi_dadd+0x4ec>
 8000f50:	4694      	mov	ip, r2
 8000f52:	e7b4      	b.n	8000ebe <__aeabi_dadd+0x196>
 8000f54:	003a      	movs	r2, r7
 8000f56:	391f      	subs	r1, #31
 8000f58:	40ca      	lsrs	r2, r1
 8000f5a:	0011      	movs	r1, r2
 8000f5c:	2b20      	cmp	r3, #32
 8000f5e:	d003      	beq.n	8000f68 <__aeabi_dadd+0x240>
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	409f      	lsls	r7, r3
 8000f66:	433c      	orrs	r4, r7
 8000f68:	1e63      	subs	r3, r4, #1
 8000f6a:	419c      	sbcs	r4, r3
 8000f6c:	2700      	movs	r7, #0
 8000f6e:	2600      	movs	r6, #0
 8000f70:	430c      	orrs	r4, r1
 8000f72:	0763      	lsls	r3, r4, #29
 8000f74:	d000      	beq.n	8000f78 <__aeabi_dadd+0x250>
 8000f76:	e753      	b.n	8000e20 <__aeabi_dadd+0xf8>
 8000f78:	46b4      	mov	ip, r6
 8000f7a:	08e4      	lsrs	r4, r4, #3
 8000f7c:	077b      	lsls	r3, r7, #29
 8000f7e:	4323      	orrs	r3, r4
 8000f80:	08f8      	lsrs	r0, r7, #3
 8000f82:	4a43      	ldr	r2, [pc, #268]	; (8001090 <__aeabi_dadd+0x368>)
 8000f84:	4594      	cmp	ip, r2
 8000f86:	d01d      	beq.n	8000fc4 <__aeabi_dadd+0x29c>
 8000f88:	4662      	mov	r2, ip
 8000f8a:	0307      	lsls	r7, r0, #12
 8000f8c:	0552      	lsls	r2, r2, #21
 8000f8e:	0b3f      	lsrs	r7, r7, #12
 8000f90:	0d52      	lsrs	r2, r2, #21
 8000f92:	e760      	b.n	8000e56 <__aeabi_dadd+0x12e>
 8000f94:	4644      	mov	r4, r8
 8000f96:	430c      	orrs	r4, r1
 8000f98:	1e62      	subs	r2, r4, #1
 8000f9a:	4194      	sbcs	r4, r2
 8000f9c:	18e4      	adds	r4, r4, r3
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	419b      	sbcs	r3, r3
 8000fa2:	425f      	negs	r7, r3
 8000fa4:	183f      	adds	r7, r7, r0
 8000fa6:	023b      	lsls	r3, r7, #8
 8000fa8:	d5e3      	bpl.n	8000f72 <__aeabi_dadd+0x24a>
 8000faa:	4b39      	ldr	r3, [pc, #228]	; (8001090 <__aeabi_dadd+0x368>)
 8000fac:	3601      	adds	r6, #1
 8000fae:	429e      	cmp	r6, r3
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_dadd+0x28c>
 8000fb2:	e0b5      	b.n	8001120 <__aeabi_dadd+0x3f8>
 8000fb4:	0032      	movs	r2, r6
 8000fb6:	2700      	movs	r7, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e74c      	b.n	8000e56 <__aeabi_dadd+0x12e>
 8000fbc:	0742      	lsls	r2, r0, #29
 8000fbe:	08db      	lsrs	r3, r3, #3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	08c0      	lsrs	r0, r0, #3
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_dadd+0x2a4>
 8000fca:	e1e1      	b.n	8001390 <__aeabi_dadd+0x668>
 8000fcc:	2780      	movs	r7, #128	; 0x80
 8000fce:	033f      	lsls	r7, r7, #12
 8000fd0:	4307      	orrs	r7, r0
 8000fd2:	033f      	lsls	r7, r7, #12
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <__aeabi_dadd+0x368>)
 8000fd6:	0b3f      	lsrs	r7, r7, #12
 8000fd8:	e73d      	b.n	8000e56 <__aeabi_dadd+0x12e>
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f001 fd5a 	bl	8002a94 <__clzsi2>
 8000fe0:	0001      	movs	r1, r0
 8000fe2:	3118      	adds	r1, #24
 8000fe4:	291f      	cmp	r1, #31
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_dadd+0x2c2>
 8000fe8:	e6fc      	b.n	8000de4 <__aeabi_dadd+0xbc>
 8000fea:	3808      	subs	r0, #8
 8000fec:	4084      	lsls	r4, r0
 8000fee:	0027      	movs	r7, r4
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	42b1      	cmp	r1, r6
 8000ff4:	db00      	blt.n	8000ff8 <__aeabi_dadd+0x2d0>
 8000ff6:	e6ff      	b.n	8000df8 <__aeabi_dadd+0xd0>
 8000ff8:	4a26      	ldr	r2, [pc, #152]	; (8001094 <__aeabi_dadd+0x36c>)
 8000ffa:	1a76      	subs	r6, r6, r1
 8000ffc:	4017      	ands	r7, r2
 8000ffe:	e70d      	b.n	8000e1c <__aeabi_dadd+0xf4>
 8001000:	2a00      	cmp	r2, #0
 8001002:	d02f      	beq.n	8001064 <__aeabi_dadd+0x33c>
 8001004:	464a      	mov	r2, r9
 8001006:	1b92      	subs	r2, r2, r6
 8001008:	4694      	mov	ip, r2
 800100a:	2e00      	cmp	r6, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_dadd+0x2e8>
 800100e:	e0ad      	b.n	800116c <__aeabi_dadd+0x444>
 8001010:	4a1f      	ldr	r2, [pc, #124]	; (8001090 <__aeabi_dadd+0x368>)
 8001012:	4591      	cmp	r9, r2
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x2f0>
 8001016:	e10f      	b.n	8001238 <__aeabi_dadd+0x510>
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	0412      	lsls	r2, r2, #16
 800101c:	4310      	orrs	r0, r2
 800101e:	4662      	mov	r2, ip
 8001020:	2a38      	cmp	r2, #56	; 0x38
 8001022:	dd00      	ble.n	8001026 <__aeabi_dadd+0x2fe>
 8001024:	e10f      	b.n	8001246 <__aeabi_dadd+0x51e>
 8001026:	2a1f      	cmp	r2, #31
 8001028:	dd00      	ble.n	800102c <__aeabi_dadd+0x304>
 800102a:	e180      	b.n	800132e <__aeabi_dadd+0x606>
 800102c:	4664      	mov	r4, ip
 800102e:	2220      	movs	r2, #32
 8001030:	001e      	movs	r6, r3
 8001032:	1b12      	subs	r2, r2, r4
 8001034:	4667      	mov	r7, ip
 8001036:	0004      	movs	r4, r0
 8001038:	4093      	lsls	r3, r2
 800103a:	4094      	lsls	r4, r2
 800103c:	40fe      	lsrs	r6, r7
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	4193      	sbcs	r3, r2
 8001042:	40f8      	lsrs	r0, r7
 8001044:	4334      	orrs	r4, r6
 8001046:	431c      	orrs	r4, r3
 8001048:	4480      	add	r8, r0
 800104a:	1864      	adds	r4, r4, r1
 800104c:	428c      	cmp	r4, r1
 800104e:	41bf      	sbcs	r7, r7
 8001050:	427f      	negs	r7, r7
 8001052:	464e      	mov	r6, r9
 8001054:	4447      	add	r7, r8
 8001056:	e7a6      	b.n	8000fa6 <__aeabi_dadd+0x27e>
 8001058:	4642      	mov	r2, r8
 800105a:	430a      	orrs	r2, r1
 800105c:	0011      	movs	r1, r2
 800105e:	1e4a      	subs	r2, r1, #1
 8001060:	4191      	sbcs	r1, r2
 8001062:	e6ad      	b.n	8000dc0 <__aeabi_dadd+0x98>
 8001064:	4c0c      	ldr	r4, [pc, #48]	; (8001098 <__aeabi_dadd+0x370>)
 8001066:	1c72      	adds	r2, r6, #1
 8001068:	4222      	tst	r2, r4
 800106a:	d000      	beq.n	800106e <__aeabi_dadd+0x346>
 800106c:	e0a1      	b.n	80011b2 <__aeabi_dadd+0x48a>
 800106e:	0002      	movs	r2, r0
 8001070:	431a      	orrs	r2, r3
 8001072:	2e00      	cmp	r6, #0
 8001074:	d000      	beq.n	8001078 <__aeabi_dadd+0x350>
 8001076:	e0fa      	b.n	800126e <__aeabi_dadd+0x546>
 8001078:	2a00      	cmp	r2, #0
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x356>
 800107c:	e145      	b.n	800130a <__aeabi_dadd+0x5e2>
 800107e:	003a      	movs	r2, r7
 8001080:	430a      	orrs	r2, r1
 8001082:	d000      	beq.n	8001086 <__aeabi_dadd+0x35e>
 8001084:	e146      	b.n	8001314 <__aeabi_dadd+0x5ec>
 8001086:	0742      	lsls	r2, r0, #29
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	4313      	orrs	r3, r2
 800108c:	08c0      	lsrs	r0, r0, #3
 800108e:	e77b      	b.n	8000f88 <__aeabi_dadd+0x260>
 8001090:	000007ff 	.word	0x000007ff
 8001094:	ff7fffff 	.word	0xff7fffff
 8001098:	000007fe 	.word	0x000007fe
 800109c:	4647      	mov	r7, r8
 800109e:	1a5c      	subs	r4, r3, r1
 80010a0:	1bc2      	subs	r2, r0, r7
 80010a2:	42a3      	cmp	r3, r4
 80010a4:	41bf      	sbcs	r7, r7
 80010a6:	427f      	negs	r7, r7
 80010a8:	46b9      	mov	r9, r7
 80010aa:	0017      	movs	r7, r2
 80010ac:	464a      	mov	r2, r9
 80010ae:	1abf      	subs	r7, r7, r2
 80010b0:	023a      	lsls	r2, r7, #8
 80010b2:	d500      	bpl.n	80010b6 <__aeabi_dadd+0x38e>
 80010b4:	e08d      	b.n	80011d2 <__aeabi_dadd+0x4aa>
 80010b6:	0023      	movs	r3, r4
 80010b8:	433b      	orrs	r3, r7
 80010ba:	d000      	beq.n	80010be <__aeabi_dadd+0x396>
 80010bc:	e68a      	b.n	8000dd4 <__aeabi_dadd+0xac>
 80010be:	2000      	movs	r0, #0
 80010c0:	2500      	movs	r5, #0
 80010c2:	e761      	b.n	8000f88 <__aeabi_dadd+0x260>
 80010c4:	4cb4      	ldr	r4, [pc, #720]	; (8001398 <__aeabi_dadd+0x670>)
 80010c6:	45a1      	cmp	r9, r4
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x3a4>
 80010ca:	e0ad      	b.n	8001228 <__aeabi_dadd+0x500>
 80010cc:	2480      	movs	r4, #128	; 0x80
 80010ce:	0424      	lsls	r4, r4, #16
 80010d0:	4320      	orrs	r0, r4
 80010d2:	4664      	mov	r4, ip
 80010d4:	2c38      	cmp	r4, #56	; 0x38
 80010d6:	dc3d      	bgt.n	8001154 <__aeabi_dadd+0x42c>
 80010d8:	4662      	mov	r2, ip
 80010da:	2c1f      	cmp	r4, #31
 80010dc:	dd00      	ble.n	80010e0 <__aeabi_dadd+0x3b8>
 80010de:	e0b7      	b.n	8001250 <__aeabi_dadd+0x528>
 80010e0:	2520      	movs	r5, #32
 80010e2:	001e      	movs	r6, r3
 80010e4:	1b2d      	subs	r5, r5, r4
 80010e6:	0004      	movs	r4, r0
 80010e8:	40ab      	lsls	r3, r5
 80010ea:	40ac      	lsls	r4, r5
 80010ec:	40d6      	lsrs	r6, r2
 80010ee:	40d0      	lsrs	r0, r2
 80010f0:	4642      	mov	r2, r8
 80010f2:	1e5d      	subs	r5, r3, #1
 80010f4:	41ab      	sbcs	r3, r5
 80010f6:	4334      	orrs	r4, r6
 80010f8:	1a12      	subs	r2, r2, r0
 80010fa:	4690      	mov	r8, r2
 80010fc:	4323      	orrs	r3, r4
 80010fe:	e02c      	b.n	800115a <__aeabi_dadd+0x432>
 8001100:	0742      	lsls	r2, r0, #29
 8001102:	08db      	lsrs	r3, r3, #3
 8001104:	4313      	orrs	r3, r2
 8001106:	08c0      	lsrs	r0, r0, #3
 8001108:	e73b      	b.n	8000f82 <__aeabi_dadd+0x25a>
 800110a:	185c      	adds	r4, r3, r1
 800110c:	429c      	cmp	r4, r3
 800110e:	419b      	sbcs	r3, r3
 8001110:	4440      	add	r0, r8
 8001112:	425b      	negs	r3, r3
 8001114:	18c7      	adds	r7, r0, r3
 8001116:	2601      	movs	r6, #1
 8001118:	023b      	lsls	r3, r7, #8
 800111a:	d400      	bmi.n	800111e <__aeabi_dadd+0x3f6>
 800111c:	e729      	b.n	8000f72 <__aeabi_dadd+0x24a>
 800111e:	2602      	movs	r6, #2
 8001120:	4a9e      	ldr	r2, [pc, #632]	; (800139c <__aeabi_dadd+0x674>)
 8001122:	0863      	lsrs	r3, r4, #1
 8001124:	4017      	ands	r7, r2
 8001126:	2201      	movs	r2, #1
 8001128:	4014      	ands	r4, r2
 800112a:	431c      	orrs	r4, r3
 800112c:	07fb      	lsls	r3, r7, #31
 800112e:	431c      	orrs	r4, r3
 8001130:	087f      	lsrs	r7, r7, #1
 8001132:	e673      	b.n	8000e1c <__aeabi_dadd+0xf4>
 8001134:	4644      	mov	r4, r8
 8001136:	3a20      	subs	r2, #32
 8001138:	40d4      	lsrs	r4, r2
 800113a:	4662      	mov	r2, ip
 800113c:	2a20      	cmp	r2, #32
 800113e:	d005      	beq.n	800114c <__aeabi_dadd+0x424>
 8001140:	4667      	mov	r7, ip
 8001142:	2240      	movs	r2, #64	; 0x40
 8001144:	1bd2      	subs	r2, r2, r7
 8001146:	4647      	mov	r7, r8
 8001148:	4097      	lsls	r7, r2
 800114a:	4339      	orrs	r1, r7
 800114c:	1e4a      	subs	r2, r1, #1
 800114e:	4191      	sbcs	r1, r2
 8001150:	4321      	orrs	r1, r4
 8001152:	e635      	b.n	8000dc0 <__aeabi_dadd+0x98>
 8001154:	4303      	orrs	r3, r0
 8001156:	1e58      	subs	r0, r3, #1
 8001158:	4183      	sbcs	r3, r0
 800115a:	1acc      	subs	r4, r1, r3
 800115c:	42a1      	cmp	r1, r4
 800115e:	41bf      	sbcs	r7, r7
 8001160:	4643      	mov	r3, r8
 8001162:	427f      	negs	r7, r7
 8001164:	4655      	mov	r5, sl
 8001166:	464e      	mov	r6, r9
 8001168:	1bdf      	subs	r7, r3, r7
 800116a:	e62e      	b.n	8000dca <__aeabi_dadd+0xa2>
 800116c:	0002      	movs	r2, r0
 800116e:	431a      	orrs	r2, r3
 8001170:	d100      	bne.n	8001174 <__aeabi_dadd+0x44c>
 8001172:	e0bd      	b.n	80012f0 <__aeabi_dadd+0x5c8>
 8001174:	4662      	mov	r2, ip
 8001176:	4664      	mov	r4, ip
 8001178:	3a01      	subs	r2, #1
 800117a:	2c01      	cmp	r4, #1
 800117c:	d100      	bne.n	8001180 <__aeabi_dadd+0x458>
 800117e:	e0e5      	b.n	800134c <__aeabi_dadd+0x624>
 8001180:	4c85      	ldr	r4, [pc, #532]	; (8001398 <__aeabi_dadd+0x670>)
 8001182:	45a4      	cmp	ip, r4
 8001184:	d058      	beq.n	8001238 <__aeabi_dadd+0x510>
 8001186:	4694      	mov	ip, r2
 8001188:	e749      	b.n	800101e <__aeabi_dadd+0x2f6>
 800118a:	4664      	mov	r4, ip
 800118c:	2220      	movs	r2, #32
 800118e:	1b12      	subs	r2, r2, r4
 8001190:	4644      	mov	r4, r8
 8001192:	4094      	lsls	r4, r2
 8001194:	000f      	movs	r7, r1
 8001196:	46a1      	mov	r9, r4
 8001198:	4664      	mov	r4, ip
 800119a:	4091      	lsls	r1, r2
 800119c:	40e7      	lsrs	r7, r4
 800119e:	464c      	mov	r4, r9
 80011a0:	1e4a      	subs	r2, r1, #1
 80011a2:	4191      	sbcs	r1, r2
 80011a4:	433c      	orrs	r4, r7
 80011a6:	4642      	mov	r2, r8
 80011a8:	430c      	orrs	r4, r1
 80011aa:	4661      	mov	r1, ip
 80011ac:	40ca      	lsrs	r2, r1
 80011ae:	1880      	adds	r0, r0, r2
 80011b0:	e6f4      	b.n	8000f9c <__aeabi_dadd+0x274>
 80011b2:	4c79      	ldr	r4, [pc, #484]	; (8001398 <__aeabi_dadd+0x670>)
 80011b4:	42a2      	cmp	r2, r4
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x492>
 80011b8:	e6fd      	b.n	8000fb6 <__aeabi_dadd+0x28e>
 80011ba:	1859      	adds	r1, r3, r1
 80011bc:	4299      	cmp	r1, r3
 80011be:	419b      	sbcs	r3, r3
 80011c0:	4440      	add	r0, r8
 80011c2:	425f      	negs	r7, r3
 80011c4:	19c7      	adds	r7, r0, r7
 80011c6:	07fc      	lsls	r4, r7, #31
 80011c8:	0849      	lsrs	r1, r1, #1
 80011ca:	0016      	movs	r6, r2
 80011cc:	430c      	orrs	r4, r1
 80011ce:	087f      	lsrs	r7, r7, #1
 80011d0:	e6cf      	b.n	8000f72 <__aeabi_dadd+0x24a>
 80011d2:	1acc      	subs	r4, r1, r3
 80011d4:	42a1      	cmp	r1, r4
 80011d6:	41bf      	sbcs	r7, r7
 80011d8:	4643      	mov	r3, r8
 80011da:	427f      	negs	r7, r7
 80011dc:	1a18      	subs	r0, r3, r0
 80011de:	4655      	mov	r5, sl
 80011e0:	1bc7      	subs	r7, r0, r7
 80011e2:	e5f7      	b.n	8000dd4 <__aeabi_dadd+0xac>
 80011e4:	08c9      	lsrs	r1, r1, #3
 80011e6:	077b      	lsls	r3, r7, #29
 80011e8:	4655      	mov	r5, sl
 80011ea:	430b      	orrs	r3, r1
 80011ec:	08f8      	lsrs	r0, r7, #3
 80011ee:	e6c8      	b.n	8000f82 <__aeabi_dadd+0x25a>
 80011f0:	2c00      	cmp	r4, #0
 80011f2:	d000      	beq.n	80011f6 <__aeabi_dadd+0x4ce>
 80011f4:	e081      	b.n	80012fa <__aeabi_dadd+0x5d2>
 80011f6:	4643      	mov	r3, r8
 80011f8:	430b      	orrs	r3, r1
 80011fa:	d115      	bne.n	8001228 <__aeabi_dadd+0x500>
 80011fc:	2080      	movs	r0, #128	; 0x80
 80011fe:	2500      	movs	r5, #0
 8001200:	0300      	lsls	r0, r0, #12
 8001202:	e6e3      	b.n	8000fcc <__aeabi_dadd+0x2a4>
 8001204:	1a5c      	subs	r4, r3, r1
 8001206:	42a3      	cmp	r3, r4
 8001208:	419b      	sbcs	r3, r3
 800120a:	1bc7      	subs	r7, r0, r7
 800120c:	425b      	negs	r3, r3
 800120e:	2601      	movs	r6, #1
 8001210:	1aff      	subs	r7, r7, r3
 8001212:	e5da      	b.n	8000dca <__aeabi_dadd+0xa2>
 8001214:	0742      	lsls	r2, r0, #29
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	4313      	orrs	r3, r2
 800121a:	08c0      	lsrs	r0, r0, #3
 800121c:	e6d2      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 800121e:	0742      	lsls	r2, r0, #29
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	4313      	orrs	r3, r2
 8001224:	08c0      	lsrs	r0, r0, #3
 8001226:	e6ac      	b.n	8000f82 <__aeabi_dadd+0x25a>
 8001228:	4643      	mov	r3, r8
 800122a:	4642      	mov	r2, r8
 800122c:	08c9      	lsrs	r1, r1, #3
 800122e:	075b      	lsls	r3, r3, #29
 8001230:	4655      	mov	r5, sl
 8001232:	430b      	orrs	r3, r1
 8001234:	08d0      	lsrs	r0, r2, #3
 8001236:	e6c5      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 8001238:	4643      	mov	r3, r8
 800123a:	4642      	mov	r2, r8
 800123c:	075b      	lsls	r3, r3, #29
 800123e:	08c9      	lsrs	r1, r1, #3
 8001240:	430b      	orrs	r3, r1
 8001242:	08d0      	lsrs	r0, r2, #3
 8001244:	e6be      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 8001246:	4303      	orrs	r3, r0
 8001248:	001c      	movs	r4, r3
 800124a:	1e63      	subs	r3, r4, #1
 800124c:	419c      	sbcs	r4, r3
 800124e:	e6fc      	b.n	800104a <__aeabi_dadd+0x322>
 8001250:	0002      	movs	r2, r0
 8001252:	3c20      	subs	r4, #32
 8001254:	40e2      	lsrs	r2, r4
 8001256:	0014      	movs	r4, r2
 8001258:	4662      	mov	r2, ip
 800125a:	2a20      	cmp	r2, #32
 800125c:	d003      	beq.n	8001266 <__aeabi_dadd+0x53e>
 800125e:	2540      	movs	r5, #64	; 0x40
 8001260:	1aad      	subs	r5, r5, r2
 8001262:	40a8      	lsls	r0, r5
 8001264:	4303      	orrs	r3, r0
 8001266:	1e58      	subs	r0, r3, #1
 8001268:	4183      	sbcs	r3, r0
 800126a:	4323      	orrs	r3, r4
 800126c:	e775      	b.n	800115a <__aeabi_dadd+0x432>
 800126e:	2a00      	cmp	r2, #0
 8001270:	d0e2      	beq.n	8001238 <__aeabi_dadd+0x510>
 8001272:	003a      	movs	r2, r7
 8001274:	430a      	orrs	r2, r1
 8001276:	d0cd      	beq.n	8001214 <__aeabi_dadd+0x4ec>
 8001278:	0742      	lsls	r2, r0, #29
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	4313      	orrs	r3, r2
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	08c0      	lsrs	r0, r0, #3
 8001282:	0312      	lsls	r2, r2, #12
 8001284:	4210      	tst	r0, r2
 8001286:	d006      	beq.n	8001296 <__aeabi_dadd+0x56e>
 8001288:	08fc      	lsrs	r4, r7, #3
 800128a:	4214      	tst	r4, r2
 800128c:	d103      	bne.n	8001296 <__aeabi_dadd+0x56e>
 800128e:	0020      	movs	r0, r4
 8001290:	08cb      	lsrs	r3, r1, #3
 8001292:	077a      	lsls	r2, r7, #29
 8001294:	4313      	orrs	r3, r2
 8001296:	0f5a      	lsrs	r2, r3, #29
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	0752      	lsls	r2, r2, #29
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	4313      	orrs	r3, r2
 80012a0:	e690      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 80012a2:	4643      	mov	r3, r8
 80012a4:	430b      	orrs	r3, r1
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x582>
 80012a8:	e709      	b.n	80010be <__aeabi_dadd+0x396>
 80012aa:	4643      	mov	r3, r8
 80012ac:	4642      	mov	r2, r8
 80012ae:	08c9      	lsrs	r1, r1, #3
 80012b0:	075b      	lsls	r3, r3, #29
 80012b2:	4655      	mov	r5, sl
 80012b4:	430b      	orrs	r3, r1
 80012b6:	08d0      	lsrs	r0, r2, #3
 80012b8:	e666      	b.n	8000f88 <__aeabi_dadd+0x260>
 80012ba:	1acc      	subs	r4, r1, r3
 80012bc:	42a1      	cmp	r1, r4
 80012be:	4189      	sbcs	r1, r1
 80012c0:	1a3f      	subs	r7, r7, r0
 80012c2:	4249      	negs	r1, r1
 80012c4:	4655      	mov	r5, sl
 80012c6:	2601      	movs	r6, #1
 80012c8:	1a7f      	subs	r7, r7, r1
 80012ca:	e57e      	b.n	8000dca <__aeabi_dadd+0xa2>
 80012cc:	4642      	mov	r2, r8
 80012ce:	1a5c      	subs	r4, r3, r1
 80012d0:	1a87      	subs	r7, r0, r2
 80012d2:	42a3      	cmp	r3, r4
 80012d4:	4192      	sbcs	r2, r2
 80012d6:	4252      	negs	r2, r2
 80012d8:	1abf      	subs	r7, r7, r2
 80012da:	023a      	lsls	r2, r7, #8
 80012dc:	d53d      	bpl.n	800135a <__aeabi_dadd+0x632>
 80012de:	1acc      	subs	r4, r1, r3
 80012e0:	42a1      	cmp	r1, r4
 80012e2:	4189      	sbcs	r1, r1
 80012e4:	4643      	mov	r3, r8
 80012e6:	4249      	negs	r1, r1
 80012e8:	1a1f      	subs	r7, r3, r0
 80012ea:	4655      	mov	r5, sl
 80012ec:	1a7f      	subs	r7, r7, r1
 80012ee:	e595      	b.n	8000e1c <__aeabi_dadd+0xf4>
 80012f0:	077b      	lsls	r3, r7, #29
 80012f2:	08c9      	lsrs	r1, r1, #3
 80012f4:	430b      	orrs	r3, r1
 80012f6:	08f8      	lsrs	r0, r7, #3
 80012f8:	e643      	b.n	8000f82 <__aeabi_dadd+0x25a>
 80012fa:	4644      	mov	r4, r8
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	430c      	orrs	r4, r1
 8001300:	d130      	bne.n	8001364 <__aeabi_dadd+0x63c>
 8001302:	0742      	lsls	r2, r0, #29
 8001304:	4313      	orrs	r3, r2
 8001306:	08c0      	lsrs	r0, r0, #3
 8001308:	e65c      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 800130a:	077b      	lsls	r3, r7, #29
 800130c:	08c9      	lsrs	r1, r1, #3
 800130e:	430b      	orrs	r3, r1
 8001310:	08f8      	lsrs	r0, r7, #3
 8001312:	e639      	b.n	8000f88 <__aeabi_dadd+0x260>
 8001314:	185c      	adds	r4, r3, r1
 8001316:	429c      	cmp	r4, r3
 8001318:	419b      	sbcs	r3, r3
 800131a:	4440      	add	r0, r8
 800131c:	425b      	negs	r3, r3
 800131e:	18c7      	adds	r7, r0, r3
 8001320:	023b      	lsls	r3, r7, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dadd+0x5fe>
 8001324:	e625      	b.n	8000f72 <__aeabi_dadd+0x24a>
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <__aeabi_dadd+0x674>)
 8001328:	2601      	movs	r6, #1
 800132a:	401f      	ands	r7, r3
 800132c:	e621      	b.n	8000f72 <__aeabi_dadd+0x24a>
 800132e:	0004      	movs	r4, r0
 8001330:	3a20      	subs	r2, #32
 8001332:	40d4      	lsrs	r4, r2
 8001334:	4662      	mov	r2, ip
 8001336:	2a20      	cmp	r2, #32
 8001338:	d004      	beq.n	8001344 <__aeabi_dadd+0x61c>
 800133a:	2240      	movs	r2, #64	; 0x40
 800133c:	4666      	mov	r6, ip
 800133e:	1b92      	subs	r2, r2, r6
 8001340:	4090      	lsls	r0, r2
 8001342:	4303      	orrs	r3, r0
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	4193      	sbcs	r3, r2
 8001348:	431c      	orrs	r4, r3
 800134a:	e67e      	b.n	800104a <__aeabi_dadd+0x322>
 800134c:	185c      	adds	r4, r3, r1
 800134e:	428c      	cmp	r4, r1
 8001350:	4189      	sbcs	r1, r1
 8001352:	4440      	add	r0, r8
 8001354:	4249      	negs	r1, r1
 8001356:	1847      	adds	r7, r0, r1
 8001358:	e6dd      	b.n	8001116 <__aeabi_dadd+0x3ee>
 800135a:	0023      	movs	r3, r4
 800135c:	433b      	orrs	r3, r7
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0x63a>
 8001360:	e6ad      	b.n	80010be <__aeabi_dadd+0x396>
 8001362:	e606      	b.n	8000f72 <__aeabi_dadd+0x24a>
 8001364:	0744      	lsls	r4, r0, #29
 8001366:	4323      	orrs	r3, r4
 8001368:	2480      	movs	r4, #128	; 0x80
 800136a:	08c0      	lsrs	r0, r0, #3
 800136c:	0324      	lsls	r4, r4, #12
 800136e:	4220      	tst	r0, r4
 8001370:	d008      	beq.n	8001384 <__aeabi_dadd+0x65c>
 8001372:	4642      	mov	r2, r8
 8001374:	08d6      	lsrs	r6, r2, #3
 8001376:	4226      	tst	r6, r4
 8001378:	d104      	bne.n	8001384 <__aeabi_dadd+0x65c>
 800137a:	4655      	mov	r5, sl
 800137c:	0030      	movs	r0, r6
 800137e:	08cb      	lsrs	r3, r1, #3
 8001380:	0751      	lsls	r1, r2, #29
 8001382:	430b      	orrs	r3, r1
 8001384:	0f5a      	lsrs	r2, r3, #29
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	08db      	lsrs	r3, r3, #3
 800138a:	0752      	lsls	r2, r2, #29
 800138c:	4313      	orrs	r3, r2
 800138e:	e619      	b.n	8000fc4 <__aeabi_dadd+0x29c>
 8001390:	2300      	movs	r3, #0
 8001392:	4a01      	ldr	r2, [pc, #4]	; (8001398 <__aeabi_dadd+0x670>)
 8001394:	001f      	movs	r7, r3
 8001396:	e55e      	b.n	8000e56 <__aeabi_dadd+0x12e>
 8001398:	000007ff 	.word	0x000007ff
 800139c:	ff7fffff 	.word	0xff7fffff

080013a0 <__aeabi_ddiv>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4657      	mov	r7, sl
 80013a4:	464e      	mov	r6, r9
 80013a6:	4645      	mov	r5, r8
 80013a8:	46de      	mov	lr, fp
 80013aa:	b5e0      	push	{r5, r6, r7, lr}
 80013ac:	4681      	mov	r9, r0
 80013ae:	0005      	movs	r5, r0
 80013b0:	030c      	lsls	r4, r1, #12
 80013b2:	0048      	lsls	r0, r1, #1
 80013b4:	4692      	mov	sl, r2
 80013b6:	001f      	movs	r7, r3
 80013b8:	b085      	sub	sp, #20
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	0d40      	lsrs	r0, r0, #21
 80013be:	0fce      	lsrs	r6, r1, #31
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x26>
 80013c4:	e156      	b.n	8001674 <__aeabi_ddiv+0x2d4>
 80013c6:	4bd4      	ldr	r3, [pc, #848]	; (8001718 <__aeabi_ddiv+0x378>)
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d100      	bne.n	80013ce <__aeabi_ddiv+0x2e>
 80013cc:	e172      	b.n	80016b4 <__aeabi_ddiv+0x314>
 80013ce:	0f6b      	lsrs	r3, r5, #29
 80013d0:	00e4      	lsls	r4, r4, #3
 80013d2:	431c      	orrs	r4, r3
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	4323      	orrs	r3, r4
 80013da:	4698      	mov	r8, r3
 80013dc:	4bcf      	ldr	r3, [pc, #828]	; (800171c <__aeabi_ddiv+0x37c>)
 80013de:	00ed      	lsls	r5, r5, #3
 80013e0:	469b      	mov	fp, r3
 80013e2:	2300      	movs	r3, #0
 80013e4:	4699      	mov	r9, r3
 80013e6:	4483      	add	fp, r0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	033c      	lsls	r4, r7, #12
 80013ec:	007b      	lsls	r3, r7, #1
 80013ee:	4650      	mov	r0, sl
 80013f0:	0b24      	lsrs	r4, r4, #12
 80013f2:	0d5b      	lsrs	r3, r3, #21
 80013f4:	0fff      	lsrs	r7, r7, #31
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d100      	bne.n	80013fc <__aeabi_ddiv+0x5c>
 80013fa:	e11f      	b.n	800163c <__aeabi_ddiv+0x29c>
 80013fc:	4ac6      	ldr	r2, [pc, #792]	; (8001718 <__aeabi_ddiv+0x378>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x64>
 8001402:	e162      	b.n	80016ca <__aeabi_ddiv+0x32a>
 8001404:	49c5      	ldr	r1, [pc, #788]	; (800171c <__aeabi_ddiv+0x37c>)
 8001406:	0f42      	lsrs	r2, r0, #29
 8001408:	468c      	mov	ip, r1
 800140a:	00e4      	lsls	r4, r4, #3
 800140c:	4659      	mov	r1, fp
 800140e:	4314      	orrs	r4, r2
 8001410:	2280      	movs	r2, #128	; 0x80
 8001412:	4463      	add	r3, ip
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	4314      	orrs	r4, r2
 800141a:	469b      	mov	fp, r3
 800141c:	00c2      	lsls	r2, r0, #3
 800141e:	2000      	movs	r0, #0
 8001420:	0033      	movs	r3, r6
 8001422:	407b      	eors	r3, r7
 8001424:	469a      	mov	sl, r3
 8001426:	464b      	mov	r3, r9
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d827      	bhi.n	800147c <__aeabi_ddiv+0xdc>
 800142c:	49bc      	ldr	r1, [pc, #752]	; (8001720 <__aeabi_ddiv+0x380>)
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	58cb      	ldr	r3, [r1, r3]
 8001432:	469f      	mov	pc, r3
 8001434:	46b2      	mov	sl, r6
 8001436:	9b00      	ldr	r3, [sp, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d016      	beq.n	800146a <__aeabi_ddiv+0xca>
 800143c:	2b03      	cmp	r3, #3
 800143e:	d100      	bne.n	8001442 <__aeabi_ddiv+0xa2>
 8001440:	e28e      	b.n	8001960 <__aeabi_ddiv+0x5c0>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d000      	beq.n	8001448 <__aeabi_ddiv+0xa8>
 8001446:	e0d9      	b.n	80015fc <__aeabi_ddiv+0x25c>
 8001448:	2300      	movs	r3, #0
 800144a:	2400      	movs	r4, #0
 800144c:	2500      	movs	r5, #0
 800144e:	4652      	mov	r2, sl
 8001450:	051b      	lsls	r3, r3, #20
 8001452:	4323      	orrs	r3, r4
 8001454:	07d2      	lsls	r2, r2, #31
 8001456:	4313      	orrs	r3, r2
 8001458:	0028      	movs	r0, r5
 800145a:	0019      	movs	r1, r3
 800145c:	b005      	add	sp, #20
 800145e:	bcf0      	pop	{r4, r5, r6, r7}
 8001460:	46bb      	mov	fp, r7
 8001462:	46b2      	mov	sl, r6
 8001464:	46a9      	mov	r9, r5
 8001466:	46a0      	mov	r8, r4
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	2400      	movs	r4, #0
 800146c:	2500      	movs	r5, #0
 800146e:	4baa      	ldr	r3, [pc, #680]	; (8001718 <__aeabi_ddiv+0x378>)
 8001470:	e7ed      	b.n	800144e <__aeabi_ddiv+0xae>
 8001472:	46ba      	mov	sl, r7
 8001474:	46a0      	mov	r8, r4
 8001476:	0015      	movs	r5, r2
 8001478:	9000      	str	r0, [sp, #0]
 800147a:	e7dc      	b.n	8001436 <__aeabi_ddiv+0x96>
 800147c:	4544      	cmp	r4, r8
 800147e:	d200      	bcs.n	8001482 <__aeabi_ddiv+0xe2>
 8001480:	e1c7      	b.n	8001812 <__aeabi_ddiv+0x472>
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0xe6>
 8001484:	e1c2      	b.n	800180c <__aeabi_ddiv+0x46c>
 8001486:	2301      	movs	r3, #1
 8001488:	425b      	negs	r3, r3
 800148a:	469c      	mov	ip, r3
 800148c:	002e      	movs	r6, r5
 800148e:	4640      	mov	r0, r8
 8001490:	2500      	movs	r5, #0
 8001492:	44e3      	add	fp, ip
 8001494:	0223      	lsls	r3, r4, #8
 8001496:	0e14      	lsrs	r4, r2, #24
 8001498:	431c      	orrs	r4, r3
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	4699      	mov	r9, r3
 800149e:	0423      	lsls	r3, r4, #16
 80014a0:	0c1f      	lsrs	r7, r3, #16
 80014a2:	0212      	lsls	r2, r2, #8
 80014a4:	4649      	mov	r1, r9
 80014a6:	9200      	str	r2, [sp, #0]
 80014a8:	9701      	str	r7, [sp, #4]
 80014aa:	f7fe fecf 	bl	800024c <__aeabi_uidivmod>
 80014ae:	0002      	movs	r2, r0
 80014b0:	437a      	muls	r2, r7
 80014b2:	040b      	lsls	r3, r1, #16
 80014b4:	0c31      	lsrs	r1, r6, #16
 80014b6:	4680      	mov	r8, r0
 80014b8:	4319      	orrs	r1, r3
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d907      	bls.n	80014ce <__aeabi_ddiv+0x12e>
 80014be:	2301      	movs	r3, #1
 80014c0:	425b      	negs	r3, r3
 80014c2:	469c      	mov	ip, r3
 80014c4:	1909      	adds	r1, r1, r4
 80014c6:	44e0      	add	r8, ip
 80014c8:	428c      	cmp	r4, r1
 80014ca:	d800      	bhi.n	80014ce <__aeabi_ddiv+0x12e>
 80014cc:	e207      	b.n	80018de <__aeabi_ddiv+0x53e>
 80014ce:	1a88      	subs	r0, r1, r2
 80014d0:	4649      	mov	r1, r9
 80014d2:	f7fe febb 	bl	800024c <__aeabi_uidivmod>
 80014d6:	0409      	lsls	r1, r1, #16
 80014d8:	468c      	mov	ip, r1
 80014da:	0431      	lsls	r1, r6, #16
 80014dc:	4666      	mov	r6, ip
 80014de:	9a01      	ldr	r2, [sp, #4]
 80014e0:	0c09      	lsrs	r1, r1, #16
 80014e2:	4342      	muls	r2, r0
 80014e4:	0003      	movs	r3, r0
 80014e6:	4331      	orrs	r1, r6
 80014e8:	428a      	cmp	r2, r1
 80014ea:	d904      	bls.n	80014f6 <__aeabi_ddiv+0x156>
 80014ec:	1909      	adds	r1, r1, r4
 80014ee:	3b01      	subs	r3, #1
 80014f0:	428c      	cmp	r4, r1
 80014f2:	d800      	bhi.n	80014f6 <__aeabi_ddiv+0x156>
 80014f4:	e1ed      	b.n	80018d2 <__aeabi_ddiv+0x532>
 80014f6:	1a88      	subs	r0, r1, r2
 80014f8:	4642      	mov	r2, r8
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	4690      	mov	r8, r2
 8001500:	4641      	mov	r1, r8
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	040e      	lsls	r6, r1, #16
 8001506:	0c1b      	lsrs	r3, r3, #16
 8001508:	001f      	movs	r7, r3
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	9b00      	ldr	r3, [sp, #0]
 800150e:	0c36      	lsrs	r6, r6, #16
 8001510:	041b      	lsls	r3, r3, #16
 8001512:	0c19      	lsrs	r1, r3, #16
 8001514:	000b      	movs	r3, r1
 8001516:	4373      	muls	r3, r6
 8001518:	0c12      	lsrs	r2, r2, #16
 800151a:	437e      	muls	r6, r7
 800151c:	9103      	str	r1, [sp, #12]
 800151e:	4351      	muls	r1, r2
 8001520:	437a      	muls	r2, r7
 8001522:	0c1f      	lsrs	r7, r3, #16
 8001524:	46bc      	mov	ip, r7
 8001526:	1876      	adds	r6, r6, r1
 8001528:	4466      	add	r6, ip
 800152a:	42b1      	cmp	r1, r6
 800152c:	d903      	bls.n	8001536 <__aeabi_ddiv+0x196>
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	0249      	lsls	r1, r1, #9
 8001532:	468c      	mov	ip, r1
 8001534:	4462      	add	r2, ip
 8001536:	0c31      	lsrs	r1, r6, #16
 8001538:	188a      	adds	r2, r1, r2
 800153a:	0431      	lsls	r1, r6, #16
 800153c:	041e      	lsls	r6, r3, #16
 800153e:	0c36      	lsrs	r6, r6, #16
 8001540:	198e      	adds	r6, r1, r6
 8001542:	4290      	cmp	r0, r2
 8001544:	d302      	bcc.n	800154c <__aeabi_ddiv+0x1ac>
 8001546:	d112      	bne.n	800156e <__aeabi_ddiv+0x1ce>
 8001548:	42b5      	cmp	r5, r6
 800154a:	d210      	bcs.n	800156e <__aeabi_ddiv+0x1ce>
 800154c:	4643      	mov	r3, r8
 800154e:	1e59      	subs	r1, r3, #1
 8001550:	9b00      	ldr	r3, [sp, #0]
 8001552:	469c      	mov	ip, r3
 8001554:	4465      	add	r5, ip
 8001556:	001f      	movs	r7, r3
 8001558:	429d      	cmp	r5, r3
 800155a:	419b      	sbcs	r3, r3
 800155c:	425b      	negs	r3, r3
 800155e:	191b      	adds	r3, r3, r4
 8001560:	18c0      	adds	r0, r0, r3
 8001562:	4284      	cmp	r4, r0
 8001564:	d200      	bcs.n	8001568 <__aeabi_ddiv+0x1c8>
 8001566:	e1a0      	b.n	80018aa <__aeabi_ddiv+0x50a>
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x1cc>
 800156a:	e19b      	b.n	80018a4 <__aeabi_ddiv+0x504>
 800156c:	4688      	mov	r8, r1
 800156e:	1bae      	subs	r6, r5, r6
 8001570:	42b5      	cmp	r5, r6
 8001572:	41ad      	sbcs	r5, r5
 8001574:	1a80      	subs	r0, r0, r2
 8001576:	426d      	negs	r5, r5
 8001578:	1b40      	subs	r0, r0, r5
 800157a:	4284      	cmp	r4, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x1e0>
 800157e:	e1d5      	b.n	800192c <__aeabi_ddiv+0x58c>
 8001580:	4649      	mov	r1, r9
 8001582:	f7fe fe63 	bl	800024c <__aeabi_uidivmod>
 8001586:	9a01      	ldr	r2, [sp, #4]
 8001588:	040b      	lsls	r3, r1, #16
 800158a:	4342      	muls	r2, r0
 800158c:	0c31      	lsrs	r1, r6, #16
 800158e:	0005      	movs	r5, r0
 8001590:	4319      	orrs	r1, r3
 8001592:	428a      	cmp	r2, r1
 8001594:	d900      	bls.n	8001598 <__aeabi_ddiv+0x1f8>
 8001596:	e16c      	b.n	8001872 <__aeabi_ddiv+0x4d2>
 8001598:	1a88      	subs	r0, r1, r2
 800159a:	4649      	mov	r1, r9
 800159c:	f7fe fe56 	bl	800024c <__aeabi_uidivmod>
 80015a0:	9a01      	ldr	r2, [sp, #4]
 80015a2:	0436      	lsls	r6, r6, #16
 80015a4:	4342      	muls	r2, r0
 80015a6:	0409      	lsls	r1, r1, #16
 80015a8:	0c36      	lsrs	r6, r6, #16
 80015aa:	0003      	movs	r3, r0
 80015ac:	430e      	orrs	r6, r1
 80015ae:	42b2      	cmp	r2, r6
 80015b0:	d900      	bls.n	80015b4 <__aeabi_ddiv+0x214>
 80015b2:	e153      	b.n	800185c <__aeabi_ddiv+0x4bc>
 80015b4:	9803      	ldr	r0, [sp, #12]
 80015b6:	1ab6      	subs	r6, r6, r2
 80015b8:	0002      	movs	r2, r0
 80015ba:	042d      	lsls	r5, r5, #16
 80015bc:	431d      	orrs	r5, r3
 80015be:	9f02      	ldr	r7, [sp, #8]
 80015c0:	042b      	lsls	r3, r5, #16
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	435a      	muls	r2, r3
 80015c6:	437b      	muls	r3, r7
 80015c8:	469c      	mov	ip, r3
 80015ca:	0c29      	lsrs	r1, r5, #16
 80015cc:	4348      	muls	r0, r1
 80015ce:	0c13      	lsrs	r3, r2, #16
 80015d0:	4484      	add	ip, r0
 80015d2:	4463      	add	r3, ip
 80015d4:	4379      	muls	r1, r7
 80015d6:	4298      	cmp	r0, r3
 80015d8:	d903      	bls.n	80015e2 <__aeabi_ddiv+0x242>
 80015da:	2080      	movs	r0, #128	; 0x80
 80015dc:	0240      	lsls	r0, r0, #9
 80015de:	4684      	mov	ip, r0
 80015e0:	4461      	add	r1, ip
 80015e2:	0c18      	lsrs	r0, r3, #16
 80015e4:	0412      	lsls	r2, r2, #16
 80015e6:	041b      	lsls	r3, r3, #16
 80015e8:	0c12      	lsrs	r2, r2, #16
 80015ea:	1841      	adds	r1, r0, r1
 80015ec:	189b      	adds	r3, r3, r2
 80015ee:	428e      	cmp	r6, r1
 80015f0:	d200      	bcs.n	80015f4 <__aeabi_ddiv+0x254>
 80015f2:	e0ff      	b.n	80017f4 <__aeabi_ddiv+0x454>
 80015f4:	d100      	bne.n	80015f8 <__aeabi_ddiv+0x258>
 80015f6:	e0fa      	b.n	80017ee <__aeabi_ddiv+0x44e>
 80015f8:	2301      	movs	r3, #1
 80015fa:	431d      	orrs	r5, r3
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <__aeabi_ddiv+0x384>)
 80015fe:	445a      	add	r2, fp
 8001600:	2a00      	cmp	r2, #0
 8001602:	dc00      	bgt.n	8001606 <__aeabi_ddiv+0x266>
 8001604:	e0aa      	b.n	800175c <__aeabi_ddiv+0x3bc>
 8001606:	076b      	lsls	r3, r5, #29
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0x26c>
 800160a:	e13d      	b.n	8001888 <__aeabi_ddiv+0x4e8>
 800160c:	08ed      	lsrs	r5, r5, #3
 800160e:	4643      	mov	r3, r8
 8001610:	01db      	lsls	r3, r3, #7
 8001612:	d506      	bpl.n	8001622 <__aeabi_ddiv+0x282>
 8001614:	4642      	mov	r2, r8
 8001616:	4b44      	ldr	r3, [pc, #272]	; (8001728 <__aeabi_ddiv+0x388>)
 8001618:	401a      	ands	r2, r3
 800161a:	4690      	mov	r8, r2
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	00d2      	lsls	r2, r2, #3
 8001620:	445a      	add	r2, fp
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <__aeabi_ddiv+0x38c>)
 8001624:	429a      	cmp	r2, r3
 8001626:	dd00      	ble.n	800162a <__aeabi_ddiv+0x28a>
 8001628:	e71f      	b.n	800146a <__aeabi_ddiv+0xca>
 800162a:	4643      	mov	r3, r8
 800162c:	075b      	lsls	r3, r3, #29
 800162e:	431d      	orrs	r5, r3
 8001630:	4643      	mov	r3, r8
 8001632:	0552      	lsls	r2, r2, #21
 8001634:	025c      	lsls	r4, r3, #9
 8001636:	0b24      	lsrs	r4, r4, #12
 8001638:	0d53      	lsrs	r3, r2, #21
 800163a:	e708      	b.n	800144e <__aeabi_ddiv+0xae>
 800163c:	4652      	mov	r2, sl
 800163e:	4322      	orrs	r2, r4
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x2a4>
 8001642:	e07b      	b.n	800173c <__aeabi_ddiv+0x39c>
 8001644:	2c00      	cmp	r4, #0
 8001646:	d100      	bne.n	800164a <__aeabi_ddiv+0x2aa>
 8001648:	e0fa      	b.n	8001840 <__aeabi_ddiv+0x4a0>
 800164a:	0020      	movs	r0, r4
 800164c:	f001 fa22 	bl	8002a94 <__clzsi2>
 8001650:	0002      	movs	r2, r0
 8001652:	3a0b      	subs	r2, #11
 8001654:	231d      	movs	r3, #29
 8001656:	0001      	movs	r1, r0
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	4652      	mov	r2, sl
 800165c:	3908      	subs	r1, #8
 800165e:	40da      	lsrs	r2, r3
 8001660:	408c      	lsls	r4, r1
 8001662:	4314      	orrs	r4, r2
 8001664:	4652      	mov	r2, sl
 8001666:	408a      	lsls	r2, r1
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <__aeabi_ddiv+0x390>)
 800166a:	4458      	add	r0, fp
 800166c:	469b      	mov	fp, r3
 800166e:	4483      	add	fp, r0
 8001670:	2000      	movs	r0, #0
 8001672:	e6d5      	b.n	8001420 <__aeabi_ddiv+0x80>
 8001674:	464b      	mov	r3, r9
 8001676:	4323      	orrs	r3, r4
 8001678:	4698      	mov	r8, r3
 800167a:	d044      	beq.n	8001706 <__aeabi_ddiv+0x366>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x2e2>
 8001680:	e0ce      	b.n	8001820 <__aeabi_ddiv+0x480>
 8001682:	0020      	movs	r0, r4
 8001684:	f001 fa06 	bl	8002a94 <__clzsi2>
 8001688:	0001      	movs	r1, r0
 800168a:	0002      	movs	r2, r0
 800168c:	390b      	subs	r1, #11
 800168e:	231d      	movs	r3, #29
 8001690:	1a5b      	subs	r3, r3, r1
 8001692:	4649      	mov	r1, r9
 8001694:	0010      	movs	r0, r2
 8001696:	40d9      	lsrs	r1, r3
 8001698:	3808      	subs	r0, #8
 800169a:	4084      	lsls	r4, r0
 800169c:	000b      	movs	r3, r1
 800169e:	464d      	mov	r5, r9
 80016a0:	4323      	orrs	r3, r4
 80016a2:	4698      	mov	r8, r3
 80016a4:	4085      	lsls	r5, r0
 80016a6:	4823      	ldr	r0, [pc, #140]	; (8001734 <__aeabi_ddiv+0x394>)
 80016a8:	1a83      	subs	r3, r0, r2
 80016aa:	469b      	mov	fp, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	4699      	mov	r9, r3
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	e69a      	b.n	80013ea <__aeabi_ddiv+0x4a>
 80016b4:	464b      	mov	r3, r9
 80016b6:	4323      	orrs	r3, r4
 80016b8:	4698      	mov	r8, r3
 80016ba:	d11d      	bne.n	80016f8 <__aeabi_ddiv+0x358>
 80016bc:	2308      	movs	r3, #8
 80016be:	4699      	mov	r9, r3
 80016c0:	3b06      	subs	r3, #6
 80016c2:	2500      	movs	r5, #0
 80016c4:	4683      	mov	fp, r0
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	e68f      	b.n	80013ea <__aeabi_ddiv+0x4a>
 80016ca:	4652      	mov	r2, sl
 80016cc:	4322      	orrs	r2, r4
 80016ce:	d109      	bne.n	80016e4 <__aeabi_ddiv+0x344>
 80016d0:	2302      	movs	r3, #2
 80016d2:	4649      	mov	r1, r9
 80016d4:	4319      	orrs	r1, r3
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <__aeabi_ddiv+0x398>)
 80016d8:	4689      	mov	r9, r1
 80016da:	469c      	mov	ip, r3
 80016dc:	2400      	movs	r4, #0
 80016de:	2002      	movs	r0, #2
 80016e0:	44e3      	add	fp, ip
 80016e2:	e69d      	b.n	8001420 <__aeabi_ddiv+0x80>
 80016e4:	2303      	movs	r3, #3
 80016e6:	464a      	mov	r2, r9
 80016e8:	431a      	orrs	r2, r3
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <__aeabi_ddiv+0x398>)
 80016ec:	4691      	mov	r9, r2
 80016ee:	469c      	mov	ip, r3
 80016f0:	4652      	mov	r2, sl
 80016f2:	2003      	movs	r0, #3
 80016f4:	44e3      	add	fp, ip
 80016f6:	e693      	b.n	8001420 <__aeabi_ddiv+0x80>
 80016f8:	230c      	movs	r3, #12
 80016fa:	4699      	mov	r9, r3
 80016fc:	3b09      	subs	r3, #9
 80016fe:	46a0      	mov	r8, r4
 8001700:	4683      	mov	fp, r0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	e671      	b.n	80013ea <__aeabi_ddiv+0x4a>
 8001706:	2304      	movs	r3, #4
 8001708:	4699      	mov	r9, r3
 800170a:	2300      	movs	r3, #0
 800170c:	469b      	mov	fp, r3
 800170e:	3301      	adds	r3, #1
 8001710:	2500      	movs	r5, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	e669      	b.n	80013ea <__aeabi_ddiv+0x4a>
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	000007ff 	.word	0x000007ff
 800171c:	fffffc01 	.word	0xfffffc01
 8001720:	0800e5ac 	.word	0x0800e5ac
 8001724:	000003ff 	.word	0x000003ff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	000007fe 	.word	0x000007fe
 8001730:	000003f3 	.word	0x000003f3
 8001734:	fffffc0d 	.word	0xfffffc0d
 8001738:	fffff801 	.word	0xfffff801
 800173c:	4649      	mov	r1, r9
 800173e:	2301      	movs	r3, #1
 8001740:	4319      	orrs	r1, r3
 8001742:	4689      	mov	r9, r1
 8001744:	2400      	movs	r4, #0
 8001746:	2001      	movs	r0, #1
 8001748:	e66a      	b.n	8001420 <__aeabi_ddiv+0x80>
 800174a:	2300      	movs	r3, #0
 800174c:	2480      	movs	r4, #128	; 0x80
 800174e:	469a      	mov	sl, r3
 8001750:	2500      	movs	r5, #0
 8001752:	4b8a      	ldr	r3, [pc, #552]	; (800197c <__aeabi_ddiv+0x5dc>)
 8001754:	0324      	lsls	r4, r4, #12
 8001756:	e67a      	b.n	800144e <__aeabi_ddiv+0xae>
 8001758:	2501      	movs	r5, #1
 800175a:	426d      	negs	r5, r5
 800175c:	2301      	movs	r3, #1
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	2b38      	cmp	r3, #56	; 0x38
 8001762:	dd00      	ble.n	8001766 <__aeabi_ddiv+0x3c6>
 8001764:	e670      	b.n	8001448 <__aeabi_ddiv+0xa8>
 8001766:	2b1f      	cmp	r3, #31
 8001768:	dc00      	bgt.n	800176c <__aeabi_ddiv+0x3cc>
 800176a:	e0bf      	b.n	80018ec <__aeabi_ddiv+0x54c>
 800176c:	211f      	movs	r1, #31
 800176e:	4249      	negs	r1, r1
 8001770:	1a8a      	subs	r2, r1, r2
 8001772:	4641      	mov	r1, r8
 8001774:	40d1      	lsrs	r1, r2
 8001776:	000a      	movs	r2, r1
 8001778:	2b20      	cmp	r3, #32
 800177a:	d004      	beq.n	8001786 <__aeabi_ddiv+0x3e6>
 800177c:	4641      	mov	r1, r8
 800177e:	4b80      	ldr	r3, [pc, #512]	; (8001980 <__aeabi_ddiv+0x5e0>)
 8001780:	445b      	add	r3, fp
 8001782:	4099      	lsls	r1, r3
 8001784:	430d      	orrs	r5, r1
 8001786:	1e6b      	subs	r3, r5, #1
 8001788:	419d      	sbcs	r5, r3
 800178a:	2307      	movs	r3, #7
 800178c:	432a      	orrs	r2, r5
 800178e:	001d      	movs	r5, r3
 8001790:	2400      	movs	r4, #0
 8001792:	4015      	ands	r5, r2
 8001794:	4213      	tst	r3, r2
 8001796:	d100      	bne.n	800179a <__aeabi_ddiv+0x3fa>
 8001798:	e0d4      	b.n	8001944 <__aeabi_ddiv+0x5a4>
 800179a:	210f      	movs	r1, #15
 800179c:	2300      	movs	r3, #0
 800179e:	4011      	ands	r1, r2
 80017a0:	2904      	cmp	r1, #4
 80017a2:	d100      	bne.n	80017a6 <__aeabi_ddiv+0x406>
 80017a4:	e0cb      	b.n	800193e <__aeabi_ddiv+0x59e>
 80017a6:	1d11      	adds	r1, r2, #4
 80017a8:	4291      	cmp	r1, r2
 80017aa:	4192      	sbcs	r2, r2
 80017ac:	4252      	negs	r2, r2
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	000a      	movs	r2, r1
 80017b2:	0219      	lsls	r1, r3, #8
 80017b4:	d400      	bmi.n	80017b8 <__aeabi_ddiv+0x418>
 80017b6:	e0c2      	b.n	800193e <__aeabi_ddiv+0x59e>
 80017b8:	2301      	movs	r3, #1
 80017ba:	2400      	movs	r4, #0
 80017bc:	2500      	movs	r5, #0
 80017be:	e646      	b.n	800144e <__aeabi_ddiv+0xae>
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	4641      	mov	r1, r8
 80017c4:	031b      	lsls	r3, r3, #12
 80017c6:	4219      	tst	r1, r3
 80017c8:	d008      	beq.n	80017dc <__aeabi_ddiv+0x43c>
 80017ca:	421c      	tst	r4, r3
 80017cc:	d106      	bne.n	80017dc <__aeabi_ddiv+0x43c>
 80017ce:	431c      	orrs	r4, r3
 80017d0:	0324      	lsls	r4, r4, #12
 80017d2:	46ba      	mov	sl, r7
 80017d4:	0015      	movs	r5, r2
 80017d6:	4b69      	ldr	r3, [pc, #420]	; (800197c <__aeabi_ddiv+0x5dc>)
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	e638      	b.n	800144e <__aeabi_ddiv+0xae>
 80017dc:	2480      	movs	r4, #128	; 0x80
 80017de:	4643      	mov	r3, r8
 80017e0:	0324      	lsls	r4, r4, #12
 80017e2:	431c      	orrs	r4, r3
 80017e4:	0324      	lsls	r4, r4, #12
 80017e6:	46b2      	mov	sl, r6
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <__aeabi_ddiv+0x5dc>)
 80017ea:	0b24      	lsrs	r4, r4, #12
 80017ec:	e62f      	b.n	800144e <__aeabi_ddiv+0xae>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d100      	bne.n	80017f4 <__aeabi_ddiv+0x454>
 80017f2:	e703      	b.n	80015fc <__aeabi_ddiv+0x25c>
 80017f4:	19a6      	adds	r6, r4, r6
 80017f6:	1e68      	subs	r0, r5, #1
 80017f8:	42a6      	cmp	r6, r4
 80017fa:	d200      	bcs.n	80017fe <__aeabi_ddiv+0x45e>
 80017fc:	e08d      	b.n	800191a <__aeabi_ddiv+0x57a>
 80017fe:	428e      	cmp	r6, r1
 8001800:	d200      	bcs.n	8001804 <__aeabi_ddiv+0x464>
 8001802:	e0a3      	b.n	800194c <__aeabi_ddiv+0x5ac>
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x468>
 8001806:	e0b3      	b.n	8001970 <__aeabi_ddiv+0x5d0>
 8001808:	0005      	movs	r5, r0
 800180a:	e6f5      	b.n	80015f8 <__aeabi_ddiv+0x258>
 800180c:	42aa      	cmp	r2, r5
 800180e:	d900      	bls.n	8001812 <__aeabi_ddiv+0x472>
 8001810:	e639      	b.n	8001486 <__aeabi_ddiv+0xe6>
 8001812:	4643      	mov	r3, r8
 8001814:	07de      	lsls	r6, r3, #31
 8001816:	0858      	lsrs	r0, r3, #1
 8001818:	086b      	lsrs	r3, r5, #1
 800181a:	431e      	orrs	r6, r3
 800181c:	07ed      	lsls	r5, r5, #31
 800181e:	e639      	b.n	8001494 <__aeabi_ddiv+0xf4>
 8001820:	4648      	mov	r0, r9
 8001822:	f001 f937 	bl	8002a94 <__clzsi2>
 8001826:	0001      	movs	r1, r0
 8001828:	0002      	movs	r2, r0
 800182a:	3115      	adds	r1, #21
 800182c:	3220      	adds	r2, #32
 800182e:	291c      	cmp	r1, #28
 8001830:	dc00      	bgt.n	8001834 <__aeabi_ddiv+0x494>
 8001832:	e72c      	b.n	800168e <__aeabi_ddiv+0x2ee>
 8001834:	464b      	mov	r3, r9
 8001836:	3808      	subs	r0, #8
 8001838:	4083      	lsls	r3, r0
 800183a:	2500      	movs	r5, #0
 800183c:	4698      	mov	r8, r3
 800183e:	e732      	b.n	80016a6 <__aeabi_ddiv+0x306>
 8001840:	f001 f928 	bl	8002a94 <__clzsi2>
 8001844:	0003      	movs	r3, r0
 8001846:	001a      	movs	r2, r3
 8001848:	3215      	adds	r2, #21
 800184a:	3020      	adds	r0, #32
 800184c:	2a1c      	cmp	r2, #28
 800184e:	dc00      	bgt.n	8001852 <__aeabi_ddiv+0x4b2>
 8001850:	e700      	b.n	8001654 <__aeabi_ddiv+0x2b4>
 8001852:	4654      	mov	r4, sl
 8001854:	3b08      	subs	r3, #8
 8001856:	2200      	movs	r2, #0
 8001858:	409c      	lsls	r4, r3
 800185a:	e705      	b.n	8001668 <__aeabi_ddiv+0x2c8>
 800185c:	1936      	adds	r6, r6, r4
 800185e:	3b01      	subs	r3, #1
 8001860:	42b4      	cmp	r4, r6
 8001862:	d900      	bls.n	8001866 <__aeabi_ddiv+0x4c6>
 8001864:	e6a6      	b.n	80015b4 <__aeabi_ddiv+0x214>
 8001866:	42b2      	cmp	r2, r6
 8001868:	d800      	bhi.n	800186c <__aeabi_ddiv+0x4cc>
 800186a:	e6a3      	b.n	80015b4 <__aeabi_ddiv+0x214>
 800186c:	1e83      	subs	r3, r0, #2
 800186e:	1936      	adds	r6, r6, r4
 8001870:	e6a0      	b.n	80015b4 <__aeabi_ddiv+0x214>
 8001872:	1909      	adds	r1, r1, r4
 8001874:	3d01      	subs	r5, #1
 8001876:	428c      	cmp	r4, r1
 8001878:	d900      	bls.n	800187c <__aeabi_ddiv+0x4dc>
 800187a:	e68d      	b.n	8001598 <__aeabi_ddiv+0x1f8>
 800187c:	428a      	cmp	r2, r1
 800187e:	d800      	bhi.n	8001882 <__aeabi_ddiv+0x4e2>
 8001880:	e68a      	b.n	8001598 <__aeabi_ddiv+0x1f8>
 8001882:	1e85      	subs	r5, r0, #2
 8001884:	1909      	adds	r1, r1, r4
 8001886:	e687      	b.n	8001598 <__aeabi_ddiv+0x1f8>
 8001888:	230f      	movs	r3, #15
 800188a:	402b      	ands	r3, r5
 800188c:	2b04      	cmp	r3, #4
 800188e:	d100      	bne.n	8001892 <__aeabi_ddiv+0x4f2>
 8001890:	e6bc      	b.n	800160c <__aeabi_ddiv+0x26c>
 8001892:	2305      	movs	r3, #5
 8001894:	425b      	negs	r3, r3
 8001896:	42ab      	cmp	r3, r5
 8001898:	419b      	sbcs	r3, r3
 800189a:	3504      	adds	r5, #4
 800189c:	425b      	negs	r3, r3
 800189e:	08ed      	lsrs	r5, r5, #3
 80018a0:	4498      	add	r8, r3
 80018a2:	e6b4      	b.n	800160e <__aeabi_ddiv+0x26e>
 80018a4:	42af      	cmp	r7, r5
 80018a6:	d900      	bls.n	80018aa <__aeabi_ddiv+0x50a>
 80018a8:	e660      	b.n	800156c <__aeabi_ddiv+0x1cc>
 80018aa:	4282      	cmp	r2, r0
 80018ac:	d804      	bhi.n	80018b8 <__aeabi_ddiv+0x518>
 80018ae:	d000      	beq.n	80018b2 <__aeabi_ddiv+0x512>
 80018b0:	e65c      	b.n	800156c <__aeabi_ddiv+0x1cc>
 80018b2:	42ae      	cmp	r6, r5
 80018b4:	d800      	bhi.n	80018b8 <__aeabi_ddiv+0x518>
 80018b6:	e659      	b.n	800156c <__aeabi_ddiv+0x1cc>
 80018b8:	2302      	movs	r3, #2
 80018ba:	425b      	negs	r3, r3
 80018bc:	469c      	mov	ip, r3
 80018be:	9b00      	ldr	r3, [sp, #0]
 80018c0:	44e0      	add	r8, ip
 80018c2:	469c      	mov	ip, r3
 80018c4:	4465      	add	r5, ip
 80018c6:	429d      	cmp	r5, r3
 80018c8:	419b      	sbcs	r3, r3
 80018ca:	425b      	negs	r3, r3
 80018cc:	191b      	adds	r3, r3, r4
 80018ce:	18c0      	adds	r0, r0, r3
 80018d0:	e64d      	b.n	800156e <__aeabi_ddiv+0x1ce>
 80018d2:	428a      	cmp	r2, r1
 80018d4:	d800      	bhi.n	80018d8 <__aeabi_ddiv+0x538>
 80018d6:	e60e      	b.n	80014f6 <__aeabi_ddiv+0x156>
 80018d8:	1e83      	subs	r3, r0, #2
 80018da:	1909      	adds	r1, r1, r4
 80018dc:	e60b      	b.n	80014f6 <__aeabi_ddiv+0x156>
 80018de:	428a      	cmp	r2, r1
 80018e0:	d800      	bhi.n	80018e4 <__aeabi_ddiv+0x544>
 80018e2:	e5f4      	b.n	80014ce <__aeabi_ddiv+0x12e>
 80018e4:	1e83      	subs	r3, r0, #2
 80018e6:	4698      	mov	r8, r3
 80018e8:	1909      	adds	r1, r1, r4
 80018ea:	e5f0      	b.n	80014ce <__aeabi_ddiv+0x12e>
 80018ec:	4925      	ldr	r1, [pc, #148]	; (8001984 <__aeabi_ddiv+0x5e4>)
 80018ee:	0028      	movs	r0, r5
 80018f0:	4459      	add	r1, fp
 80018f2:	408d      	lsls	r5, r1
 80018f4:	4642      	mov	r2, r8
 80018f6:	408a      	lsls	r2, r1
 80018f8:	1e69      	subs	r1, r5, #1
 80018fa:	418d      	sbcs	r5, r1
 80018fc:	4641      	mov	r1, r8
 80018fe:	40d8      	lsrs	r0, r3
 8001900:	40d9      	lsrs	r1, r3
 8001902:	4302      	orrs	r2, r0
 8001904:	432a      	orrs	r2, r5
 8001906:	000b      	movs	r3, r1
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	d100      	bne.n	800190e <__aeabi_ddiv+0x56e>
 800190c:	e751      	b.n	80017b2 <__aeabi_ddiv+0x412>
 800190e:	210f      	movs	r1, #15
 8001910:	4011      	ands	r1, r2
 8001912:	2904      	cmp	r1, #4
 8001914:	d000      	beq.n	8001918 <__aeabi_ddiv+0x578>
 8001916:	e746      	b.n	80017a6 <__aeabi_ddiv+0x406>
 8001918:	e74b      	b.n	80017b2 <__aeabi_ddiv+0x412>
 800191a:	0005      	movs	r5, r0
 800191c:	428e      	cmp	r6, r1
 800191e:	d000      	beq.n	8001922 <__aeabi_ddiv+0x582>
 8001920:	e66a      	b.n	80015f8 <__aeabi_ddiv+0x258>
 8001922:	9a00      	ldr	r2, [sp, #0]
 8001924:	4293      	cmp	r3, r2
 8001926:	d000      	beq.n	800192a <__aeabi_ddiv+0x58a>
 8001928:	e666      	b.n	80015f8 <__aeabi_ddiv+0x258>
 800192a:	e667      	b.n	80015fc <__aeabi_ddiv+0x25c>
 800192c:	4a16      	ldr	r2, [pc, #88]	; (8001988 <__aeabi_ddiv+0x5e8>)
 800192e:	445a      	add	r2, fp
 8001930:	2a00      	cmp	r2, #0
 8001932:	dc00      	bgt.n	8001936 <__aeabi_ddiv+0x596>
 8001934:	e710      	b.n	8001758 <__aeabi_ddiv+0x3b8>
 8001936:	2301      	movs	r3, #1
 8001938:	2500      	movs	r5, #0
 800193a:	4498      	add	r8, r3
 800193c:	e667      	b.n	800160e <__aeabi_ddiv+0x26e>
 800193e:	075d      	lsls	r5, r3, #29
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	0b1c      	lsrs	r4, r3, #12
 8001944:	08d2      	lsrs	r2, r2, #3
 8001946:	2300      	movs	r3, #0
 8001948:	4315      	orrs	r5, r2
 800194a:	e580      	b.n	800144e <__aeabi_ddiv+0xae>
 800194c:	9800      	ldr	r0, [sp, #0]
 800194e:	3d02      	subs	r5, #2
 8001950:	0042      	lsls	r2, r0, #1
 8001952:	4282      	cmp	r2, r0
 8001954:	41bf      	sbcs	r7, r7
 8001956:	427f      	negs	r7, r7
 8001958:	193c      	adds	r4, r7, r4
 800195a:	1936      	adds	r6, r6, r4
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	e7dd      	b.n	800191c <__aeabi_ddiv+0x57c>
 8001960:	2480      	movs	r4, #128	; 0x80
 8001962:	4643      	mov	r3, r8
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	431c      	orrs	r4, r3
 8001968:	0324      	lsls	r4, r4, #12
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <__aeabi_ddiv+0x5dc>)
 800196c:	0b24      	lsrs	r4, r4, #12
 800196e:	e56e      	b.n	800144e <__aeabi_ddiv+0xae>
 8001970:	9a00      	ldr	r2, [sp, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3ea      	bcc.n	800194c <__aeabi_ddiv+0x5ac>
 8001976:	0005      	movs	r5, r0
 8001978:	e7d3      	b.n	8001922 <__aeabi_ddiv+0x582>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	000007ff 	.word	0x000007ff
 8001980:	0000043e 	.word	0x0000043e
 8001984:	0000041e 	.word	0x0000041e
 8001988:	000003ff 	.word	0x000003ff

0800198c <__eqdf2>:
 800198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800198e:	464e      	mov	r6, r9
 8001990:	4645      	mov	r5, r8
 8001992:	46de      	mov	lr, fp
 8001994:	4657      	mov	r7, sl
 8001996:	4690      	mov	r8, r2
 8001998:	b5e0      	push	{r5, r6, r7, lr}
 800199a:	0017      	movs	r7, r2
 800199c:	031a      	lsls	r2, r3, #12
 800199e:	0b12      	lsrs	r2, r2, #12
 80019a0:	0005      	movs	r5, r0
 80019a2:	4684      	mov	ip, r0
 80019a4:	4819      	ldr	r0, [pc, #100]	; (8001a0c <__eqdf2+0x80>)
 80019a6:	030e      	lsls	r6, r1, #12
 80019a8:	004c      	lsls	r4, r1, #1
 80019aa:	4691      	mov	r9, r2
 80019ac:	005a      	lsls	r2, r3, #1
 80019ae:	0fdb      	lsrs	r3, r3, #31
 80019b0:	469b      	mov	fp, r3
 80019b2:	0b36      	lsrs	r6, r6, #12
 80019b4:	0d64      	lsrs	r4, r4, #21
 80019b6:	0fc9      	lsrs	r1, r1, #31
 80019b8:	0d52      	lsrs	r2, r2, #21
 80019ba:	4284      	cmp	r4, r0
 80019bc:	d019      	beq.n	80019f2 <__eqdf2+0x66>
 80019be:	4282      	cmp	r2, r0
 80019c0:	d010      	beq.n	80019e4 <__eqdf2+0x58>
 80019c2:	2001      	movs	r0, #1
 80019c4:	4294      	cmp	r4, r2
 80019c6:	d10e      	bne.n	80019e6 <__eqdf2+0x5a>
 80019c8:	454e      	cmp	r6, r9
 80019ca:	d10c      	bne.n	80019e6 <__eqdf2+0x5a>
 80019cc:	2001      	movs	r0, #1
 80019ce:	45c4      	cmp	ip, r8
 80019d0:	d109      	bne.n	80019e6 <__eqdf2+0x5a>
 80019d2:	4559      	cmp	r1, fp
 80019d4:	d017      	beq.n	8001a06 <__eqdf2+0x7a>
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d105      	bne.n	80019e6 <__eqdf2+0x5a>
 80019da:	0030      	movs	r0, r6
 80019dc:	4328      	orrs	r0, r5
 80019de:	1e43      	subs	r3, r0, #1
 80019e0:	4198      	sbcs	r0, r3
 80019e2:	e000      	b.n	80019e6 <__eqdf2+0x5a>
 80019e4:	2001      	movs	r0, #1
 80019e6:	bcf0      	pop	{r4, r5, r6, r7}
 80019e8:	46bb      	mov	fp, r7
 80019ea:	46b2      	mov	sl, r6
 80019ec:	46a9      	mov	r9, r5
 80019ee:	46a0      	mov	r8, r4
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	0033      	movs	r3, r6
 80019f4:	2001      	movs	r0, #1
 80019f6:	432b      	orrs	r3, r5
 80019f8:	d1f5      	bne.n	80019e6 <__eqdf2+0x5a>
 80019fa:	42a2      	cmp	r2, r4
 80019fc:	d1f3      	bne.n	80019e6 <__eqdf2+0x5a>
 80019fe:	464b      	mov	r3, r9
 8001a00:	433b      	orrs	r3, r7
 8001a02:	d1f0      	bne.n	80019e6 <__eqdf2+0x5a>
 8001a04:	e7e2      	b.n	80019cc <__eqdf2+0x40>
 8001a06:	2000      	movs	r0, #0
 8001a08:	e7ed      	b.n	80019e6 <__eqdf2+0x5a>
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	000007ff 	.word	0x000007ff

08001a10 <__gedf2>:
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	4647      	mov	r7, r8
 8001a14:	46ce      	mov	lr, r9
 8001a16:	0004      	movs	r4, r0
 8001a18:	0018      	movs	r0, r3
 8001a1a:	0016      	movs	r6, r2
 8001a1c:	031b      	lsls	r3, r3, #12
 8001a1e:	0b1b      	lsrs	r3, r3, #12
 8001a20:	4d2d      	ldr	r5, [pc, #180]	; (8001ad8 <__gedf2+0xc8>)
 8001a22:	004a      	lsls	r2, r1, #1
 8001a24:	4699      	mov	r9, r3
 8001a26:	b580      	push	{r7, lr}
 8001a28:	0043      	lsls	r3, r0, #1
 8001a2a:	030f      	lsls	r7, r1, #12
 8001a2c:	46a4      	mov	ip, r4
 8001a2e:	46b0      	mov	r8, r6
 8001a30:	0b3f      	lsrs	r7, r7, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0fc9      	lsrs	r1, r1, #31
 8001a36:	0d5b      	lsrs	r3, r3, #21
 8001a38:	0fc0      	lsrs	r0, r0, #31
 8001a3a:	42aa      	cmp	r2, r5
 8001a3c:	d021      	beq.n	8001a82 <__gedf2+0x72>
 8001a3e:	42ab      	cmp	r3, r5
 8001a40:	d013      	beq.n	8001a6a <__gedf2+0x5a>
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d122      	bne.n	8001a8c <__gedf2+0x7c>
 8001a46:	433c      	orrs	r4, r7
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <__gedf2+0x42>
 8001a4c:	464d      	mov	r5, r9
 8001a4e:	432e      	orrs	r6, r5
 8001a50:	d022      	beq.n	8001a98 <__gedf2+0x88>
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	d010      	beq.n	8001a78 <__gedf2+0x68>
 8001a56:	4281      	cmp	r1, r0
 8001a58:	d022      	beq.n	8001aa0 <__gedf2+0x90>
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	3901      	subs	r1, #1
 8001a5e:	4008      	ands	r0, r1
 8001a60:	3801      	subs	r0, #1
 8001a62:	bcc0      	pop	{r6, r7}
 8001a64:	46b9      	mov	r9, r7
 8001a66:	46b0      	mov	r8, r6
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6a:	464d      	mov	r5, r9
 8001a6c:	432e      	orrs	r6, r5
 8001a6e:	d129      	bne.n	8001ac4 <__gedf2+0xb4>
 8001a70:	2a00      	cmp	r2, #0
 8001a72:	d1f0      	bne.n	8001a56 <__gedf2+0x46>
 8001a74:	433c      	orrs	r4, r7
 8001a76:	d1ee      	bne.n	8001a56 <__gedf2+0x46>
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d1f2      	bne.n	8001a62 <__gedf2+0x52>
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	4240      	negs	r0, r0
 8001a80:	e7ef      	b.n	8001a62 <__gedf2+0x52>
 8001a82:	003d      	movs	r5, r7
 8001a84:	4325      	orrs	r5, r4
 8001a86:	d11d      	bne.n	8001ac4 <__gedf2+0xb4>
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d0ee      	beq.n	8001a6a <__gedf2+0x5a>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1e2      	bne.n	8001a56 <__gedf2+0x46>
 8001a90:	464c      	mov	r4, r9
 8001a92:	4326      	orrs	r6, r4
 8001a94:	d1df      	bne.n	8001a56 <__gedf2+0x46>
 8001a96:	e7e0      	b.n	8001a5a <__gedf2+0x4a>
 8001a98:	2000      	movs	r0, #0
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d0e1      	beq.n	8001a62 <__gedf2+0x52>
 8001a9e:	e7dc      	b.n	8001a5a <__gedf2+0x4a>
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dc0a      	bgt.n	8001aba <__gedf2+0xaa>
 8001aa4:	dbe8      	blt.n	8001a78 <__gedf2+0x68>
 8001aa6:	454f      	cmp	r7, r9
 8001aa8:	d8d7      	bhi.n	8001a5a <__gedf2+0x4a>
 8001aaa:	d00e      	beq.n	8001aca <__gedf2+0xba>
 8001aac:	2000      	movs	r0, #0
 8001aae:	454f      	cmp	r7, r9
 8001ab0:	d2d7      	bcs.n	8001a62 <__gedf2+0x52>
 8001ab2:	2900      	cmp	r1, #0
 8001ab4:	d0e2      	beq.n	8001a7c <__gedf2+0x6c>
 8001ab6:	0008      	movs	r0, r1
 8001ab8:	e7d3      	b.n	8001a62 <__gedf2+0x52>
 8001aba:	4243      	negs	r3, r0
 8001abc:	4158      	adcs	r0, r3
 8001abe:	0040      	lsls	r0, r0, #1
 8001ac0:	3801      	subs	r0, #1
 8001ac2:	e7ce      	b.n	8001a62 <__gedf2+0x52>
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	4240      	negs	r0, r0
 8001ac8:	e7cb      	b.n	8001a62 <__gedf2+0x52>
 8001aca:	45c4      	cmp	ip, r8
 8001acc:	d8c5      	bhi.n	8001a5a <__gedf2+0x4a>
 8001ace:	2000      	movs	r0, #0
 8001ad0:	45c4      	cmp	ip, r8
 8001ad2:	d2c6      	bcs.n	8001a62 <__gedf2+0x52>
 8001ad4:	e7ed      	b.n	8001ab2 <__gedf2+0xa2>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff

08001adc <__ledf2>:
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ade:	4647      	mov	r7, r8
 8001ae0:	46ce      	mov	lr, r9
 8001ae2:	0004      	movs	r4, r0
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	0016      	movs	r6, r2
 8001ae8:	031b      	lsls	r3, r3, #12
 8001aea:	0b1b      	lsrs	r3, r3, #12
 8001aec:	4d2c      	ldr	r5, [pc, #176]	; (8001ba0 <__ledf2+0xc4>)
 8001aee:	004a      	lsls	r2, r1, #1
 8001af0:	4699      	mov	r9, r3
 8001af2:	b580      	push	{r7, lr}
 8001af4:	0043      	lsls	r3, r0, #1
 8001af6:	030f      	lsls	r7, r1, #12
 8001af8:	46a4      	mov	ip, r4
 8001afa:	46b0      	mov	r8, r6
 8001afc:	0b3f      	lsrs	r7, r7, #12
 8001afe:	0d52      	lsrs	r2, r2, #21
 8001b00:	0fc9      	lsrs	r1, r1, #31
 8001b02:	0d5b      	lsrs	r3, r3, #21
 8001b04:	0fc0      	lsrs	r0, r0, #31
 8001b06:	42aa      	cmp	r2, r5
 8001b08:	d00d      	beq.n	8001b26 <__ledf2+0x4a>
 8001b0a:	42ab      	cmp	r3, r5
 8001b0c:	d010      	beq.n	8001b30 <__ledf2+0x54>
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d127      	bne.n	8001b62 <__ledf2+0x86>
 8001b12:	433c      	orrs	r4, r7
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d111      	bne.n	8001b3c <__ledf2+0x60>
 8001b18:	464d      	mov	r5, r9
 8001b1a:	432e      	orrs	r6, r5
 8001b1c:	d10e      	bne.n	8001b3c <__ledf2+0x60>
 8001b1e:	2000      	movs	r0, #0
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d015      	beq.n	8001b50 <__ledf2+0x74>
 8001b24:	e00e      	b.n	8001b44 <__ledf2+0x68>
 8001b26:	003d      	movs	r5, r7
 8001b28:	4325      	orrs	r5, r4
 8001b2a:	d110      	bne.n	8001b4e <__ledf2+0x72>
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d118      	bne.n	8001b62 <__ledf2+0x86>
 8001b30:	464d      	mov	r5, r9
 8001b32:	432e      	orrs	r6, r5
 8001b34:	d10b      	bne.n	8001b4e <__ledf2+0x72>
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d102      	bne.n	8001b40 <__ledf2+0x64>
 8001b3a:	433c      	orrs	r4, r7
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	d00b      	beq.n	8001b58 <__ledf2+0x7c>
 8001b40:	4281      	cmp	r1, r0
 8001b42:	d014      	beq.n	8001b6e <__ledf2+0x92>
 8001b44:	2002      	movs	r0, #2
 8001b46:	3901      	subs	r1, #1
 8001b48:	4008      	ands	r0, r1
 8001b4a:	3801      	subs	r0, #1
 8001b4c:	e000      	b.n	8001b50 <__ledf2+0x74>
 8001b4e:	2002      	movs	r0, #2
 8001b50:	bcc0      	pop	{r6, r7}
 8001b52:	46b9      	mov	r9, r7
 8001b54:	46b0      	mov	r8, r6
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d1f9      	bne.n	8001b50 <__ledf2+0x74>
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	4240      	negs	r0, r0
 8001b60:	e7f6      	b.n	8001b50 <__ledf2+0x74>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ec      	bne.n	8001b40 <__ledf2+0x64>
 8001b66:	464c      	mov	r4, r9
 8001b68:	4326      	orrs	r6, r4
 8001b6a:	d1e9      	bne.n	8001b40 <__ledf2+0x64>
 8001b6c:	e7ea      	b.n	8001b44 <__ledf2+0x68>
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dd04      	ble.n	8001b7c <__ledf2+0xa0>
 8001b72:	4243      	negs	r3, r0
 8001b74:	4158      	adcs	r0, r3
 8001b76:	0040      	lsls	r0, r0, #1
 8001b78:	3801      	subs	r0, #1
 8001b7a:	e7e9      	b.n	8001b50 <__ledf2+0x74>
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbeb      	blt.n	8001b58 <__ledf2+0x7c>
 8001b80:	454f      	cmp	r7, r9
 8001b82:	d8df      	bhi.n	8001b44 <__ledf2+0x68>
 8001b84:	d006      	beq.n	8001b94 <__ledf2+0xb8>
 8001b86:	2000      	movs	r0, #0
 8001b88:	454f      	cmp	r7, r9
 8001b8a:	d2e1      	bcs.n	8001b50 <__ledf2+0x74>
 8001b8c:	2900      	cmp	r1, #0
 8001b8e:	d0e5      	beq.n	8001b5c <__ledf2+0x80>
 8001b90:	0008      	movs	r0, r1
 8001b92:	e7dd      	b.n	8001b50 <__ledf2+0x74>
 8001b94:	45c4      	cmp	ip, r8
 8001b96:	d8d5      	bhi.n	8001b44 <__ledf2+0x68>
 8001b98:	2000      	movs	r0, #0
 8001b9a:	45c4      	cmp	ip, r8
 8001b9c:	d2d8      	bcs.n	8001b50 <__ledf2+0x74>
 8001b9e:	e7f5      	b.n	8001b8c <__ledf2+0xb0>
 8001ba0:	000007ff 	.word	0x000007ff

08001ba4 <__aeabi_dmul>:
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	4657      	mov	r7, sl
 8001ba8:	464e      	mov	r6, r9
 8001baa:	4645      	mov	r5, r8
 8001bac:	46de      	mov	lr, fp
 8001bae:	b5e0      	push	{r5, r6, r7, lr}
 8001bb0:	4698      	mov	r8, r3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	004b      	lsls	r3, r1, #1
 8001bb6:	0006      	movs	r6, r0
 8001bb8:	4692      	mov	sl, r2
 8001bba:	b087      	sub	sp, #28
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	0d5b      	lsrs	r3, r3, #21
 8001bc0:	0fcf      	lsrs	r7, r1, #31
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dmul+0x24>
 8001bc6:	e15c      	b.n	8001e82 <__aeabi_dmul+0x2de>
 8001bc8:	4ad9      	ldr	r2, [pc, #868]	; (8001f30 <__aeabi_dmul+0x38c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dmul+0x2c>
 8001bce:	e175      	b.n	8001ebc <__aeabi_dmul+0x318>
 8001bd0:	0f42      	lsrs	r2, r0, #29
 8001bd2:	00e4      	lsls	r4, r4, #3
 8001bd4:	4314      	orrs	r4, r2
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	0412      	lsls	r2, r2, #16
 8001bda:	4314      	orrs	r4, r2
 8001bdc:	4ad5      	ldr	r2, [pc, #852]	; (8001f34 <__aeabi_dmul+0x390>)
 8001bde:	00c5      	lsls	r5, r0, #3
 8001be0:	4694      	mov	ip, r2
 8001be2:	4463      	add	r3, ip
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	4699      	mov	r9, r3
 8001bea:	469b      	mov	fp, r3
 8001bec:	4643      	mov	r3, r8
 8001bee:	4642      	mov	r2, r8
 8001bf0:	031e      	lsls	r6, r3, #12
 8001bf2:	0fd2      	lsrs	r2, r2, #31
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4650      	mov	r0, sl
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	0b36      	lsrs	r6, r6, #12
 8001bfc:	0d5b      	lsrs	r3, r3, #21
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0x5e>
 8001c00:	e120      	b.n	8001e44 <__aeabi_dmul+0x2a0>
 8001c02:	4acb      	ldr	r2, [pc, #812]	; (8001f30 <__aeabi_dmul+0x38c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dmul+0x66>
 8001c08:	e162      	b.n	8001ed0 <__aeabi_dmul+0x32c>
 8001c0a:	49ca      	ldr	r1, [pc, #808]	; (8001f34 <__aeabi_dmul+0x390>)
 8001c0c:	0f42      	lsrs	r2, r0, #29
 8001c0e:	468c      	mov	ip, r1
 8001c10:	9900      	ldr	r1, [sp, #0]
 8001c12:	4463      	add	r3, ip
 8001c14:	00f6      	lsls	r6, r6, #3
 8001c16:	468c      	mov	ip, r1
 8001c18:	4316      	orrs	r6, r2
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	449c      	add	ip, r3
 8001c1e:	0412      	lsls	r2, r2, #16
 8001c20:	4663      	mov	r3, ip
 8001c22:	4316      	orrs	r6, r2
 8001c24:	00c2      	lsls	r2, r0, #3
 8001c26:	2000      	movs	r0, #0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	9900      	ldr	r1, [sp, #0]
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	3101      	adds	r1, #1
 8001c30:	468c      	mov	ip, r1
 8001c32:	4649      	mov	r1, r9
 8001c34:	407b      	eors	r3, r7
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	290f      	cmp	r1, #15
 8001c3a:	d826      	bhi.n	8001c8a <__aeabi_dmul+0xe6>
 8001c3c:	4bbe      	ldr	r3, [pc, #760]	; (8001f38 <__aeabi_dmul+0x394>)
 8001c3e:	0089      	lsls	r1, r1, #2
 8001c40:	5859      	ldr	r1, [r3, r1]
 8001c42:	468f      	mov	pc, r1
 8001c44:	4643      	mov	r3, r8
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	0034      	movs	r4, r6
 8001c4a:	0015      	movs	r5, r2
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	465b      	mov	r3, fp
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d016      	beq.n	8001c82 <__aeabi_dmul+0xde>
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dmul+0xb6>
 8001c58:	e203      	b.n	8002062 <__aeabi_dmul+0x4be>
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dmul+0xbc>
 8001c5e:	e0cd      	b.n	8001dfc <__aeabi_dmul+0x258>
 8001c60:	2200      	movs	r2, #0
 8001c62:	2400      	movs	r4, #0
 8001c64:	2500      	movs	r5, #0
 8001c66:	9b01      	ldr	r3, [sp, #4]
 8001c68:	0512      	lsls	r2, r2, #20
 8001c6a:	4322      	orrs	r2, r4
 8001c6c:	07db      	lsls	r3, r3, #31
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	0028      	movs	r0, r5
 8001c72:	0011      	movs	r1, r2
 8001c74:	b007      	add	sp, #28
 8001c76:	bcf0      	pop	{r4, r5, r6, r7}
 8001c78:	46bb      	mov	fp, r7
 8001c7a:	46b2      	mov	sl, r6
 8001c7c:	46a9      	mov	r9, r5
 8001c7e:	46a0      	mov	r8, r4
 8001c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c82:	2400      	movs	r4, #0
 8001c84:	2500      	movs	r5, #0
 8001c86:	4aaa      	ldr	r2, [pc, #680]	; (8001f30 <__aeabi_dmul+0x38c>)
 8001c88:	e7ed      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001c8a:	0c28      	lsrs	r0, r5, #16
 8001c8c:	042d      	lsls	r5, r5, #16
 8001c8e:	0c2d      	lsrs	r5, r5, #16
 8001c90:	002b      	movs	r3, r5
 8001c92:	0c11      	lsrs	r1, r2, #16
 8001c94:	0412      	lsls	r2, r2, #16
 8001c96:	0c12      	lsrs	r2, r2, #16
 8001c98:	4353      	muls	r3, r2
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	0013      	movs	r3, r2
 8001c9e:	002f      	movs	r7, r5
 8001ca0:	4343      	muls	r3, r0
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	434f      	muls	r7, r1
 8001ca6:	444f      	add	r7, r9
 8001ca8:	46bb      	mov	fp, r7
 8001caa:	4647      	mov	r7, r8
 8001cac:	000b      	movs	r3, r1
 8001cae:	0c3f      	lsrs	r7, r7, #16
 8001cb0:	46ba      	mov	sl, r7
 8001cb2:	4343      	muls	r3, r0
 8001cb4:	44da      	add	sl, fp
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	45d1      	cmp	r9, sl
 8001cba:	d904      	bls.n	8001cc6 <__aeabi_dmul+0x122>
 8001cbc:	2780      	movs	r7, #128	; 0x80
 8001cbe:	027f      	lsls	r7, r7, #9
 8001cc0:	46b9      	mov	r9, r7
 8001cc2:	444b      	add	r3, r9
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	469b      	mov	fp, r3
 8001ccc:	4653      	mov	r3, sl
 8001cce:	041f      	lsls	r7, r3, #16
 8001cd0:	4643      	mov	r3, r8
 8001cd2:	041b      	lsls	r3, r3, #16
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	4698      	mov	r8, r3
 8001cd8:	003b      	movs	r3, r7
 8001cda:	4443      	add	r3, r8
 8001cdc:	9304      	str	r3, [sp, #16]
 8001cde:	0c33      	lsrs	r3, r6, #16
 8001ce0:	0436      	lsls	r6, r6, #16
 8001ce2:	0c36      	lsrs	r6, r6, #16
 8001ce4:	4698      	mov	r8, r3
 8001ce6:	0033      	movs	r3, r6
 8001ce8:	4343      	muls	r3, r0
 8001cea:	4699      	mov	r9, r3
 8001cec:	4643      	mov	r3, r8
 8001cee:	4343      	muls	r3, r0
 8001cf0:	002f      	movs	r7, r5
 8001cf2:	469a      	mov	sl, r3
 8001cf4:	4643      	mov	r3, r8
 8001cf6:	4377      	muls	r7, r6
 8001cf8:	435d      	muls	r5, r3
 8001cfa:	0c38      	lsrs	r0, r7, #16
 8001cfc:	444d      	add	r5, r9
 8001cfe:	1945      	adds	r5, r0, r5
 8001d00:	45a9      	cmp	r9, r5
 8001d02:	d903      	bls.n	8001d0c <__aeabi_dmul+0x168>
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	4699      	mov	r9, r3
 8001d0a:	44ca      	add	sl, r9
 8001d0c:	043f      	lsls	r7, r7, #16
 8001d0e:	0c28      	lsrs	r0, r5, #16
 8001d10:	0c3f      	lsrs	r7, r7, #16
 8001d12:	042d      	lsls	r5, r5, #16
 8001d14:	19ed      	adds	r5, r5, r7
 8001d16:	0c27      	lsrs	r7, r4, #16
 8001d18:	0424      	lsls	r4, r4, #16
 8001d1a:	0c24      	lsrs	r4, r4, #16
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	0020      	movs	r0, r4
 8001d20:	4350      	muls	r0, r2
 8001d22:	437a      	muls	r2, r7
 8001d24:	4691      	mov	r9, r2
 8001d26:	003a      	movs	r2, r7
 8001d28:	4453      	add	r3, sl
 8001d2a:	9305      	str	r3, [sp, #20]
 8001d2c:	0c03      	lsrs	r3, r0, #16
 8001d2e:	469a      	mov	sl, r3
 8001d30:	434a      	muls	r2, r1
 8001d32:	4361      	muls	r1, r4
 8001d34:	4449      	add	r1, r9
 8001d36:	4451      	add	r1, sl
 8001d38:	44ab      	add	fp, r5
 8001d3a:	4589      	cmp	r9, r1
 8001d3c:	d903      	bls.n	8001d46 <__aeabi_dmul+0x1a2>
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	4699      	mov	r9, r3
 8001d44:	444a      	add	r2, r9
 8001d46:	0400      	lsls	r0, r0, #16
 8001d48:	0c0b      	lsrs	r3, r1, #16
 8001d4a:	0c00      	lsrs	r0, r0, #16
 8001d4c:	0409      	lsls	r1, r1, #16
 8001d4e:	1809      	adds	r1, r1, r0
 8001d50:	0020      	movs	r0, r4
 8001d52:	4699      	mov	r9, r3
 8001d54:	4643      	mov	r3, r8
 8001d56:	4370      	muls	r0, r6
 8001d58:	435c      	muls	r4, r3
 8001d5a:	437e      	muls	r6, r7
 8001d5c:	435f      	muls	r7, r3
 8001d5e:	0c03      	lsrs	r3, r0, #16
 8001d60:	4698      	mov	r8, r3
 8001d62:	19a4      	adds	r4, r4, r6
 8001d64:	4444      	add	r4, r8
 8001d66:	444a      	add	r2, r9
 8001d68:	9703      	str	r7, [sp, #12]
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d904      	bls.n	8001d78 <__aeabi_dmul+0x1d4>
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	4698      	mov	r8, r3
 8001d74:	4447      	add	r7, r8
 8001d76:	9703      	str	r7, [sp, #12]
 8001d78:	0423      	lsls	r3, r4, #16
 8001d7a:	9e02      	ldr	r6, [sp, #8]
 8001d7c:	469a      	mov	sl, r3
 8001d7e:	9b05      	ldr	r3, [sp, #20]
 8001d80:	445e      	add	r6, fp
 8001d82:	4698      	mov	r8, r3
 8001d84:	42ae      	cmp	r6, r5
 8001d86:	41ad      	sbcs	r5, r5
 8001d88:	1876      	adds	r6, r6, r1
 8001d8a:	428e      	cmp	r6, r1
 8001d8c:	4189      	sbcs	r1, r1
 8001d8e:	0400      	lsls	r0, r0, #16
 8001d90:	0c00      	lsrs	r0, r0, #16
 8001d92:	4450      	add	r0, sl
 8001d94:	4440      	add	r0, r8
 8001d96:	426d      	negs	r5, r5
 8001d98:	1947      	adds	r7, r0, r5
 8001d9a:	46b8      	mov	r8, r7
 8001d9c:	4693      	mov	fp, r2
 8001d9e:	4249      	negs	r1, r1
 8001da0:	4689      	mov	r9, r1
 8001da2:	44c3      	add	fp, r8
 8001da4:	44d9      	add	r9, fp
 8001da6:	4298      	cmp	r0, r3
 8001da8:	4180      	sbcs	r0, r0
 8001daa:	45a8      	cmp	r8, r5
 8001dac:	41ad      	sbcs	r5, r5
 8001dae:	4593      	cmp	fp, r2
 8001db0:	4192      	sbcs	r2, r2
 8001db2:	4589      	cmp	r9, r1
 8001db4:	4189      	sbcs	r1, r1
 8001db6:	426d      	negs	r5, r5
 8001db8:	4240      	negs	r0, r0
 8001dba:	4328      	orrs	r0, r5
 8001dbc:	0c24      	lsrs	r4, r4, #16
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	4249      	negs	r1, r1
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	9b03      	ldr	r3, [sp, #12]
 8001dc6:	1900      	adds	r0, r0, r4
 8001dc8:	1880      	adds	r0, r0, r2
 8001dca:	18c7      	adds	r7, r0, r3
 8001dcc:	464b      	mov	r3, r9
 8001dce:	0ddc      	lsrs	r4, r3, #23
 8001dd0:	9b04      	ldr	r3, [sp, #16]
 8001dd2:	0275      	lsls	r5, r6, #9
 8001dd4:	431d      	orrs	r5, r3
 8001dd6:	1e6a      	subs	r2, r5, #1
 8001dd8:	4195      	sbcs	r5, r2
 8001dda:	464b      	mov	r3, r9
 8001ddc:	0df6      	lsrs	r6, r6, #23
 8001dde:	027f      	lsls	r7, r7, #9
 8001de0:	4335      	orrs	r5, r6
 8001de2:	025a      	lsls	r2, r3, #9
 8001de4:	433c      	orrs	r4, r7
 8001de6:	4315      	orrs	r5, r2
 8001de8:	01fb      	lsls	r3, r7, #7
 8001dea:	d400      	bmi.n	8001dee <__aeabi_dmul+0x24a>
 8001dec:	e11c      	b.n	8002028 <__aeabi_dmul+0x484>
 8001dee:	2101      	movs	r1, #1
 8001df0:	086a      	lsrs	r2, r5, #1
 8001df2:	400d      	ands	r5, r1
 8001df4:	4315      	orrs	r5, r2
 8001df6:	07e2      	lsls	r2, r4, #31
 8001df8:	4315      	orrs	r5, r2
 8001dfa:	0864      	lsrs	r4, r4, #1
 8001dfc:	494f      	ldr	r1, [pc, #316]	; (8001f3c <__aeabi_dmul+0x398>)
 8001dfe:	4461      	add	r1, ip
 8001e00:	2900      	cmp	r1, #0
 8001e02:	dc00      	bgt.n	8001e06 <__aeabi_dmul+0x262>
 8001e04:	e0b0      	b.n	8001f68 <__aeabi_dmul+0x3c4>
 8001e06:	076b      	lsls	r3, r5, #29
 8001e08:	d009      	beq.n	8001e1e <__aeabi_dmul+0x27a>
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	402a      	ands	r2, r5
 8001e0e:	2a04      	cmp	r2, #4
 8001e10:	d005      	beq.n	8001e1e <__aeabi_dmul+0x27a>
 8001e12:	1d2a      	adds	r2, r5, #4
 8001e14:	42aa      	cmp	r2, r5
 8001e16:	41ad      	sbcs	r5, r5
 8001e18:	426d      	negs	r5, r5
 8001e1a:	1964      	adds	r4, r4, r5
 8001e1c:	0015      	movs	r5, r2
 8001e1e:	01e3      	lsls	r3, r4, #7
 8001e20:	d504      	bpl.n	8001e2c <__aeabi_dmul+0x288>
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	4a46      	ldr	r2, [pc, #280]	; (8001f40 <__aeabi_dmul+0x39c>)
 8001e26:	00c9      	lsls	r1, r1, #3
 8001e28:	4014      	ands	r4, r2
 8001e2a:	4461      	add	r1, ip
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <__aeabi_dmul+0x3a0>)
 8001e2e:	4291      	cmp	r1, r2
 8001e30:	dd00      	ble.n	8001e34 <__aeabi_dmul+0x290>
 8001e32:	e726      	b.n	8001c82 <__aeabi_dmul+0xde>
 8001e34:	0762      	lsls	r2, r4, #29
 8001e36:	08ed      	lsrs	r5, r5, #3
 8001e38:	0264      	lsls	r4, r4, #9
 8001e3a:	0549      	lsls	r1, r1, #21
 8001e3c:	4315      	orrs	r5, r2
 8001e3e:	0b24      	lsrs	r4, r4, #12
 8001e40:	0d4a      	lsrs	r2, r1, #21
 8001e42:	e710      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001e44:	4652      	mov	r2, sl
 8001e46:	4332      	orrs	r2, r6
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dmul+0x2a8>
 8001e4a:	e07f      	b.n	8001f4c <__aeabi_dmul+0x3a8>
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dmul+0x2ae>
 8001e50:	e0dc      	b.n	800200c <__aeabi_dmul+0x468>
 8001e52:	0030      	movs	r0, r6
 8001e54:	f000 fe1e 	bl	8002a94 <__clzsi2>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	3a0b      	subs	r2, #11
 8001e5c:	231d      	movs	r3, #29
 8001e5e:	0001      	movs	r1, r0
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	4652      	mov	r2, sl
 8001e64:	3908      	subs	r1, #8
 8001e66:	40da      	lsrs	r2, r3
 8001e68:	408e      	lsls	r6, r1
 8001e6a:	4316      	orrs	r6, r2
 8001e6c:	4652      	mov	r2, sl
 8001e6e:	408a      	lsls	r2, r1
 8001e70:	9b00      	ldr	r3, [sp, #0]
 8001e72:	4935      	ldr	r1, [pc, #212]	; (8001f48 <__aeabi_dmul+0x3a4>)
 8001e74:	1a18      	subs	r0, r3, r0
 8001e76:	0003      	movs	r3, r0
 8001e78:	468c      	mov	ip, r1
 8001e7a:	4463      	add	r3, ip
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	e6d3      	b.n	8001c2a <__aeabi_dmul+0x86>
 8001e82:	0025      	movs	r5, r4
 8001e84:	4305      	orrs	r5, r0
 8001e86:	d04a      	beq.n	8001f1e <__aeabi_dmul+0x37a>
 8001e88:	2c00      	cmp	r4, #0
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dmul+0x2ea>
 8001e8c:	e0b0      	b.n	8001ff0 <__aeabi_dmul+0x44c>
 8001e8e:	0020      	movs	r0, r4
 8001e90:	f000 fe00 	bl	8002a94 <__clzsi2>
 8001e94:	0001      	movs	r1, r0
 8001e96:	0002      	movs	r2, r0
 8001e98:	390b      	subs	r1, #11
 8001e9a:	231d      	movs	r3, #29
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	1a5b      	subs	r3, r3, r1
 8001ea0:	0031      	movs	r1, r6
 8001ea2:	0035      	movs	r5, r6
 8001ea4:	3808      	subs	r0, #8
 8001ea6:	4084      	lsls	r4, r0
 8001ea8:	40d9      	lsrs	r1, r3
 8001eaa:	4085      	lsls	r5, r0
 8001eac:	430c      	orrs	r4, r1
 8001eae:	4826      	ldr	r0, [pc, #152]	; (8001f48 <__aeabi_dmul+0x3a4>)
 8001eb0:	1a83      	subs	r3, r0, r2
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	469b      	mov	fp, r3
 8001eba:	e697      	b.n	8001bec <__aeabi_dmul+0x48>
 8001ebc:	0005      	movs	r5, r0
 8001ebe:	4325      	orrs	r5, r4
 8001ec0:	d126      	bne.n	8001f10 <__aeabi_dmul+0x36c>
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	2400      	movs	r4, #0
 8001eca:	4691      	mov	r9, r2
 8001ecc:	469b      	mov	fp, r3
 8001ece:	e68d      	b.n	8001bec <__aeabi_dmul+0x48>
 8001ed0:	4652      	mov	r2, sl
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	4332      	orrs	r2, r6
 8001ed6:	d110      	bne.n	8001efa <__aeabi_dmul+0x356>
 8001ed8:	4915      	ldr	r1, [pc, #84]	; (8001f30 <__aeabi_dmul+0x38c>)
 8001eda:	2600      	movs	r6, #0
 8001edc:	468c      	mov	ip, r1
 8001ede:	4463      	add	r3, ip
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	4319      	orrs	r1, r3
 8001ee8:	4689      	mov	r9, r1
 8001eea:	2002      	movs	r0, #2
 8001eec:	e69d      	b.n	8001c2a <__aeabi_dmul+0x86>
 8001eee:	465b      	mov	r3, fp
 8001ef0:	9701      	str	r7, [sp, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_dmul+0x354>
 8001ef6:	e6ad      	b.n	8001c54 <__aeabi_dmul+0xb0>
 8001ef8:	e6c3      	b.n	8001c82 <__aeabi_dmul+0xde>
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <__aeabi_dmul+0x38c>)
 8001efc:	2003      	movs	r0, #3
 8001efe:	4694      	mov	ip, r2
 8001f00:	4463      	add	r3, ip
 8001f02:	464a      	mov	r2, r9
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2303      	movs	r3, #3
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	4691      	mov	r9, r2
 8001f0c:	4652      	mov	r2, sl
 8001f0e:	e68c      	b.n	8001c2a <__aeabi_dmul+0x86>
 8001f10:	220c      	movs	r2, #12
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2303      	movs	r3, #3
 8001f16:	0005      	movs	r5, r0
 8001f18:	4691      	mov	r9, r2
 8001f1a:	469b      	mov	fp, r3
 8001f1c:	e666      	b.n	8001bec <__aeabi_dmul+0x48>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	4699      	mov	r9, r3
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	2400      	movs	r4, #0
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	e65e      	b.n	8001bec <__aeabi_dmul+0x48>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000007ff 	.word	0x000007ff
 8001f34:	fffffc01 	.word	0xfffffc01
 8001f38:	0800e5ec 	.word	0x0800e5ec
 8001f3c:	000003ff 	.word	0x000003ff
 8001f40:	feffffff 	.word	0xfeffffff
 8001f44:	000007fe 	.word	0x000007fe
 8001f48:	fffffc0d 	.word	0xfffffc0d
 8001f4c:	4649      	mov	r1, r9
 8001f4e:	2301      	movs	r3, #1
 8001f50:	4319      	orrs	r1, r3
 8001f52:	4689      	mov	r9, r1
 8001f54:	2600      	movs	r6, #0
 8001f56:	2001      	movs	r0, #1
 8001f58:	e667      	b.n	8001c2a <__aeabi_dmul+0x86>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2480      	movs	r4, #128	; 0x80
 8001f5e:	2500      	movs	r5, #0
 8001f60:	4a43      	ldr	r2, [pc, #268]	; (8002070 <__aeabi_dmul+0x4cc>)
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	0324      	lsls	r4, r4, #12
 8001f66:	e67e      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	1a40      	subs	r0, r0, r1
 8001f6c:	2838      	cmp	r0, #56	; 0x38
 8001f6e:	dd00      	ble.n	8001f72 <__aeabi_dmul+0x3ce>
 8001f70:	e676      	b.n	8001c60 <__aeabi_dmul+0xbc>
 8001f72:	281f      	cmp	r0, #31
 8001f74:	dd5b      	ble.n	800202e <__aeabi_dmul+0x48a>
 8001f76:	221f      	movs	r2, #31
 8001f78:	0023      	movs	r3, r4
 8001f7a:	4252      	negs	r2, r2
 8001f7c:	1a51      	subs	r1, r2, r1
 8001f7e:	40cb      	lsrs	r3, r1
 8001f80:	0019      	movs	r1, r3
 8001f82:	2820      	cmp	r0, #32
 8001f84:	d003      	beq.n	8001f8e <__aeabi_dmul+0x3ea>
 8001f86:	4a3b      	ldr	r2, [pc, #236]	; (8002074 <__aeabi_dmul+0x4d0>)
 8001f88:	4462      	add	r2, ip
 8001f8a:	4094      	lsls	r4, r2
 8001f8c:	4325      	orrs	r5, r4
 8001f8e:	1e6a      	subs	r2, r5, #1
 8001f90:	4195      	sbcs	r5, r2
 8001f92:	002a      	movs	r2, r5
 8001f94:	430a      	orrs	r2, r1
 8001f96:	2107      	movs	r1, #7
 8001f98:	000d      	movs	r5, r1
 8001f9a:	2400      	movs	r4, #0
 8001f9c:	4015      	ands	r5, r2
 8001f9e:	4211      	tst	r1, r2
 8001fa0:	d05b      	beq.n	800205a <__aeabi_dmul+0x4b6>
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	4011      	ands	r1, r2
 8001fa8:	2904      	cmp	r1, #4
 8001faa:	d053      	beq.n	8002054 <__aeabi_dmul+0x4b0>
 8001fac:	1d11      	adds	r1, r2, #4
 8001fae:	4291      	cmp	r1, r2
 8001fb0:	4192      	sbcs	r2, r2
 8001fb2:	4252      	negs	r2, r2
 8001fb4:	18a4      	adds	r4, r4, r2
 8001fb6:	000a      	movs	r2, r1
 8001fb8:	0223      	lsls	r3, r4, #8
 8001fba:	d54b      	bpl.n	8002054 <__aeabi_dmul+0x4b0>
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2400      	movs	r4, #0
 8001fc0:	2500      	movs	r5, #0
 8001fc2:	e650      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	031b      	lsls	r3, r3, #12
 8001fc8:	421c      	tst	r4, r3
 8001fca:	d009      	beq.n	8001fe0 <__aeabi_dmul+0x43c>
 8001fcc:	421e      	tst	r6, r3
 8001fce:	d107      	bne.n	8001fe0 <__aeabi_dmul+0x43c>
 8001fd0:	4333      	orrs	r3, r6
 8001fd2:	031c      	lsls	r4, r3, #12
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	0015      	movs	r5, r2
 8001fd8:	0b24      	lsrs	r4, r4, #12
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <__aeabi_dmul+0x4cc>)
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	e642      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0312      	lsls	r2, r2, #12
 8001fe4:	4314      	orrs	r4, r2
 8001fe6:	0324      	lsls	r4, r4, #12
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <__aeabi_dmul+0x4cc>)
 8001fea:	0b24      	lsrs	r4, r4, #12
 8001fec:	9701      	str	r7, [sp, #4]
 8001fee:	e63a      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8001ff0:	f000 fd50 	bl	8002a94 <__clzsi2>
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	3115      	adds	r1, #21
 8001ffa:	3220      	adds	r2, #32
 8001ffc:	291c      	cmp	r1, #28
 8001ffe:	dc00      	bgt.n	8002002 <__aeabi_dmul+0x45e>
 8002000:	e74b      	b.n	8001e9a <__aeabi_dmul+0x2f6>
 8002002:	0034      	movs	r4, r6
 8002004:	3808      	subs	r0, #8
 8002006:	2500      	movs	r5, #0
 8002008:	4084      	lsls	r4, r0
 800200a:	e750      	b.n	8001eae <__aeabi_dmul+0x30a>
 800200c:	f000 fd42 	bl	8002a94 <__clzsi2>
 8002010:	0003      	movs	r3, r0
 8002012:	001a      	movs	r2, r3
 8002014:	3215      	adds	r2, #21
 8002016:	3020      	adds	r0, #32
 8002018:	2a1c      	cmp	r2, #28
 800201a:	dc00      	bgt.n	800201e <__aeabi_dmul+0x47a>
 800201c:	e71e      	b.n	8001e5c <__aeabi_dmul+0x2b8>
 800201e:	4656      	mov	r6, sl
 8002020:	3b08      	subs	r3, #8
 8002022:	2200      	movs	r2, #0
 8002024:	409e      	lsls	r6, r3
 8002026:	e723      	b.n	8001e70 <__aeabi_dmul+0x2cc>
 8002028:	9b00      	ldr	r3, [sp, #0]
 800202a:	469c      	mov	ip, r3
 800202c:	e6e6      	b.n	8001dfc <__aeabi_dmul+0x258>
 800202e:	4912      	ldr	r1, [pc, #72]	; (8002078 <__aeabi_dmul+0x4d4>)
 8002030:	0022      	movs	r2, r4
 8002032:	4461      	add	r1, ip
 8002034:	002e      	movs	r6, r5
 8002036:	408d      	lsls	r5, r1
 8002038:	408a      	lsls	r2, r1
 800203a:	40c6      	lsrs	r6, r0
 800203c:	1e69      	subs	r1, r5, #1
 800203e:	418d      	sbcs	r5, r1
 8002040:	4332      	orrs	r2, r6
 8002042:	432a      	orrs	r2, r5
 8002044:	40c4      	lsrs	r4, r0
 8002046:	0753      	lsls	r3, r2, #29
 8002048:	d0b6      	beq.n	8001fb8 <__aeabi_dmul+0x414>
 800204a:	210f      	movs	r1, #15
 800204c:	4011      	ands	r1, r2
 800204e:	2904      	cmp	r1, #4
 8002050:	d1ac      	bne.n	8001fac <__aeabi_dmul+0x408>
 8002052:	e7b1      	b.n	8001fb8 <__aeabi_dmul+0x414>
 8002054:	0765      	lsls	r5, r4, #29
 8002056:	0264      	lsls	r4, r4, #9
 8002058:	0b24      	lsrs	r4, r4, #12
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	4315      	orrs	r5, r2
 800205e:	2200      	movs	r2, #0
 8002060:	e601      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	0312      	lsls	r2, r2, #12
 8002066:	4314      	orrs	r4, r2
 8002068:	0324      	lsls	r4, r4, #12
 800206a:	4a01      	ldr	r2, [pc, #4]	; (8002070 <__aeabi_dmul+0x4cc>)
 800206c:	0b24      	lsrs	r4, r4, #12
 800206e:	e5fa      	b.n	8001c66 <__aeabi_dmul+0xc2>
 8002070:	000007ff 	.word	0x000007ff
 8002074:	0000043e 	.word	0x0000043e
 8002078:	0000041e 	.word	0x0000041e

0800207c <__aeabi_dsub>:
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	4657      	mov	r7, sl
 8002080:	464e      	mov	r6, r9
 8002082:	4645      	mov	r5, r8
 8002084:	46de      	mov	lr, fp
 8002086:	b5e0      	push	{r5, r6, r7, lr}
 8002088:	001e      	movs	r6, r3
 800208a:	0017      	movs	r7, r2
 800208c:	004a      	lsls	r2, r1, #1
 800208e:	030b      	lsls	r3, r1, #12
 8002090:	0d52      	lsrs	r2, r2, #21
 8002092:	0a5b      	lsrs	r3, r3, #9
 8002094:	4690      	mov	r8, r2
 8002096:	0f42      	lsrs	r2, r0, #29
 8002098:	431a      	orrs	r2, r3
 800209a:	0fcd      	lsrs	r5, r1, #31
 800209c:	4ccd      	ldr	r4, [pc, #820]	; (80023d4 <__aeabi_dsub+0x358>)
 800209e:	0331      	lsls	r1, r6, #12
 80020a0:	00c3      	lsls	r3, r0, #3
 80020a2:	4694      	mov	ip, r2
 80020a4:	0070      	lsls	r0, r6, #1
 80020a6:	0f7a      	lsrs	r2, r7, #29
 80020a8:	0a49      	lsrs	r1, r1, #9
 80020aa:	00ff      	lsls	r7, r7, #3
 80020ac:	469a      	mov	sl, r3
 80020ae:	46b9      	mov	r9, r7
 80020b0:	0d40      	lsrs	r0, r0, #21
 80020b2:	0ff6      	lsrs	r6, r6, #31
 80020b4:	4311      	orrs	r1, r2
 80020b6:	42a0      	cmp	r0, r4
 80020b8:	d100      	bne.n	80020bc <__aeabi_dsub+0x40>
 80020ba:	e0b1      	b.n	8002220 <__aeabi_dsub+0x1a4>
 80020bc:	2201      	movs	r2, #1
 80020be:	4056      	eors	r6, r2
 80020c0:	46b3      	mov	fp, r6
 80020c2:	42b5      	cmp	r5, r6
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x4c>
 80020c6:	e088      	b.n	80021da <__aeabi_dsub+0x15e>
 80020c8:	4642      	mov	r2, r8
 80020ca:	1a12      	subs	r2, r2, r0
 80020cc:	2a00      	cmp	r2, #0
 80020ce:	dc00      	bgt.n	80020d2 <__aeabi_dsub+0x56>
 80020d0:	e0ae      	b.n	8002230 <__aeabi_dsub+0x1b4>
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d100      	bne.n	80020d8 <__aeabi_dsub+0x5c>
 80020d6:	e0c1      	b.n	800225c <__aeabi_dsub+0x1e0>
 80020d8:	48be      	ldr	r0, [pc, #760]	; (80023d4 <__aeabi_dsub+0x358>)
 80020da:	4580      	cmp	r8, r0
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x64>
 80020de:	e151      	b.n	8002384 <__aeabi_dsub+0x308>
 80020e0:	2080      	movs	r0, #128	; 0x80
 80020e2:	0400      	lsls	r0, r0, #16
 80020e4:	4301      	orrs	r1, r0
 80020e6:	2a38      	cmp	r2, #56	; 0x38
 80020e8:	dd00      	ble.n	80020ec <__aeabi_dsub+0x70>
 80020ea:	e17b      	b.n	80023e4 <__aeabi_dsub+0x368>
 80020ec:	2a1f      	cmp	r2, #31
 80020ee:	dd00      	ble.n	80020f2 <__aeabi_dsub+0x76>
 80020f0:	e1ee      	b.n	80024d0 <__aeabi_dsub+0x454>
 80020f2:	2020      	movs	r0, #32
 80020f4:	003e      	movs	r6, r7
 80020f6:	1a80      	subs	r0, r0, r2
 80020f8:	000c      	movs	r4, r1
 80020fa:	40d6      	lsrs	r6, r2
 80020fc:	40d1      	lsrs	r1, r2
 80020fe:	4087      	lsls	r7, r0
 8002100:	4662      	mov	r2, ip
 8002102:	4084      	lsls	r4, r0
 8002104:	1a52      	subs	r2, r2, r1
 8002106:	1e78      	subs	r0, r7, #1
 8002108:	4187      	sbcs	r7, r0
 800210a:	4694      	mov	ip, r2
 800210c:	4334      	orrs	r4, r6
 800210e:	4327      	orrs	r7, r4
 8002110:	1bdc      	subs	r4, r3, r7
 8002112:	42a3      	cmp	r3, r4
 8002114:	419b      	sbcs	r3, r3
 8002116:	4662      	mov	r2, ip
 8002118:	425b      	negs	r3, r3
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	4699      	mov	r9, r3
 800211e:	464b      	mov	r3, r9
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	d400      	bmi.n	8002126 <__aeabi_dsub+0xaa>
 8002124:	e118      	b.n	8002358 <__aeabi_dsub+0x2dc>
 8002126:	464b      	mov	r3, r9
 8002128:	0258      	lsls	r0, r3, #9
 800212a:	0a43      	lsrs	r3, r0, #9
 800212c:	4699      	mov	r9, r3
 800212e:	464b      	mov	r3, r9
 8002130:	2b00      	cmp	r3, #0
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0xba>
 8002134:	e137      	b.n	80023a6 <__aeabi_dsub+0x32a>
 8002136:	4648      	mov	r0, r9
 8002138:	f000 fcac 	bl	8002a94 <__clzsi2>
 800213c:	0001      	movs	r1, r0
 800213e:	3908      	subs	r1, #8
 8002140:	2320      	movs	r3, #32
 8002142:	0022      	movs	r2, r4
 8002144:	4648      	mov	r0, r9
 8002146:	1a5b      	subs	r3, r3, r1
 8002148:	40da      	lsrs	r2, r3
 800214a:	4088      	lsls	r0, r1
 800214c:	408c      	lsls	r4, r1
 800214e:	4643      	mov	r3, r8
 8002150:	4310      	orrs	r0, r2
 8002152:	4588      	cmp	r8, r1
 8002154:	dd00      	ble.n	8002158 <__aeabi_dsub+0xdc>
 8002156:	e136      	b.n	80023c6 <__aeabi_dsub+0x34a>
 8002158:	1ac9      	subs	r1, r1, r3
 800215a:	1c4b      	adds	r3, r1, #1
 800215c:	2b1f      	cmp	r3, #31
 800215e:	dd00      	ble.n	8002162 <__aeabi_dsub+0xe6>
 8002160:	e0ea      	b.n	8002338 <__aeabi_dsub+0x2bc>
 8002162:	2220      	movs	r2, #32
 8002164:	0026      	movs	r6, r4
 8002166:	1ad2      	subs	r2, r2, r3
 8002168:	0001      	movs	r1, r0
 800216a:	4094      	lsls	r4, r2
 800216c:	40de      	lsrs	r6, r3
 800216e:	40d8      	lsrs	r0, r3
 8002170:	2300      	movs	r3, #0
 8002172:	4091      	lsls	r1, r2
 8002174:	1e62      	subs	r2, r4, #1
 8002176:	4194      	sbcs	r4, r2
 8002178:	4681      	mov	r9, r0
 800217a:	4698      	mov	r8, r3
 800217c:	4331      	orrs	r1, r6
 800217e:	430c      	orrs	r4, r1
 8002180:	0763      	lsls	r3, r4, #29
 8002182:	d009      	beq.n	8002198 <__aeabi_dsub+0x11c>
 8002184:	230f      	movs	r3, #15
 8002186:	4023      	ands	r3, r4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d005      	beq.n	8002198 <__aeabi_dsub+0x11c>
 800218c:	1d23      	adds	r3, r4, #4
 800218e:	42a3      	cmp	r3, r4
 8002190:	41a4      	sbcs	r4, r4
 8002192:	4264      	negs	r4, r4
 8002194:	44a1      	add	r9, r4
 8002196:	001c      	movs	r4, r3
 8002198:	464b      	mov	r3, r9
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	d400      	bmi.n	80021a0 <__aeabi_dsub+0x124>
 800219e:	e0de      	b.n	800235e <__aeabi_dsub+0x2e2>
 80021a0:	4641      	mov	r1, r8
 80021a2:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <__aeabi_dsub+0x358>)
 80021a4:	3101      	adds	r1, #1
 80021a6:	4299      	cmp	r1, r3
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x130>
 80021aa:	e0e7      	b.n	800237c <__aeabi_dsub+0x300>
 80021ac:	464b      	mov	r3, r9
 80021ae:	488a      	ldr	r0, [pc, #552]	; (80023d8 <__aeabi_dsub+0x35c>)
 80021b0:	08e4      	lsrs	r4, r4, #3
 80021b2:	4003      	ands	r3, r0
 80021b4:	0018      	movs	r0, r3
 80021b6:	0549      	lsls	r1, r1, #21
 80021b8:	075b      	lsls	r3, r3, #29
 80021ba:	0240      	lsls	r0, r0, #9
 80021bc:	4323      	orrs	r3, r4
 80021be:	0d4a      	lsrs	r2, r1, #21
 80021c0:	0b04      	lsrs	r4, r0, #12
 80021c2:	0512      	lsls	r2, r2, #20
 80021c4:	07ed      	lsls	r5, r5, #31
 80021c6:	4322      	orrs	r2, r4
 80021c8:	432a      	orrs	r2, r5
 80021ca:	0018      	movs	r0, r3
 80021cc:	0011      	movs	r1, r2
 80021ce:	bcf0      	pop	{r4, r5, r6, r7}
 80021d0:	46bb      	mov	fp, r7
 80021d2:	46b2      	mov	sl, r6
 80021d4:	46a9      	mov	r9, r5
 80021d6:	46a0      	mov	r8, r4
 80021d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021da:	4642      	mov	r2, r8
 80021dc:	1a12      	subs	r2, r2, r0
 80021de:	2a00      	cmp	r2, #0
 80021e0:	dd52      	ble.n	8002288 <__aeabi_dsub+0x20c>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x16c>
 80021e6:	e09c      	b.n	8002322 <__aeabi_dsub+0x2a6>
 80021e8:	45a0      	cmp	r8, r4
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x172>
 80021ec:	e0ca      	b.n	8002384 <__aeabi_dsub+0x308>
 80021ee:	2080      	movs	r0, #128	; 0x80
 80021f0:	0400      	lsls	r0, r0, #16
 80021f2:	4301      	orrs	r1, r0
 80021f4:	2a38      	cmp	r2, #56	; 0x38
 80021f6:	dd00      	ble.n	80021fa <__aeabi_dsub+0x17e>
 80021f8:	e149      	b.n	800248e <__aeabi_dsub+0x412>
 80021fa:	2a1f      	cmp	r2, #31
 80021fc:	dc00      	bgt.n	8002200 <__aeabi_dsub+0x184>
 80021fe:	e197      	b.n	8002530 <__aeabi_dsub+0x4b4>
 8002200:	0010      	movs	r0, r2
 8002202:	000e      	movs	r6, r1
 8002204:	3820      	subs	r0, #32
 8002206:	40c6      	lsrs	r6, r0
 8002208:	2a20      	cmp	r2, #32
 800220a:	d004      	beq.n	8002216 <__aeabi_dsub+0x19a>
 800220c:	2040      	movs	r0, #64	; 0x40
 800220e:	1a82      	subs	r2, r0, r2
 8002210:	4091      	lsls	r1, r2
 8002212:	430f      	orrs	r7, r1
 8002214:	46b9      	mov	r9, r7
 8002216:	464c      	mov	r4, r9
 8002218:	1e62      	subs	r2, r4, #1
 800221a:	4194      	sbcs	r4, r2
 800221c:	4334      	orrs	r4, r6
 800221e:	e13a      	b.n	8002496 <__aeabi_dsub+0x41a>
 8002220:	000a      	movs	r2, r1
 8002222:	433a      	orrs	r2, r7
 8002224:	d028      	beq.n	8002278 <__aeabi_dsub+0x1fc>
 8002226:	46b3      	mov	fp, r6
 8002228:	42b5      	cmp	r5, r6
 800222a:	d02b      	beq.n	8002284 <__aeabi_dsub+0x208>
 800222c:	4a6b      	ldr	r2, [pc, #428]	; (80023dc <__aeabi_dsub+0x360>)
 800222e:	4442      	add	r2, r8
 8002230:	2a00      	cmp	r2, #0
 8002232:	d05d      	beq.n	80022f0 <__aeabi_dsub+0x274>
 8002234:	4642      	mov	r2, r8
 8002236:	4644      	mov	r4, r8
 8002238:	1a82      	subs	r2, r0, r2
 800223a:	2c00      	cmp	r4, #0
 800223c:	d000      	beq.n	8002240 <__aeabi_dsub+0x1c4>
 800223e:	e0f5      	b.n	800242c <__aeabi_dsub+0x3b0>
 8002240:	4665      	mov	r5, ip
 8002242:	431d      	orrs	r5, r3
 8002244:	d100      	bne.n	8002248 <__aeabi_dsub+0x1cc>
 8002246:	e19c      	b.n	8002582 <__aeabi_dsub+0x506>
 8002248:	1e55      	subs	r5, r2, #1
 800224a:	2a01      	cmp	r2, #1
 800224c:	d100      	bne.n	8002250 <__aeabi_dsub+0x1d4>
 800224e:	e1fb      	b.n	8002648 <__aeabi_dsub+0x5cc>
 8002250:	4c60      	ldr	r4, [pc, #384]	; (80023d4 <__aeabi_dsub+0x358>)
 8002252:	42a2      	cmp	r2, r4
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x1dc>
 8002256:	e1bd      	b.n	80025d4 <__aeabi_dsub+0x558>
 8002258:	002a      	movs	r2, r5
 800225a:	e0f0      	b.n	800243e <__aeabi_dsub+0x3c2>
 800225c:	0008      	movs	r0, r1
 800225e:	4338      	orrs	r0, r7
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x1e8>
 8002262:	e0c3      	b.n	80023ec <__aeabi_dsub+0x370>
 8002264:	1e50      	subs	r0, r2, #1
 8002266:	2a01      	cmp	r2, #1
 8002268:	d100      	bne.n	800226c <__aeabi_dsub+0x1f0>
 800226a:	e1a8      	b.n	80025be <__aeabi_dsub+0x542>
 800226c:	4c59      	ldr	r4, [pc, #356]	; (80023d4 <__aeabi_dsub+0x358>)
 800226e:	42a2      	cmp	r2, r4
 8002270:	d100      	bne.n	8002274 <__aeabi_dsub+0x1f8>
 8002272:	e087      	b.n	8002384 <__aeabi_dsub+0x308>
 8002274:	0002      	movs	r2, r0
 8002276:	e736      	b.n	80020e6 <__aeabi_dsub+0x6a>
 8002278:	2201      	movs	r2, #1
 800227a:	4056      	eors	r6, r2
 800227c:	46b3      	mov	fp, r6
 800227e:	42b5      	cmp	r5, r6
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x208>
 8002282:	e721      	b.n	80020c8 <__aeabi_dsub+0x4c>
 8002284:	4a55      	ldr	r2, [pc, #340]	; (80023dc <__aeabi_dsub+0x360>)
 8002286:	4442      	add	r2, r8
 8002288:	2a00      	cmp	r2, #0
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x212>
 800228c:	e0b5      	b.n	80023fa <__aeabi_dsub+0x37e>
 800228e:	4642      	mov	r2, r8
 8002290:	4644      	mov	r4, r8
 8002292:	1a82      	subs	r2, r0, r2
 8002294:	2c00      	cmp	r4, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x21e>
 8002298:	e138      	b.n	800250c <__aeabi_dsub+0x490>
 800229a:	4e4e      	ldr	r6, [pc, #312]	; (80023d4 <__aeabi_dsub+0x358>)
 800229c:	42b0      	cmp	r0, r6
 800229e:	d100      	bne.n	80022a2 <__aeabi_dsub+0x226>
 80022a0:	e1de      	b.n	8002660 <__aeabi_dsub+0x5e4>
 80022a2:	2680      	movs	r6, #128	; 0x80
 80022a4:	4664      	mov	r4, ip
 80022a6:	0436      	lsls	r6, r6, #16
 80022a8:	4334      	orrs	r4, r6
 80022aa:	46a4      	mov	ip, r4
 80022ac:	2a38      	cmp	r2, #56	; 0x38
 80022ae:	dd00      	ble.n	80022b2 <__aeabi_dsub+0x236>
 80022b0:	e196      	b.n	80025e0 <__aeabi_dsub+0x564>
 80022b2:	2a1f      	cmp	r2, #31
 80022b4:	dd00      	ble.n	80022b8 <__aeabi_dsub+0x23c>
 80022b6:	e224      	b.n	8002702 <__aeabi_dsub+0x686>
 80022b8:	2620      	movs	r6, #32
 80022ba:	1ab4      	subs	r4, r6, r2
 80022bc:	46a2      	mov	sl, r4
 80022be:	4664      	mov	r4, ip
 80022c0:	4656      	mov	r6, sl
 80022c2:	40b4      	lsls	r4, r6
 80022c4:	46a1      	mov	r9, r4
 80022c6:	001c      	movs	r4, r3
 80022c8:	464e      	mov	r6, r9
 80022ca:	40d4      	lsrs	r4, r2
 80022cc:	4326      	orrs	r6, r4
 80022ce:	0034      	movs	r4, r6
 80022d0:	4656      	mov	r6, sl
 80022d2:	40b3      	lsls	r3, r6
 80022d4:	1e5e      	subs	r6, r3, #1
 80022d6:	41b3      	sbcs	r3, r6
 80022d8:	431c      	orrs	r4, r3
 80022da:	4663      	mov	r3, ip
 80022dc:	40d3      	lsrs	r3, r2
 80022de:	18c9      	adds	r1, r1, r3
 80022e0:	19e4      	adds	r4, r4, r7
 80022e2:	42bc      	cmp	r4, r7
 80022e4:	41bf      	sbcs	r7, r7
 80022e6:	427f      	negs	r7, r7
 80022e8:	46b9      	mov	r9, r7
 80022ea:	4680      	mov	r8, r0
 80022ec:	4489      	add	r9, r1
 80022ee:	e0d8      	b.n	80024a2 <__aeabi_dsub+0x426>
 80022f0:	4640      	mov	r0, r8
 80022f2:	4c3b      	ldr	r4, [pc, #236]	; (80023e0 <__aeabi_dsub+0x364>)
 80022f4:	3001      	adds	r0, #1
 80022f6:	4220      	tst	r0, r4
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x280>
 80022fa:	e0b4      	b.n	8002466 <__aeabi_dsub+0x3ea>
 80022fc:	4640      	mov	r0, r8
 80022fe:	2800      	cmp	r0, #0
 8002300:	d000      	beq.n	8002304 <__aeabi_dsub+0x288>
 8002302:	e144      	b.n	800258e <__aeabi_dsub+0x512>
 8002304:	4660      	mov	r0, ip
 8002306:	4318      	orrs	r0, r3
 8002308:	d100      	bne.n	800230c <__aeabi_dsub+0x290>
 800230a:	e190      	b.n	800262e <__aeabi_dsub+0x5b2>
 800230c:	0008      	movs	r0, r1
 800230e:	4338      	orrs	r0, r7
 8002310:	d000      	beq.n	8002314 <__aeabi_dsub+0x298>
 8002312:	e1aa      	b.n	800266a <__aeabi_dsub+0x5ee>
 8002314:	4661      	mov	r1, ip
 8002316:	08db      	lsrs	r3, r3, #3
 8002318:	0749      	lsls	r1, r1, #29
 800231a:	430b      	orrs	r3, r1
 800231c:	4661      	mov	r1, ip
 800231e:	08cc      	lsrs	r4, r1, #3
 8002320:	e027      	b.n	8002372 <__aeabi_dsub+0x2f6>
 8002322:	0008      	movs	r0, r1
 8002324:	4338      	orrs	r0, r7
 8002326:	d061      	beq.n	80023ec <__aeabi_dsub+0x370>
 8002328:	1e50      	subs	r0, r2, #1
 800232a:	2a01      	cmp	r2, #1
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x2b4>
 800232e:	e139      	b.n	80025a4 <__aeabi_dsub+0x528>
 8002330:	42a2      	cmp	r2, r4
 8002332:	d027      	beq.n	8002384 <__aeabi_dsub+0x308>
 8002334:	0002      	movs	r2, r0
 8002336:	e75d      	b.n	80021f4 <__aeabi_dsub+0x178>
 8002338:	0002      	movs	r2, r0
 800233a:	391f      	subs	r1, #31
 800233c:	40ca      	lsrs	r2, r1
 800233e:	0011      	movs	r1, r2
 8002340:	2b20      	cmp	r3, #32
 8002342:	d003      	beq.n	800234c <__aeabi_dsub+0x2d0>
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	4098      	lsls	r0, r3
 800234a:	4304      	orrs	r4, r0
 800234c:	1e63      	subs	r3, r4, #1
 800234e:	419c      	sbcs	r4, r3
 8002350:	2300      	movs	r3, #0
 8002352:	4699      	mov	r9, r3
 8002354:	4698      	mov	r8, r3
 8002356:	430c      	orrs	r4, r1
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x2e2>
 800235c:	e712      	b.n	8002184 <__aeabi_dsub+0x108>
 800235e:	464b      	mov	r3, r9
 8002360:	464a      	mov	r2, r9
 8002362:	08e4      	lsrs	r4, r4, #3
 8002364:	075b      	lsls	r3, r3, #29
 8002366:	4323      	orrs	r3, r4
 8002368:	08d4      	lsrs	r4, r2, #3
 800236a:	4642      	mov	r2, r8
 800236c:	4919      	ldr	r1, [pc, #100]	; (80023d4 <__aeabi_dsub+0x358>)
 800236e:	428a      	cmp	r2, r1
 8002370:	d00e      	beq.n	8002390 <__aeabi_dsub+0x314>
 8002372:	0324      	lsls	r4, r4, #12
 8002374:	0552      	lsls	r2, r2, #21
 8002376:	0b24      	lsrs	r4, r4, #12
 8002378:	0d52      	lsrs	r2, r2, #21
 800237a:	e722      	b.n	80021c2 <__aeabi_dsub+0x146>
 800237c:	000a      	movs	r2, r1
 800237e:	2400      	movs	r4, #0
 8002380:	2300      	movs	r3, #0
 8002382:	e71e      	b.n	80021c2 <__aeabi_dsub+0x146>
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	4662      	mov	r2, ip
 8002388:	0752      	lsls	r2, r2, #29
 800238a:	4313      	orrs	r3, r2
 800238c:	4662      	mov	r2, ip
 800238e:	08d4      	lsrs	r4, r2, #3
 8002390:	001a      	movs	r2, r3
 8002392:	4322      	orrs	r2, r4
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x31c>
 8002396:	e1fc      	b.n	8002792 <__aeabi_dsub+0x716>
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	0312      	lsls	r2, r2, #12
 800239c:	4314      	orrs	r4, r2
 800239e:	0324      	lsls	r4, r4, #12
 80023a0:	4a0c      	ldr	r2, [pc, #48]	; (80023d4 <__aeabi_dsub+0x358>)
 80023a2:	0b24      	lsrs	r4, r4, #12
 80023a4:	e70d      	b.n	80021c2 <__aeabi_dsub+0x146>
 80023a6:	0020      	movs	r0, r4
 80023a8:	f000 fb74 	bl	8002a94 <__clzsi2>
 80023ac:	0001      	movs	r1, r0
 80023ae:	3118      	adds	r1, #24
 80023b0:	291f      	cmp	r1, #31
 80023b2:	dc00      	bgt.n	80023b6 <__aeabi_dsub+0x33a>
 80023b4:	e6c4      	b.n	8002140 <__aeabi_dsub+0xc4>
 80023b6:	3808      	subs	r0, #8
 80023b8:	4084      	lsls	r4, r0
 80023ba:	4643      	mov	r3, r8
 80023bc:	0020      	movs	r0, r4
 80023be:	2400      	movs	r4, #0
 80023c0:	4588      	cmp	r8, r1
 80023c2:	dc00      	bgt.n	80023c6 <__aeabi_dsub+0x34a>
 80023c4:	e6c8      	b.n	8002158 <__aeabi_dsub+0xdc>
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <__aeabi_dsub+0x35c>)
 80023c8:	1a5b      	subs	r3, r3, r1
 80023ca:	4010      	ands	r0, r2
 80023cc:	4698      	mov	r8, r3
 80023ce:	4681      	mov	r9, r0
 80023d0:	e6d6      	b.n	8002180 <__aeabi_dsub+0x104>
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	ff7fffff 	.word	0xff7fffff
 80023dc:	fffff801 	.word	0xfffff801
 80023e0:	000007fe 	.word	0x000007fe
 80023e4:	430f      	orrs	r7, r1
 80023e6:	1e7a      	subs	r2, r7, #1
 80023e8:	4197      	sbcs	r7, r2
 80023ea:	e691      	b.n	8002110 <__aeabi_dsub+0x94>
 80023ec:	4661      	mov	r1, ip
 80023ee:	08db      	lsrs	r3, r3, #3
 80023f0:	0749      	lsls	r1, r1, #29
 80023f2:	430b      	orrs	r3, r1
 80023f4:	4661      	mov	r1, ip
 80023f6:	08cc      	lsrs	r4, r1, #3
 80023f8:	e7b8      	b.n	800236c <__aeabi_dsub+0x2f0>
 80023fa:	4640      	mov	r0, r8
 80023fc:	4cd3      	ldr	r4, [pc, #844]	; (800274c <__aeabi_dsub+0x6d0>)
 80023fe:	3001      	adds	r0, #1
 8002400:	4220      	tst	r0, r4
 8002402:	d000      	beq.n	8002406 <__aeabi_dsub+0x38a>
 8002404:	e0a2      	b.n	800254c <__aeabi_dsub+0x4d0>
 8002406:	4640      	mov	r0, r8
 8002408:	2800      	cmp	r0, #0
 800240a:	d000      	beq.n	800240e <__aeabi_dsub+0x392>
 800240c:	e101      	b.n	8002612 <__aeabi_dsub+0x596>
 800240e:	4660      	mov	r0, ip
 8002410:	4318      	orrs	r0, r3
 8002412:	d100      	bne.n	8002416 <__aeabi_dsub+0x39a>
 8002414:	e15e      	b.n	80026d4 <__aeabi_dsub+0x658>
 8002416:	0008      	movs	r0, r1
 8002418:	4338      	orrs	r0, r7
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x3a2>
 800241c:	e15f      	b.n	80026de <__aeabi_dsub+0x662>
 800241e:	4661      	mov	r1, ip
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	0749      	lsls	r1, r1, #29
 8002424:	430b      	orrs	r3, r1
 8002426:	4661      	mov	r1, ip
 8002428:	08cc      	lsrs	r4, r1, #3
 800242a:	e7a2      	b.n	8002372 <__aeabi_dsub+0x2f6>
 800242c:	4dc8      	ldr	r5, [pc, #800]	; (8002750 <__aeabi_dsub+0x6d4>)
 800242e:	42a8      	cmp	r0, r5
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x3b8>
 8002432:	e0cf      	b.n	80025d4 <__aeabi_dsub+0x558>
 8002434:	2580      	movs	r5, #128	; 0x80
 8002436:	4664      	mov	r4, ip
 8002438:	042d      	lsls	r5, r5, #16
 800243a:	432c      	orrs	r4, r5
 800243c:	46a4      	mov	ip, r4
 800243e:	2a38      	cmp	r2, #56	; 0x38
 8002440:	dc56      	bgt.n	80024f0 <__aeabi_dsub+0x474>
 8002442:	2a1f      	cmp	r2, #31
 8002444:	dd00      	ble.n	8002448 <__aeabi_dsub+0x3cc>
 8002446:	e0d1      	b.n	80025ec <__aeabi_dsub+0x570>
 8002448:	2520      	movs	r5, #32
 800244a:	001e      	movs	r6, r3
 800244c:	1aad      	subs	r5, r5, r2
 800244e:	4664      	mov	r4, ip
 8002450:	40ab      	lsls	r3, r5
 8002452:	40ac      	lsls	r4, r5
 8002454:	40d6      	lsrs	r6, r2
 8002456:	1e5d      	subs	r5, r3, #1
 8002458:	41ab      	sbcs	r3, r5
 800245a:	4334      	orrs	r4, r6
 800245c:	4323      	orrs	r3, r4
 800245e:	4664      	mov	r4, ip
 8002460:	40d4      	lsrs	r4, r2
 8002462:	1b09      	subs	r1, r1, r4
 8002464:	e049      	b.n	80024fa <__aeabi_dsub+0x47e>
 8002466:	4660      	mov	r0, ip
 8002468:	1bdc      	subs	r4, r3, r7
 800246a:	1a46      	subs	r6, r0, r1
 800246c:	42a3      	cmp	r3, r4
 800246e:	4180      	sbcs	r0, r0
 8002470:	4240      	negs	r0, r0
 8002472:	4681      	mov	r9, r0
 8002474:	0030      	movs	r0, r6
 8002476:	464e      	mov	r6, r9
 8002478:	1b80      	subs	r0, r0, r6
 800247a:	4681      	mov	r9, r0
 800247c:	0200      	lsls	r0, r0, #8
 800247e:	d476      	bmi.n	800256e <__aeabi_dsub+0x4f2>
 8002480:	464b      	mov	r3, r9
 8002482:	4323      	orrs	r3, r4
 8002484:	d000      	beq.n	8002488 <__aeabi_dsub+0x40c>
 8002486:	e652      	b.n	800212e <__aeabi_dsub+0xb2>
 8002488:	2400      	movs	r4, #0
 800248a:	2500      	movs	r5, #0
 800248c:	e771      	b.n	8002372 <__aeabi_dsub+0x2f6>
 800248e:	4339      	orrs	r1, r7
 8002490:	000c      	movs	r4, r1
 8002492:	1e62      	subs	r2, r4, #1
 8002494:	4194      	sbcs	r4, r2
 8002496:	18e4      	adds	r4, r4, r3
 8002498:	429c      	cmp	r4, r3
 800249a:	419b      	sbcs	r3, r3
 800249c:	425b      	negs	r3, r3
 800249e:	4463      	add	r3, ip
 80024a0:	4699      	mov	r9, r3
 80024a2:	464b      	mov	r3, r9
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x42e>
 80024a8:	e756      	b.n	8002358 <__aeabi_dsub+0x2dc>
 80024aa:	2301      	movs	r3, #1
 80024ac:	469c      	mov	ip, r3
 80024ae:	4ba8      	ldr	r3, [pc, #672]	; (8002750 <__aeabi_dsub+0x6d4>)
 80024b0:	44e0      	add	r8, ip
 80024b2:	4598      	cmp	r8, r3
 80024b4:	d038      	beq.n	8002528 <__aeabi_dsub+0x4ac>
 80024b6:	464b      	mov	r3, r9
 80024b8:	48a6      	ldr	r0, [pc, #664]	; (8002754 <__aeabi_dsub+0x6d8>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	4003      	ands	r3, r0
 80024be:	0018      	movs	r0, r3
 80024c0:	0863      	lsrs	r3, r4, #1
 80024c2:	4014      	ands	r4, r2
 80024c4:	431c      	orrs	r4, r3
 80024c6:	07c3      	lsls	r3, r0, #31
 80024c8:	431c      	orrs	r4, r3
 80024ca:	0843      	lsrs	r3, r0, #1
 80024cc:	4699      	mov	r9, r3
 80024ce:	e657      	b.n	8002180 <__aeabi_dsub+0x104>
 80024d0:	0010      	movs	r0, r2
 80024d2:	000e      	movs	r6, r1
 80024d4:	3820      	subs	r0, #32
 80024d6:	40c6      	lsrs	r6, r0
 80024d8:	2a20      	cmp	r2, #32
 80024da:	d004      	beq.n	80024e6 <__aeabi_dsub+0x46a>
 80024dc:	2040      	movs	r0, #64	; 0x40
 80024de:	1a82      	subs	r2, r0, r2
 80024e0:	4091      	lsls	r1, r2
 80024e2:	430f      	orrs	r7, r1
 80024e4:	46b9      	mov	r9, r7
 80024e6:	464f      	mov	r7, r9
 80024e8:	1e7a      	subs	r2, r7, #1
 80024ea:	4197      	sbcs	r7, r2
 80024ec:	4337      	orrs	r7, r6
 80024ee:	e60f      	b.n	8002110 <__aeabi_dsub+0x94>
 80024f0:	4662      	mov	r2, ip
 80024f2:	431a      	orrs	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	1e5a      	subs	r2, r3, #1
 80024f8:	4193      	sbcs	r3, r2
 80024fa:	1afc      	subs	r4, r7, r3
 80024fc:	42a7      	cmp	r7, r4
 80024fe:	41bf      	sbcs	r7, r7
 8002500:	427f      	negs	r7, r7
 8002502:	1bcb      	subs	r3, r1, r7
 8002504:	4699      	mov	r9, r3
 8002506:	465d      	mov	r5, fp
 8002508:	4680      	mov	r8, r0
 800250a:	e608      	b.n	800211e <__aeabi_dsub+0xa2>
 800250c:	4666      	mov	r6, ip
 800250e:	431e      	orrs	r6, r3
 8002510:	d100      	bne.n	8002514 <__aeabi_dsub+0x498>
 8002512:	e0be      	b.n	8002692 <__aeabi_dsub+0x616>
 8002514:	1e56      	subs	r6, r2, #1
 8002516:	2a01      	cmp	r2, #1
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x4a0>
 800251a:	e109      	b.n	8002730 <__aeabi_dsub+0x6b4>
 800251c:	4c8c      	ldr	r4, [pc, #560]	; (8002750 <__aeabi_dsub+0x6d4>)
 800251e:	42a2      	cmp	r2, r4
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x4a8>
 8002522:	e119      	b.n	8002758 <__aeabi_dsub+0x6dc>
 8002524:	0032      	movs	r2, r6
 8002526:	e6c1      	b.n	80022ac <__aeabi_dsub+0x230>
 8002528:	4642      	mov	r2, r8
 800252a:	2400      	movs	r4, #0
 800252c:	2300      	movs	r3, #0
 800252e:	e648      	b.n	80021c2 <__aeabi_dsub+0x146>
 8002530:	2020      	movs	r0, #32
 8002532:	000c      	movs	r4, r1
 8002534:	1a80      	subs	r0, r0, r2
 8002536:	003e      	movs	r6, r7
 8002538:	4087      	lsls	r7, r0
 800253a:	4084      	lsls	r4, r0
 800253c:	40d6      	lsrs	r6, r2
 800253e:	1e78      	subs	r0, r7, #1
 8002540:	4187      	sbcs	r7, r0
 8002542:	40d1      	lsrs	r1, r2
 8002544:	4334      	orrs	r4, r6
 8002546:	433c      	orrs	r4, r7
 8002548:	448c      	add	ip, r1
 800254a:	e7a4      	b.n	8002496 <__aeabi_dsub+0x41a>
 800254c:	4a80      	ldr	r2, [pc, #512]	; (8002750 <__aeabi_dsub+0x6d4>)
 800254e:	4290      	cmp	r0, r2
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x4d8>
 8002552:	e0e9      	b.n	8002728 <__aeabi_dsub+0x6ac>
 8002554:	19df      	adds	r7, r3, r7
 8002556:	429f      	cmp	r7, r3
 8002558:	419b      	sbcs	r3, r3
 800255a:	4461      	add	r1, ip
 800255c:	425b      	negs	r3, r3
 800255e:	18c9      	adds	r1, r1, r3
 8002560:	07cc      	lsls	r4, r1, #31
 8002562:	087f      	lsrs	r7, r7, #1
 8002564:	084b      	lsrs	r3, r1, #1
 8002566:	4699      	mov	r9, r3
 8002568:	4680      	mov	r8, r0
 800256a:	433c      	orrs	r4, r7
 800256c:	e6f4      	b.n	8002358 <__aeabi_dsub+0x2dc>
 800256e:	1afc      	subs	r4, r7, r3
 8002570:	42a7      	cmp	r7, r4
 8002572:	41bf      	sbcs	r7, r7
 8002574:	4663      	mov	r3, ip
 8002576:	427f      	negs	r7, r7
 8002578:	1ac9      	subs	r1, r1, r3
 800257a:	1bcb      	subs	r3, r1, r7
 800257c:	4699      	mov	r9, r3
 800257e:	465d      	mov	r5, fp
 8002580:	e5d5      	b.n	800212e <__aeabi_dsub+0xb2>
 8002582:	08ff      	lsrs	r7, r7, #3
 8002584:	074b      	lsls	r3, r1, #29
 8002586:	465d      	mov	r5, fp
 8002588:	433b      	orrs	r3, r7
 800258a:	08cc      	lsrs	r4, r1, #3
 800258c:	e6ee      	b.n	800236c <__aeabi_dsub+0x2f0>
 800258e:	4662      	mov	r2, ip
 8002590:	431a      	orrs	r2, r3
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x51a>
 8002594:	e082      	b.n	800269c <__aeabi_dsub+0x620>
 8002596:	000b      	movs	r3, r1
 8002598:	433b      	orrs	r3, r7
 800259a:	d11b      	bne.n	80025d4 <__aeabi_dsub+0x558>
 800259c:	2480      	movs	r4, #128	; 0x80
 800259e:	2500      	movs	r5, #0
 80025a0:	0324      	lsls	r4, r4, #12
 80025a2:	e6f9      	b.n	8002398 <__aeabi_dsub+0x31c>
 80025a4:	19dc      	adds	r4, r3, r7
 80025a6:	429c      	cmp	r4, r3
 80025a8:	419b      	sbcs	r3, r3
 80025aa:	4461      	add	r1, ip
 80025ac:	4689      	mov	r9, r1
 80025ae:	425b      	negs	r3, r3
 80025b0:	4499      	add	r9, r3
 80025b2:	464b      	mov	r3, r9
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	d444      	bmi.n	8002642 <__aeabi_dsub+0x5c6>
 80025b8:	2301      	movs	r3, #1
 80025ba:	4698      	mov	r8, r3
 80025bc:	e6cc      	b.n	8002358 <__aeabi_dsub+0x2dc>
 80025be:	1bdc      	subs	r4, r3, r7
 80025c0:	4662      	mov	r2, ip
 80025c2:	42a3      	cmp	r3, r4
 80025c4:	419b      	sbcs	r3, r3
 80025c6:	1a51      	subs	r1, r2, r1
 80025c8:	425b      	negs	r3, r3
 80025ca:	1acb      	subs	r3, r1, r3
 80025cc:	4699      	mov	r9, r3
 80025ce:	2301      	movs	r3, #1
 80025d0:	4698      	mov	r8, r3
 80025d2:	e5a4      	b.n	800211e <__aeabi_dsub+0xa2>
 80025d4:	08ff      	lsrs	r7, r7, #3
 80025d6:	074b      	lsls	r3, r1, #29
 80025d8:	465d      	mov	r5, fp
 80025da:	433b      	orrs	r3, r7
 80025dc:	08cc      	lsrs	r4, r1, #3
 80025de:	e6d7      	b.n	8002390 <__aeabi_dsub+0x314>
 80025e0:	4662      	mov	r2, ip
 80025e2:	431a      	orrs	r2, r3
 80025e4:	0014      	movs	r4, r2
 80025e6:	1e63      	subs	r3, r4, #1
 80025e8:	419c      	sbcs	r4, r3
 80025ea:	e679      	b.n	80022e0 <__aeabi_dsub+0x264>
 80025ec:	0015      	movs	r5, r2
 80025ee:	4664      	mov	r4, ip
 80025f0:	3d20      	subs	r5, #32
 80025f2:	40ec      	lsrs	r4, r5
 80025f4:	46a0      	mov	r8, r4
 80025f6:	2a20      	cmp	r2, #32
 80025f8:	d005      	beq.n	8002606 <__aeabi_dsub+0x58a>
 80025fa:	2540      	movs	r5, #64	; 0x40
 80025fc:	4664      	mov	r4, ip
 80025fe:	1aaa      	subs	r2, r5, r2
 8002600:	4094      	lsls	r4, r2
 8002602:	4323      	orrs	r3, r4
 8002604:	469a      	mov	sl, r3
 8002606:	4654      	mov	r4, sl
 8002608:	1e63      	subs	r3, r4, #1
 800260a:	419c      	sbcs	r4, r3
 800260c:	4643      	mov	r3, r8
 800260e:	4323      	orrs	r3, r4
 8002610:	e773      	b.n	80024fa <__aeabi_dsub+0x47e>
 8002612:	4662      	mov	r2, ip
 8002614:	431a      	orrs	r2, r3
 8002616:	d023      	beq.n	8002660 <__aeabi_dsub+0x5e4>
 8002618:	000a      	movs	r2, r1
 800261a:	433a      	orrs	r2, r7
 800261c:	d000      	beq.n	8002620 <__aeabi_dsub+0x5a4>
 800261e:	e0a0      	b.n	8002762 <__aeabi_dsub+0x6e6>
 8002620:	4662      	mov	r2, ip
 8002622:	08db      	lsrs	r3, r3, #3
 8002624:	0752      	lsls	r2, r2, #29
 8002626:	4313      	orrs	r3, r2
 8002628:	4662      	mov	r2, ip
 800262a:	08d4      	lsrs	r4, r2, #3
 800262c:	e6b0      	b.n	8002390 <__aeabi_dsub+0x314>
 800262e:	000b      	movs	r3, r1
 8002630:	433b      	orrs	r3, r7
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0x5ba>
 8002634:	e728      	b.n	8002488 <__aeabi_dsub+0x40c>
 8002636:	08ff      	lsrs	r7, r7, #3
 8002638:	074b      	lsls	r3, r1, #29
 800263a:	465d      	mov	r5, fp
 800263c:	433b      	orrs	r3, r7
 800263e:	08cc      	lsrs	r4, r1, #3
 8002640:	e697      	b.n	8002372 <__aeabi_dsub+0x2f6>
 8002642:	2302      	movs	r3, #2
 8002644:	4698      	mov	r8, r3
 8002646:	e736      	b.n	80024b6 <__aeabi_dsub+0x43a>
 8002648:	1afc      	subs	r4, r7, r3
 800264a:	42a7      	cmp	r7, r4
 800264c:	41bf      	sbcs	r7, r7
 800264e:	4663      	mov	r3, ip
 8002650:	427f      	negs	r7, r7
 8002652:	1ac9      	subs	r1, r1, r3
 8002654:	1bcb      	subs	r3, r1, r7
 8002656:	4699      	mov	r9, r3
 8002658:	2301      	movs	r3, #1
 800265a:	465d      	mov	r5, fp
 800265c:	4698      	mov	r8, r3
 800265e:	e55e      	b.n	800211e <__aeabi_dsub+0xa2>
 8002660:	074b      	lsls	r3, r1, #29
 8002662:	08ff      	lsrs	r7, r7, #3
 8002664:	433b      	orrs	r3, r7
 8002666:	08cc      	lsrs	r4, r1, #3
 8002668:	e692      	b.n	8002390 <__aeabi_dsub+0x314>
 800266a:	1bdc      	subs	r4, r3, r7
 800266c:	4660      	mov	r0, ip
 800266e:	42a3      	cmp	r3, r4
 8002670:	41b6      	sbcs	r6, r6
 8002672:	1a40      	subs	r0, r0, r1
 8002674:	4276      	negs	r6, r6
 8002676:	1b80      	subs	r0, r0, r6
 8002678:	4681      	mov	r9, r0
 800267a:	0200      	lsls	r0, r0, #8
 800267c:	d560      	bpl.n	8002740 <__aeabi_dsub+0x6c4>
 800267e:	1afc      	subs	r4, r7, r3
 8002680:	42a7      	cmp	r7, r4
 8002682:	41bf      	sbcs	r7, r7
 8002684:	4663      	mov	r3, ip
 8002686:	427f      	negs	r7, r7
 8002688:	1ac9      	subs	r1, r1, r3
 800268a:	1bcb      	subs	r3, r1, r7
 800268c:	4699      	mov	r9, r3
 800268e:	465d      	mov	r5, fp
 8002690:	e576      	b.n	8002180 <__aeabi_dsub+0x104>
 8002692:	08ff      	lsrs	r7, r7, #3
 8002694:	074b      	lsls	r3, r1, #29
 8002696:	433b      	orrs	r3, r7
 8002698:	08cc      	lsrs	r4, r1, #3
 800269a:	e667      	b.n	800236c <__aeabi_dsub+0x2f0>
 800269c:	000a      	movs	r2, r1
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	433a      	orrs	r2, r7
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dsub+0x62a>
 80026a4:	e66f      	b.n	8002386 <__aeabi_dsub+0x30a>
 80026a6:	4662      	mov	r2, ip
 80026a8:	0752      	lsls	r2, r2, #29
 80026aa:	4313      	orrs	r3, r2
 80026ac:	4662      	mov	r2, ip
 80026ae:	08d4      	lsrs	r4, r2, #3
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	0312      	lsls	r2, r2, #12
 80026b4:	4214      	tst	r4, r2
 80026b6:	d007      	beq.n	80026c8 <__aeabi_dsub+0x64c>
 80026b8:	08c8      	lsrs	r0, r1, #3
 80026ba:	4210      	tst	r0, r2
 80026bc:	d104      	bne.n	80026c8 <__aeabi_dsub+0x64c>
 80026be:	465d      	mov	r5, fp
 80026c0:	0004      	movs	r4, r0
 80026c2:	08fb      	lsrs	r3, r7, #3
 80026c4:	0749      	lsls	r1, r1, #29
 80026c6:	430b      	orrs	r3, r1
 80026c8:	0f5a      	lsrs	r2, r3, #29
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	0752      	lsls	r2, r2, #29
 80026d0:	4313      	orrs	r3, r2
 80026d2:	e65d      	b.n	8002390 <__aeabi_dsub+0x314>
 80026d4:	074b      	lsls	r3, r1, #29
 80026d6:	08ff      	lsrs	r7, r7, #3
 80026d8:	433b      	orrs	r3, r7
 80026da:	08cc      	lsrs	r4, r1, #3
 80026dc:	e649      	b.n	8002372 <__aeabi_dsub+0x2f6>
 80026de:	19dc      	adds	r4, r3, r7
 80026e0:	429c      	cmp	r4, r3
 80026e2:	419b      	sbcs	r3, r3
 80026e4:	4461      	add	r1, ip
 80026e6:	4689      	mov	r9, r1
 80026e8:	425b      	negs	r3, r3
 80026ea:	4499      	add	r9, r3
 80026ec:	464b      	mov	r3, r9
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	d400      	bmi.n	80026f4 <__aeabi_dsub+0x678>
 80026f2:	e631      	b.n	8002358 <__aeabi_dsub+0x2dc>
 80026f4:	464a      	mov	r2, r9
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <__aeabi_dsub+0x6d8>)
 80026f8:	401a      	ands	r2, r3
 80026fa:	2301      	movs	r3, #1
 80026fc:	4691      	mov	r9, r2
 80026fe:	4698      	mov	r8, r3
 8002700:	e62a      	b.n	8002358 <__aeabi_dsub+0x2dc>
 8002702:	0016      	movs	r6, r2
 8002704:	4664      	mov	r4, ip
 8002706:	3e20      	subs	r6, #32
 8002708:	40f4      	lsrs	r4, r6
 800270a:	46a0      	mov	r8, r4
 800270c:	2a20      	cmp	r2, #32
 800270e:	d005      	beq.n	800271c <__aeabi_dsub+0x6a0>
 8002710:	2640      	movs	r6, #64	; 0x40
 8002712:	4664      	mov	r4, ip
 8002714:	1ab2      	subs	r2, r6, r2
 8002716:	4094      	lsls	r4, r2
 8002718:	4323      	orrs	r3, r4
 800271a:	469a      	mov	sl, r3
 800271c:	4654      	mov	r4, sl
 800271e:	1e63      	subs	r3, r4, #1
 8002720:	419c      	sbcs	r4, r3
 8002722:	4643      	mov	r3, r8
 8002724:	431c      	orrs	r4, r3
 8002726:	e5db      	b.n	80022e0 <__aeabi_dsub+0x264>
 8002728:	0002      	movs	r2, r0
 800272a:	2400      	movs	r4, #0
 800272c:	2300      	movs	r3, #0
 800272e:	e548      	b.n	80021c2 <__aeabi_dsub+0x146>
 8002730:	19dc      	adds	r4, r3, r7
 8002732:	42bc      	cmp	r4, r7
 8002734:	41bf      	sbcs	r7, r7
 8002736:	4461      	add	r1, ip
 8002738:	4689      	mov	r9, r1
 800273a:	427f      	negs	r7, r7
 800273c:	44b9      	add	r9, r7
 800273e:	e738      	b.n	80025b2 <__aeabi_dsub+0x536>
 8002740:	464b      	mov	r3, r9
 8002742:	4323      	orrs	r3, r4
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x6cc>
 8002746:	e69f      	b.n	8002488 <__aeabi_dsub+0x40c>
 8002748:	e606      	b.n	8002358 <__aeabi_dsub+0x2dc>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	000007fe 	.word	0x000007fe
 8002750:	000007ff 	.word	0x000007ff
 8002754:	ff7fffff 	.word	0xff7fffff
 8002758:	08ff      	lsrs	r7, r7, #3
 800275a:	074b      	lsls	r3, r1, #29
 800275c:	433b      	orrs	r3, r7
 800275e:	08cc      	lsrs	r4, r1, #3
 8002760:	e616      	b.n	8002390 <__aeabi_dsub+0x314>
 8002762:	4662      	mov	r2, ip
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	0752      	lsls	r2, r2, #29
 8002768:	4313      	orrs	r3, r2
 800276a:	4662      	mov	r2, ip
 800276c:	08d4      	lsrs	r4, r2, #3
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	0312      	lsls	r2, r2, #12
 8002772:	4214      	tst	r4, r2
 8002774:	d007      	beq.n	8002786 <__aeabi_dsub+0x70a>
 8002776:	08c8      	lsrs	r0, r1, #3
 8002778:	4210      	tst	r0, r2
 800277a:	d104      	bne.n	8002786 <__aeabi_dsub+0x70a>
 800277c:	465d      	mov	r5, fp
 800277e:	0004      	movs	r4, r0
 8002780:	08fb      	lsrs	r3, r7, #3
 8002782:	0749      	lsls	r1, r1, #29
 8002784:	430b      	orrs	r3, r1
 8002786:	0f5a      	lsrs	r2, r3, #29
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	0752      	lsls	r2, r2, #29
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	4313      	orrs	r3, r2
 8002790:	e5fe      	b.n	8002390 <__aeabi_dsub+0x314>
 8002792:	2300      	movs	r3, #0
 8002794:	4a01      	ldr	r2, [pc, #4]	; (800279c <__aeabi_dsub+0x720>)
 8002796:	001c      	movs	r4, r3
 8002798:	e513      	b.n	80021c2 <__aeabi_dsub+0x146>
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	000007ff 	.word	0x000007ff

080027a0 <__aeabi_dcmpun>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	0005      	movs	r5, r0
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <__aeabi_dcmpun+0x38>)
 80027a6:	031c      	lsls	r4, r3, #12
 80027a8:	0016      	movs	r6, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	030a      	lsls	r2, r1, #12
 80027ae:	0049      	lsls	r1, r1, #1
 80027b0:	0b12      	lsrs	r2, r2, #12
 80027b2:	0d49      	lsrs	r1, r1, #21
 80027b4:	0b24      	lsrs	r4, r4, #12
 80027b6:	0d5b      	lsrs	r3, r3, #21
 80027b8:	4281      	cmp	r1, r0
 80027ba:	d008      	beq.n	80027ce <__aeabi_dcmpun+0x2e>
 80027bc:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <__aeabi_dcmpun+0x38>)
 80027be:	2000      	movs	r0, #0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <__aeabi_dcmpun+0x2c>
 80027c4:	0020      	movs	r0, r4
 80027c6:	4330      	orrs	r0, r6
 80027c8:	1e43      	subs	r3, r0, #1
 80027ca:	4198      	sbcs	r0, r3
 80027cc:	bd70      	pop	{r4, r5, r6, pc}
 80027ce:	2001      	movs	r0, #1
 80027d0:	432a      	orrs	r2, r5
 80027d2:	d1fb      	bne.n	80027cc <__aeabi_dcmpun+0x2c>
 80027d4:	e7f2      	b.n	80027bc <__aeabi_dcmpun+0x1c>
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	000007ff 	.word	0x000007ff

080027dc <__aeabi_d2iz>:
 80027dc:	000a      	movs	r2, r1
 80027de:	b530      	push	{r4, r5, lr}
 80027e0:	4c13      	ldr	r4, [pc, #76]	; (8002830 <__aeabi_d2iz+0x54>)
 80027e2:	0053      	lsls	r3, r2, #1
 80027e4:	0309      	lsls	r1, r1, #12
 80027e6:	0005      	movs	r5, r0
 80027e8:	0b09      	lsrs	r1, r1, #12
 80027ea:	2000      	movs	r0, #0
 80027ec:	0d5b      	lsrs	r3, r3, #21
 80027ee:	0fd2      	lsrs	r2, r2, #31
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	dd04      	ble.n	80027fe <__aeabi_d2iz+0x22>
 80027f4:	480f      	ldr	r0, [pc, #60]	; (8002834 <__aeabi_d2iz+0x58>)
 80027f6:	4283      	cmp	r3, r0
 80027f8:	dd02      	ble.n	8002800 <__aeabi_d2iz+0x24>
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <__aeabi_d2iz+0x5c>)
 80027fc:	18d0      	adds	r0, r2, r3
 80027fe:	bd30      	pop	{r4, r5, pc}
 8002800:	2080      	movs	r0, #128	; 0x80
 8002802:	0340      	lsls	r0, r0, #13
 8002804:	4301      	orrs	r1, r0
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <__aeabi_d2iz+0x60>)
 8002808:	1ac0      	subs	r0, r0, r3
 800280a:	281f      	cmp	r0, #31
 800280c:	dd08      	ble.n	8002820 <__aeabi_d2iz+0x44>
 800280e:	480c      	ldr	r0, [pc, #48]	; (8002840 <__aeabi_d2iz+0x64>)
 8002810:	1ac3      	subs	r3, r0, r3
 8002812:	40d9      	lsrs	r1, r3
 8002814:	000b      	movs	r3, r1
 8002816:	4258      	negs	r0, r3
 8002818:	2a00      	cmp	r2, #0
 800281a:	d1f0      	bne.n	80027fe <__aeabi_d2iz+0x22>
 800281c:	0018      	movs	r0, r3
 800281e:	e7ee      	b.n	80027fe <__aeabi_d2iz+0x22>
 8002820:	4c08      	ldr	r4, [pc, #32]	; (8002844 <__aeabi_d2iz+0x68>)
 8002822:	40c5      	lsrs	r5, r0
 8002824:	46a4      	mov	ip, r4
 8002826:	4463      	add	r3, ip
 8002828:	4099      	lsls	r1, r3
 800282a:	000b      	movs	r3, r1
 800282c:	432b      	orrs	r3, r5
 800282e:	e7f2      	b.n	8002816 <__aeabi_d2iz+0x3a>
 8002830:	000003fe 	.word	0x000003fe
 8002834:	0000041d 	.word	0x0000041d
 8002838:	7fffffff 	.word	0x7fffffff
 800283c:	00000433 	.word	0x00000433
 8002840:	00000413 	.word	0x00000413
 8002844:	fffffbed 	.word	0xfffffbed

08002848 <__aeabi_i2d>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	2800      	cmp	r0, #0
 800284c:	d016      	beq.n	800287c <__aeabi_i2d+0x34>
 800284e:	17c3      	asrs	r3, r0, #31
 8002850:	18c5      	adds	r5, r0, r3
 8002852:	405d      	eors	r5, r3
 8002854:	0fc4      	lsrs	r4, r0, #31
 8002856:	0028      	movs	r0, r5
 8002858:	f000 f91c 	bl	8002a94 <__clzsi2>
 800285c:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <__aeabi_i2d+0x5c>)
 800285e:	1a12      	subs	r2, r2, r0
 8002860:	280a      	cmp	r0, #10
 8002862:	dc16      	bgt.n	8002892 <__aeabi_i2d+0x4a>
 8002864:	0003      	movs	r3, r0
 8002866:	002e      	movs	r6, r5
 8002868:	3315      	adds	r3, #21
 800286a:	409e      	lsls	r6, r3
 800286c:	230b      	movs	r3, #11
 800286e:	1a18      	subs	r0, r3, r0
 8002870:	40c5      	lsrs	r5, r0
 8002872:	0552      	lsls	r2, r2, #21
 8002874:	032d      	lsls	r5, r5, #12
 8002876:	0b2d      	lsrs	r5, r5, #12
 8002878:	0d53      	lsrs	r3, r2, #21
 800287a:	e003      	b.n	8002884 <__aeabi_i2d+0x3c>
 800287c:	2400      	movs	r4, #0
 800287e:	2300      	movs	r3, #0
 8002880:	2500      	movs	r5, #0
 8002882:	2600      	movs	r6, #0
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	432b      	orrs	r3, r5
 8002888:	07e4      	lsls	r4, r4, #31
 800288a:	4323      	orrs	r3, r4
 800288c:	0030      	movs	r0, r6
 800288e:	0019      	movs	r1, r3
 8002890:	bd70      	pop	{r4, r5, r6, pc}
 8002892:	380b      	subs	r0, #11
 8002894:	4085      	lsls	r5, r0
 8002896:	0552      	lsls	r2, r2, #21
 8002898:	032d      	lsls	r5, r5, #12
 800289a:	2600      	movs	r6, #0
 800289c:	0b2d      	lsrs	r5, r5, #12
 800289e:	0d53      	lsrs	r3, r2, #21
 80028a0:	e7f0      	b.n	8002884 <__aeabi_i2d+0x3c>
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	0000041e 	.word	0x0000041e

080028a8 <__aeabi_ui2d>:
 80028a8:	b510      	push	{r4, lr}
 80028aa:	1e04      	subs	r4, r0, #0
 80028ac:	d010      	beq.n	80028d0 <__aeabi_ui2d+0x28>
 80028ae:	f000 f8f1 	bl	8002a94 <__clzsi2>
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <__aeabi_ui2d+0x48>)
 80028b4:	1a1b      	subs	r3, r3, r0
 80028b6:	280a      	cmp	r0, #10
 80028b8:	dc11      	bgt.n	80028de <__aeabi_ui2d+0x36>
 80028ba:	220b      	movs	r2, #11
 80028bc:	0021      	movs	r1, r4
 80028be:	1a12      	subs	r2, r2, r0
 80028c0:	40d1      	lsrs	r1, r2
 80028c2:	3015      	adds	r0, #21
 80028c4:	030a      	lsls	r2, r1, #12
 80028c6:	055b      	lsls	r3, r3, #21
 80028c8:	4084      	lsls	r4, r0
 80028ca:	0b12      	lsrs	r2, r2, #12
 80028cc:	0d5b      	lsrs	r3, r3, #21
 80028ce:	e001      	b.n	80028d4 <__aeabi_ui2d+0x2c>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2200      	movs	r2, #0
 80028d4:	051b      	lsls	r3, r3, #20
 80028d6:	4313      	orrs	r3, r2
 80028d8:	0020      	movs	r0, r4
 80028da:	0019      	movs	r1, r3
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	0022      	movs	r2, r4
 80028e0:	380b      	subs	r0, #11
 80028e2:	4082      	lsls	r2, r0
 80028e4:	055b      	lsls	r3, r3, #21
 80028e6:	0312      	lsls	r2, r2, #12
 80028e8:	2400      	movs	r4, #0
 80028ea:	0b12      	lsrs	r2, r2, #12
 80028ec:	0d5b      	lsrs	r3, r3, #21
 80028ee:	e7f1      	b.n	80028d4 <__aeabi_ui2d+0x2c>
 80028f0:	0000041e 	.word	0x0000041e

080028f4 <__aeabi_f2d>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	0043      	lsls	r3, r0, #1
 80028f8:	0246      	lsls	r6, r0, #9
 80028fa:	0fc4      	lsrs	r4, r0, #31
 80028fc:	20fe      	movs	r0, #254	; 0xfe
 80028fe:	0e1b      	lsrs	r3, r3, #24
 8002900:	1c59      	adds	r1, r3, #1
 8002902:	0a75      	lsrs	r5, r6, #9
 8002904:	4208      	tst	r0, r1
 8002906:	d00c      	beq.n	8002922 <__aeabi_f2d+0x2e>
 8002908:	22e0      	movs	r2, #224	; 0xe0
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	4694      	mov	ip, r2
 800290e:	076d      	lsls	r5, r5, #29
 8002910:	0b36      	lsrs	r6, r6, #12
 8002912:	4463      	add	r3, ip
 8002914:	051b      	lsls	r3, r3, #20
 8002916:	4333      	orrs	r3, r6
 8002918:	07e4      	lsls	r4, r4, #31
 800291a:	4323      	orrs	r3, r4
 800291c:	0028      	movs	r0, r5
 800291e:	0019      	movs	r1, r3
 8002920:	bd70      	pop	{r4, r5, r6, pc}
 8002922:	2b00      	cmp	r3, #0
 8002924:	d114      	bne.n	8002950 <__aeabi_f2d+0x5c>
 8002926:	2d00      	cmp	r5, #0
 8002928:	d01b      	beq.n	8002962 <__aeabi_f2d+0x6e>
 800292a:	0028      	movs	r0, r5
 800292c:	f000 f8b2 	bl	8002a94 <__clzsi2>
 8002930:	280a      	cmp	r0, #10
 8002932:	dc1c      	bgt.n	800296e <__aeabi_f2d+0x7a>
 8002934:	230b      	movs	r3, #11
 8002936:	002e      	movs	r6, r5
 8002938:	1a1b      	subs	r3, r3, r0
 800293a:	40de      	lsrs	r6, r3
 800293c:	0003      	movs	r3, r0
 800293e:	3315      	adds	r3, #21
 8002940:	409d      	lsls	r5, r3
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <__aeabi_f2d+0x88>)
 8002944:	0336      	lsls	r6, r6, #12
 8002946:	1a12      	subs	r2, r2, r0
 8002948:	0552      	lsls	r2, r2, #21
 800294a:	0b36      	lsrs	r6, r6, #12
 800294c:	0d53      	lsrs	r3, r2, #21
 800294e:	e7e1      	b.n	8002914 <__aeabi_f2d+0x20>
 8002950:	2d00      	cmp	r5, #0
 8002952:	d009      	beq.n	8002968 <__aeabi_f2d+0x74>
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	0b36      	lsrs	r6, r6, #12
 8002958:	0312      	lsls	r2, r2, #12
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <__aeabi_f2d+0x8c>)
 800295c:	076d      	lsls	r5, r5, #29
 800295e:	4316      	orrs	r6, r2
 8002960:	e7d8      	b.n	8002914 <__aeabi_f2d+0x20>
 8002962:	2300      	movs	r3, #0
 8002964:	2600      	movs	r6, #0
 8002966:	e7d5      	b.n	8002914 <__aeabi_f2d+0x20>
 8002968:	2600      	movs	r6, #0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <__aeabi_f2d+0x8c>)
 800296c:	e7d2      	b.n	8002914 <__aeabi_f2d+0x20>
 800296e:	0003      	movs	r3, r0
 8002970:	3b0b      	subs	r3, #11
 8002972:	409d      	lsls	r5, r3
 8002974:	002e      	movs	r6, r5
 8002976:	2500      	movs	r5, #0
 8002978:	e7e3      	b.n	8002942 <__aeabi_f2d+0x4e>
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	00000389 	.word	0x00000389
 8002980:	000007ff 	.word	0x000007ff

08002984 <__aeabi_d2f>:
 8002984:	0002      	movs	r2, r0
 8002986:	004b      	lsls	r3, r1, #1
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	0d5b      	lsrs	r3, r3, #21
 800298c:	030c      	lsls	r4, r1, #12
 800298e:	4e3d      	ldr	r6, [pc, #244]	; (8002a84 <__aeabi_d2f+0x100>)
 8002990:	0a64      	lsrs	r4, r4, #9
 8002992:	0f40      	lsrs	r0, r0, #29
 8002994:	1c5f      	adds	r7, r3, #1
 8002996:	0fc9      	lsrs	r1, r1, #31
 8002998:	4304      	orrs	r4, r0
 800299a:	00d5      	lsls	r5, r2, #3
 800299c:	4237      	tst	r7, r6
 800299e:	d00a      	beq.n	80029b6 <__aeabi_d2f+0x32>
 80029a0:	4839      	ldr	r0, [pc, #228]	; (8002a88 <__aeabi_d2f+0x104>)
 80029a2:	181e      	adds	r6, r3, r0
 80029a4:	2efe      	cmp	r6, #254	; 0xfe
 80029a6:	dd16      	ble.n	80029d6 <__aeabi_d2f+0x52>
 80029a8:	20ff      	movs	r0, #255	; 0xff
 80029aa:	2400      	movs	r4, #0
 80029ac:	05c0      	lsls	r0, r0, #23
 80029ae:	4320      	orrs	r0, r4
 80029b0:	07c9      	lsls	r1, r1, #31
 80029b2:	4308      	orrs	r0, r1
 80029b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <__aeabi_d2f+0x44>
 80029ba:	432c      	orrs	r4, r5
 80029bc:	d026      	beq.n	8002a0c <__aeabi_d2f+0x88>
 80029be:	2205      	movs	r2, #5
 80029c0:	0192      	lsls	r2, r2, #6
 80029c2:	0a54      	lsrs	r4, r2, #9
 80029c4:	b2d8      	uxtb	r0, r3
 80029c6:	e7f1      	b.n	80029ac <__aeabi_d2f+0x28>
 80029c8:	4325      	orrs	r5, r4
 80029ca:	d0ed      	beq.n	80029a8 <__aeabi_d2f+0x24>
 80029cc:	2080      	movs	r0, #128	; 0x80
 80029ce:	03c0      	lsls	r0, r0, #15
 80029d0:	4304      	orrs	r4, r0
 80029d2:	20ff      	movs	r0, #255	; 0xff
 80029d4:	e7ea      	b.n	80029ac <__aeabi_d2f+0x28>
 80029d6:	2e00      	cmp	r6, #0
 80029d8:	dd1b      	ble.n	8002a12 <__aeabi_d2f+0x8e>
 80029da:	0192      	lsls	r2, r2, #6
 80029dc:	1e53      	subs	r3, r2, #1
 80029de:	419a      	sbcs	r2, r3
 80029e0:	00e4      	lsls	r4, r4, #3
 80029e2:	0f6d      	lsrs	r5, r5, #29
 80029e4:	4322      	orrs	r2, r4
 80029e6:	432a      	orrs	r2, r5
 80029e8:	0753      	lsls	r3, r2, #29
 80029ea:	d048      	beq.n	8002a7e <__aeabi_d2f+0xfa>
 80029ec:	230f      	movs	r3, #15
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d000      	beq.n	80029f6 <__aeabi_d2f+0x72>
 80029f4:	3204      	adds	r2, #4
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	04db      	lsls	r3, r3, #19
 80029fa:	4013      	ands	r3, r2
 80029fc:	d03f      	beq.n	8002a7e <__aeabi_d2f+0xfa>
 80029fe:	1c70      	adds	r0, r6, #1
 8002a00:	2efe      	cmp	r6, #254	; 0xfe
 8002a02:	d0d1      	beq.n	80029a8 <__aeabi_d2f+0x24>
 8002a04:	0192      	lsls	r2, r2, #6
 8002a06:	0a54      	lsrs	r4, r2, #9
 8002a08:	b2c0      	uxtb	r0, r0
 8002a0a:	e7cf      	b.n	80029ac <__aeabi_d2f+0x28>
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	2400      	movs	r4, #0
 8002a10:	e7cc      	b.n	80029ac <__aeabi_d2f+0x28>
 8002a12:	0032      	movs	r2, r6
 8002a14:	3217      	adds	r2, #23
 8002a16:	db22      	blt.n	8002a5e <__aeabi_d2f+0xda>
 8002a18:	2080      	movs	r0, #128	; 0x80
 8002a1a:	0400      	lsls	r0, r0, #16
 8002a1c:	4320      	orrs	r0, r4
 8002a1e:	241e      	movs	r4, #30
 8002a20:	1ba4      	subs	r4, r4, r6
 8002a22:	2c1f      	cmp	r4, #31
 8002a24:	dd1d      	ble.n	8002a62 <__aeabi_d2f+0xde>
 8002a26:	2202      	movs	r2, #2
 8002a28:	4252      	negs	r2, r2
 8002a2a:	1b96      	subs	r6, r2, r6
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	40f2      	lsrs	r2, r6
 8002a30:	0016      	movs	r6, r2
 8002a32:	2c20      	cmp	r4, #32
 8002a34:	d004      	beq.n	8002a40 <__aeabi_d2f+0xbc>
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <__aeabi_d2f+0x108>)
 8002a38:	4694      	mov	ip, r2
 8002a3a:	4463      	add	r3, ip
 8002a3c:	4098      	lsls	r0, r3
 8002a3e:	4305      	orrs	r5, r0
 8002a40:	002a      	movs	r2, r5
 8002a42:	1e53      	subs	r3, r2, #1
 8002a44:	419a      	sbcs	r2, r3
 8002a46:	4332      	orrs	r2, r6
 8002a48:	2600      	movs	r6, #0
 8002a4a:	0753      	lsls	r3, r2, #29
 8002a4c:	d1ce      	bne.n	80029ec <__aeabi_d2f+0x68>
 8002a4e:	2480      	movs	r4, #128	; 0x80
 8002a50:	0013      	movs	r3, r2
 8002a52:	04e4      	lsls	r4, r4, #19
 8002a54:	2001      	movs	r0, #1
 8002a56:	4023      	ands	r3, r4
 8002a58:	4222      	tst	r2, r4
 8002a5a:	d1d3      	bne.n	8002a04 <__aeabi_d2f+0x80>
 8002a5c:	e7b0      	b.n	80029c0 <__aeabi_d2f+0x3c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e7ad      	b.n	80029be <__aeabi_d2f+0x3a>
 8002a62:	4a0b      	ldr	r2, [pc, #44]	; (8002a90 <__aeabi_d2f+0x10c>)
 8002a64:	4694      	mov	ip, r2
 8002a66:	002a      	movs	r2, r5
 8002a68:	40e2      	lsrs	r2, r4
 8002a6a:	0014      	movs	r4, r2
 8002a6c:	002a      	movs	r2, r5
 8002a6e:	4463      	add	r3, ip
 8002a70:	409a      	lsls	r2, r3
 8002a72:	4098      	lsls	r0, r3
 8002a74:	1e55      	subs	r5, r2, #1
 8002a76:	41aa      	sbcs	r2, r5
 8002a78:	4302      	orrs	r2, r0
 8002a7a:	4322      	orrs	r2, r4
 8002a7c:	e7e4      	b.n	8002a48 <__aeabi_d2f+0xc4>
 8002a7e:	0033      	movs	r3, r6
 8002a80:	e79e      	b.n	80029c0 <__aeabi_d2f+0x3c>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	000007fe 	.word	0x000007fe
 8002a88:	fffffc80 	.word	0xfffffc80
 8002a8c:	fffffca2 	.word	0xfffffca2
 8002a90:	fffffc82 	.word	0xfffffc82

08002a94 <__clzsi2>:
 8002a94:	211c      	movs	r1, #28
 8002a96:	2301      	movs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	4298      	cmp	r0, r3
 8002a9c:	d301      	bcc.n	8002aa2 <__clzsi2+0xe>
 8002a9e:	0c00      	lsrs	r0, r0, #16
 8002aa0:	3910      	subs	r1, #16
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d301      	bcc.n	8002aac <__clzsi2+0x18>
 8002aa8:	0a00      	lsrs	r0, r0, #8
 8002aaa:	3908      	subs	r1, #8
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	4298      	cmp	r0, r3
 8002ab0:	d301      	bcc.n	8002ab6 <__clzsi2+0x22>
 8002ab2:	0900      	lsrs	r0, r0, #4
 8002ab4:	3904      	subs	r1, #4
 8002ab6:	a202      	add	r2, pc, #8	; (adr r2, 8002ac0 <__clzsi2+0x2c>)
 8002ab8:	5c10      	ldrb	r0, [r2, r0]
 8002aba:	1840      	adds	r0, r0, r1
 8002abc:	4770      	bx	lr
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	02020304 	.word	0x02020304
 8002ac4:	01010101 	.word	0x01010101
	...

08002ad0 <__clzdi2>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d103      	bne.n	8002ade <__clzdi2+0xe>
 8002ad6:	f7ff ffdd 	bl	8002a94 <__clzsi2>
 8002ada:	3020      	adds	r0, #32
 8002adc:	e002      	b.n	8002ae4 <__clzdi2+0x14>
 8002ade:	0008      	movs	r0, r1
 8002ae0:	f7ff ffd8 	bl	8002a94 <__clzsi2>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)

08002ae8 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8002af0:	230e      	movs	r3, #14
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2205      	movs	r2, #5
 8002af6:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = BME280_CHIP_ID;
 8002af8:	230d      	movs	r3, #13
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2260      	movs	r2, #96	; 0x60
 8002afe:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002b00:	250f      	movs	r5, #15
 8002b02:	197c      	adds	r4, r7, r5
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f001 fb03 	bl	8004112 <null_ptr_check>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002b10:	197b      	adds	r3, r7, r5
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d141      	bne.n	8002b9e <bme280_init+0xb6>
    {
        while (try_count)
 8002b1a:	e030      	b.n	8002b7e <bme280_init+0x96>
        {
            /* Read the chip-id of bme280 sensor */


            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8002b1c:	210f      	movs	r1, #15
 8002b1e:	187b      	adds	r3, r7, r1
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11d      	bne.n	8002b64 <bme280_init+0x7c>
 8002b28:	220d      	movs	r2, #13
 8002b2a:	18bb      	adds	r3, r7, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b60      	cmp	r3, #96	; 0x60
 8002b30:	d118      	bne.n	8002b64 <bme280_init+0x7c>
            {
                dev->chip_id = chip_id;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	18ba      	adds	r2, r7, r2
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8002b3a:	000d      	movs	r5, r1
 8002b3c:	187c      	adds	r4, r7, r1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 fa02 	bl	8002f4a <bme280_soft_reset>
 8002b46:	0003      	movs	r3, r0
 8002b48:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8002b4a:	197b      	adds	r3, r7, r5
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	b25b      	sxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11a      	bne.n	8002b8a <bme280_init+0xa2>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002b54:	197c      	adds	r4, r7, r5
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f001 f92d 	bl	8003db8 <get_calib_data>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	7023      	strb	r3, [r4, #0]
                }

                break;
 8002b62:	e012      	b.n	8002b8a <bme280_init+0xa2>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1, dev->intf_ptr);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695a      	ldr	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	2001      	movs	r0, #1
 8002b70:	4790      	blx	r2
            --try_count;
 8002b72:	220e      	movs	r2, #14
 8002b74:	18bb      	adds	r3, r7, r2
 8002b76:	18ba      	adds	r2, r7, r2
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8002b7e:	230e      	movs	r3, #14
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1c9      	bne.n	8002b1c <bme280_init+0x34>
 8002b88:	e000      	b.n	8002b8c <bme280_init+0xa4>
                break;
 8002b8a:	46c0      	nop			; (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8002b8c:	230e      	movs	r3, #14
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <bme280_init+0xb6>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8002b96:	230f      	movs	r3, #15
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	22fe      	movs	r2, #254	; 0xfe
 8002b9c:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8002b9e:	230f      	movs	r3, #15
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b25b      	sxtb	r3, r3
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b004      	add	sp, #16
 8002bac:	bdb0      	pop	{r4, r5, r7, pc}

08002bae <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8002bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	250f      	movs	r5, #15
 8002bbc:	197b      	adds	r3, r7, r5
 8002bbe:	1c02      	adds	r2, r0, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	1c0a      	adds	r2, r1, #0
 8002bc8:	801a      	strh	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002bca:	2617      	movs	r6, #23
 8002bcc:	19bc      	adds	r4, r7, r6
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f001 fa9e 	bl	8004112 <null_ptr_check>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8002bda:	19bb      	adds	r3, r7, r6
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d129      	bne.n	8002c38 <bme280_get_regs+0x8a>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d026      	beq.n	8002c38 <bme280_get_regs+0x8a>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7a1b      	ldrb	r3, [r3, #8]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d006      	beq.n	8002c00 <bme280_get_regs+0x52>
        {
            reg_addr = reg_addr | 0x80;
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	197a      	adds	r2, r7, r5
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	4249      	negs	r1, r1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	701a      	strb	r2, [r3, #0]
        }

        /* Read the data  */
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68dc      	ldr	r4, [r3, #12]
 8002c04:	230c      	movs	r3, #12
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685d      	ldr	r5, [r3, #4]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	230f      	movs	r3, #15
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	7818      	ldrb	r0, [r3, #0]
 8002c16:	002b      	movs	r3, r5
 8002c18:	47a0      	blx	r4
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2245      	movs	r2, #69	; 0x45
 8002c22:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2245      	movs	r2, #69	; 0x45
 8002c28:	569b      	ldrsb	r3, [r3, r2]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <bme280_get_regs+0x92>
        {
            rslt = BME280_E_COMM_FAIL;
 8002c2e:	2317      	movs	r3, #23
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	22fc      	movs	r2, #252	; 0xfc
 8002c34:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002c36:	e003      	b.n	8002c40 <bme280_get_regs+0x92>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002c38:	2317      	movs	r3, #23
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002c40:	2317      	movs	r3, #23
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b25b      	sxtb	r3, r3
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b007      	add	sp, #28
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c50 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b0a      	cmp	r3, #10
 8002c66:	d902      	bls.n	8002c6e <bme280_set_regs+0x1e>
    {
        len = 10;
 8002c68:	1dfb      	adds	r3, r7, #7
 8002c6a:	220a      	movs	r2, #10
 8002c6c:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002c6e:	252f      	movs	r5, #47	; 0x2f
 8002c70:	197c      	adds	r4, r7, r5
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fa4c 	bl	8004112 <null_ptr_check>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8002c7e:	197b      	adds	r3, r7, r5
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b25b      	sxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d000      	beq.n	8002c8a <bme280_set_regs+0x3a>
 8002c88:	e06c      	b.n	8002d64 <bme280_set_regs+0x114>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d069      	beq.n	8002d64 <bme280_set_regs+0x114>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d066      	beq.n	8002d64 <bme280_set_regs+0x114>
    {
        if (len != 0)
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d05d      	beq.n	8002d5a <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	2314      	movs	r3, #20
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7a1b      	ldrb	r3, [r3, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d01e      	beq.n	8002cee <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002cb0:	232b      	movs	r3, #43	; 0x2b
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e012      	b.n	8002ce0 <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8002cba:	202b      	movs	r0, #43	; 0x2b
 8002cbc:	183b      	adds	r3, r7, r0
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	18d3      	adds	r3, r2, r3
 8002cc4:	781a      	ldrb	r2, [r3, #0]
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	18cb      	adds	r3, r1, r3
 8002cce:	217f      	movs	r1, #127	; 0x7f
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	183b      	adds	r3, r7, r0
 8002cdc:	3201      	adds	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]
 8002ce0:	232b      	movs	r3, #43	; 0x2b
 8002ce2:	18fa      	adds	r2, r7, r3
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d3e5      	bcc.n	8002cba <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d911      	bls.n	8002d1a <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	2114      	movs	r1, #20
 8002cfe:	1879      	adds	r1, r7, r1
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f001 f8a5 	bl	8003e50 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	18db      	adds	r3, r3, r3
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	232c      	movs	r3, #44	; 0x2c
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	3a01      	subs	r2, #1
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	e004      	b.n	8002d24 <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8002d1a:	232c      	movs	r3, #44	; 0x2c
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	1dfa      	adds	r2, r7, #7
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691c      	ldr	r4, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7818      	ldrb	r0, [r3, #0]
 8002d2c:	232c      	movs	r3, #44	; 0x2c
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2114      	movs	r1, #20
 8002d38:	1879      	adds	r1, r7, r1
 8002d3a:	47a0      	blx	r4
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	0019      	movs	r1, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2245      	movs	r2, #69	; 0x45
 8002d44:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2245      	movs	r2, #69	; 0x45
 8002d4a:	569b      	ldrsb	r3, [r3, r2]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8002d50:	232f      	movs	r3, #47	; 0x2f
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	22fc      	movs	r2, #252	; 0xfc
 8002d56:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8002d58:	e009      	b.n	8002d6e <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8002d5a:	232f      	movs	r3, #47	; 0x2f
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	22fd      	movs	r2, #253	; 0xfd
 8002d60:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8002d62:	e004      	b.n	8002d6e <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002d64:	232f      	movs	r3, #47	; 0x2f
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e000      	b.n	8002d70 <bme280_set_regs+0x120>
        if (len != 0)
 8002d6e:	46c0      	nop			; (mov r8, r8)
    }

    return rslt;
 8002d70:	232f      	movs	r3, #47	; 0x2f
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b25b      	sxtb	r3, r3
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b00c      	add	sp, #48	; 0x30
 8002d7e:	bdb0      	pop	{r4, r5, r7, pc}

08002d80 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8002d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	0002      	movs	r2, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	1dfb      	adds	r3, r7, #7
 8002d8c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002d8e:	250f      	movs	r5, #15
 8002d90:	197c      	adds	r4, r7, r5
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f001 f9bc 	bl	8004112 <null_ptr_check>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002d9e:	197b      	adds	r3, r7, r5
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b25b      	sxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d14e      	bne.n	8002e46 <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8002da8:	197c      	adds	r4, r7, r5
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	260e      	movs	r6, #14
 8002dae:	19bb      	adds	r3, r7, r6
 8002db0:	0011      	movs	r1, r2
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 f896 	bl	8002ee4 <bme280_get_sensor_mode>
 8002db8:	0003      	movs	r3, r0
 8002dba:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8002dbc:	002a      	movs	r2, r5
 8002dbe:	18bb      	adds	r3, r7, r2
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <bme280_set_sensor_settings+0x5e>
 8002dc8:	19bb      	adds	r3, r7, r6
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d006      	beq.n	8002dde <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8002dd0:	18bc      	adds	r4, r7, r2
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fc0b 	bl	80035f0 <put_device_to_sleep>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8002dde:	240f      	movs	r4, #15
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12d      	bne.n	8002e46 <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	0019      	movs	r1, r3
 8002df0:	2007      	movs	r0, #7
 8002df2:	f001 f96a 	bl	80040ca <are_settings_changed>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d00b      	beq.n	8002e12 <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	0019      	movs	r1, r3
 8002e00:	193c      	adds	r4, r7, r4
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fa08 	bl	800321e <set_osr_settings>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8002e12:	240f      	movs	r4, #15
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <bme280_set_sensor_settings+0xc6>
 8002e1e:	1dfb      	adds	r3, r7, #7
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	0019      	movs	r1, r3
 8002e24:	2018      	movs	r0, #24
 8002e26:	f001 f950 	bl	80040ca <are_settings_changed>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d00b      	beq.n	8002e46 <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	0019      	movs	r1, r3
 8002e34:	193c      	adds	r4, r7, r4
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fab4 	bl	80033aa <set_filter_standby_settings>
 8002e42:	0003      	movs	r3, r0
 8002e44:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8002e46:	230f      	movs	r3, #15
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b25b      	sxtb	r3, r3
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b005      	add	sp, #20
 8002e54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e56 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8002e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	6039      	str	r1, [r7, #0]
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002e64:	250f      	movs	r5, #15
 8002e66:	197c      	adds	r4, r7, r5
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 f951 	bl	8004112 <null_ptr_check>
 8002e70:	0003      	movs	r3, r0
 8002e72:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8002e74:	197b      	adds	r3, r7, r5
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d12a      	bne.n	8002ed4 <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8002e7e:	197c      	adds	r4, r7, r5
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	260e      	movs	r6, #14
 8002e84:	19bb      	adds	r3, r7, r6
 8002e86:	0011      	movs	r1, r2
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f82b 	bl	8002ee4 <bme280_get_sensor_mode>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8002e92:	002a      	movs	r2, r5
 8002e94:	18bb      	adds	r3, r7, r2
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b25b      	sxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <bme280_set_sensor_mode+0x5e>
 8002e9e:	19bb      	adds	r3, r7, r6
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8002ea6:	18bc      	adds	r4, r7, r2
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fba0 	bl	80035f0 <put_device_to_sleep>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	18bb      	adds	r3, r7, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8002ec0:	18bc      	adds	r4, r7, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fb50 	bl	8003570 <write_power_mode>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b25b      	sxtb	r3, r3
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b005      	add	sp, #20
 8002ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ee4 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8002ee4:	b5b0      	push	{r4, r5, r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002eee:	250f      	movs	r5, #15
 8002ef0:	197c      	adds	r4, r7, r5
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f001 f90c 	bl	8004112 <null_ptr_check>
 8002efa:	0003      	movs	r3, r0
 8002efc:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8002efe:	002a      	movs	r2, r5
 8002f00:	18bb      	adds	r3, r7, r2
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <bme280_get_sensor_mode+0x4e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d010      	beq.n	8002f32 <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8002f10:	18bc      	adds	r4, r7, r2
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	20f4      	movs	r0, #244	; 0xf4
 8002f1a:	f7ff fe48 	bl	8002bae <bme280_get_regs>
 8002f1e:	0003      	movs	r3, r0
 8002f20:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2203      	movs	r2, #3
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e003      	b.n	8002f3a <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8002f32:	230f      	movs	r3, #15
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b25b      	sxtb	r3, r3
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}

08002f4a <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8002f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8002f52:	260d      	movs	r6, #13
 8002f54:	19bb      	adds	r3, r7, r6
 8002f56:	22e0      	movs	r2, #224	; 0xe0
 8002f58:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8002f62:	230e      	movs	r3, #14
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2205      	movs	r2, #5
 8002f68:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8002f6a:	230b      	movs	r3, #11
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	22b6      	movs	r2, #182	; 0xb6
 8002f70:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002f72:	250f      	movs	r5, #15
 8002f74:	197c      	adds	r4, r7, r5
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f001 f8ca 	bl	8004112 <null_ptr_check>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8002f82:	197b      	adds	r3, r7, r5
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d13e      	bne.n	800300a <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8002f8c:	197c      	adds	r4, r7, r5
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	220b      	movs	r2, #11
 8002f92:	18b9      	adds	r1, r7, r2
 8002f94:	19b8      	adds	r0, r7, r6
 8002f96:	2201      	movs	r2, #1
 8002f98:	f7ff fe5a 	bl	8002c50 <bme280_set_regs>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8002fa0:	197b      	adds	r3, r7, r5
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b25b      	sxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d12f      	bne.n	800300a <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2, dev->intf_ptr);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	2002      	movs	r0, #2
 8002fb6:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8002fb8:	250f      	movs	r5, #15
 8002fba:	197c      	adds	r4, r7, r5
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	260c      	movs	r6, #12
 8002fc0:	19b9      	adds	r1, r7, r6
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	20f3      	movs	r0, #243	; 0xf3
 8002fc6:	f7ff fdf2 	bl	8002bae <bme280_get_regs>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8002fce:	197b      	adds	r3, r7, r5
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <bme280_soft_reset+0xaa>
 8002fd8:	220e      	movs	r2, #14
 8002fda:	18bb      	adds	r3, r7, r2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	18ba      	adds	r2, r7, r2
 8002fe0:	1e59      	subs	r1, r3, #1
 8002fe2:	7011      	strb	r1, [r2, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <bme280_soft_reset+0xaa>
 8002fe8:	19bb      	adds	r3, r7, r6
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	001a      	movs	r2, r3
 8002fee:	2301      	movs	r3, #1
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d1da      	bne.n	8002faa <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8002ff4:	230c      	movs	r3, #12
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d003      	beq.n	800300a <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	22fa      	movs	r2, #250	; 0xfa
 8003008:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 800300a:	230f      	movs	r3, #15
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b25b      	sxtb	r3, r3
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b005      	add	sp, #20
 8003018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800301a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301c:	b08b      	sub	sp, #44	; 0x2c
 800301e:	af00      	add	r7, sp, #0
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	230f      	movs	r3, #15
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	1c02      	adds	r2, r0, #0
 800302a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 800302c:	261c      	movs	r6, #28
 800302e:	19bb      	adds	r3, r7, r6
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8003038:	2310      	movs	r3, #16
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	0018      	movs	r0, r3
 800303e:	230c      	movs	r3, #12
 8003040:	001a      	movs	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f006 fc4c 	bl	80098e0 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003048:	2527      	movs	r5, #39	; 0x27
 800304a:	197c      	adds	r4, r7, r5
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f001 f85f 	bl	8004112 <null_ptr_check>
 8003054:	0003      	movs	r3, r0
 8003056:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 8003058:	197b      	adds	r3, r7, r5
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b25b      	sxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d128      	bne.n	80030b4 <bme280_get_sensor_data+0x9a>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d025      	beq.n	80030b4 <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8003068:	197c      	adds	r4, r7, r5
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	19b9      	adds	r1, r7, r6
 800306e:	2208      	movs	r2, #8
 8003070:	20f7      	movs	r0, #247	; 0xf7
 8003072:	f7ff fd9c 	bl	8002bae <bme280_get_regs>
 8003076:	0003      	movs	r3, r0
 8003078:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800307a:	002c      	movs	r4, r5
 800307c:	193b      	adds	r3, r7, r4
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11a      	bne.n	80030bc <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 8003086:	2310      	movs	r3, #16
 8003088:	18fa      	adds	r2, r7, r3
 800308a:	19bb      	adds	r3, r7, r6
 800308c:	0011      	movs	r1, r2
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f81c 	bl	80030cc <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	001d      	movs	r5, r3
 8003098:	3518      	adds	r5, #24
 800309a:	193c      	adds	r4, r7, r4
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	2310      	movs	r3, #16
 80030a0:	18f9      	adds	r1, r7, r3
 80030a2:	230f      	movs	r3, #15
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	7818      	ldrb	r0, [r3, #0]
 80030a8:	002b      	movs	r3, r5
 80030aa:	f000 f853 	bl	8003154 <bme280_compensate_data>
 80030ae:	0003      	movs	r3, r0
 80030b0:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 80030b2:	e003      	b.n	80030bc <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80030b4:	2327      	movs	r3, #39	; 0x27
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	22ff      	movs	r2, #255	; 0xff
 80030ba:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80030bc:	2327      	movs	r3, #39	; 0x27
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b25b      	sxtb	r3, r3
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b00b      	add	sp, #44	; 0x2c
 80030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030cc <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	031b      	lsls	r3, r3, #12
 80030dc:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3301      	adds	r3, #1
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3302      	adds	r3, #2
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3303      	adds	r3, #3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	031b      	lsls	r3, r3, #12
 800310a:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3305      	adds	r3, #5
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	b2db      	uxtb	r3, r3
 8003120:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3306      	adds	r3, #6
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3307      	adds	r3, #7
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	431a      	orrs	r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bd80      	pop	{r7, pc}

08003154 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	240f      	movs	r4, #15
 8003162:	193b      	adds	r3, r7, r4
 8003164:	1c02      	adds	r2, r0, #0
 8003166:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 8003168:	2317      	movs	r3, #23
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d047      	beq.n	8003206 <bme280_compensate_data+0xb2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d044      	beq.n	8003206 <bme280_compensate_data+0xb2>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d041      	beq.n	8003206 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	2300      	movs	r3, #0
 8003188:	608a      	str	r2, [r1, #8]
 800318a:	60cb      	str	r3, [r1, #12]
        comp_data->pressure = 0;
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	2300      	movs	r3, #0
 8003192:	600a      	str	r2, [r1, #0]
 8003194:	604b      	str	r3, [r1, #4]
        comp_data->humidity = 0;
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	2300      	movs	r3, #0
 800319c:	610a      	str	r2, [r1, #16]
 800319e:	614b      	str	r3, [r1, #20]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2207      	movs	r2, #7
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00a      	beq.n	80031c0 <bme280_compensate_data+0x6c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 fa7d 	bl	80036b0 <compensate_temperature>
 80031b6:	0002      	movs	r2, r0
 80031b8:	000b      	movs	r3, r1
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	608a      	str	r2, [r1, #8]
 80031be:	60cb      	str	r3, [r1, #12]
        }

        if (sensor_comp & BME280_PRESS)
 80031c0:	230f      	movs	r3, #15
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2201      	movs	r2, #1
 80031c8:	4013      	ands	r3, r2
 80031ca:	d00a      	beq.n	80031e2 <bme280_compensate_data+0x8e>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f000 fb32 	bl	800383c <compensate_pressure>
 80031d8:	0002      	movs	r2, r0
 80031da:	000b      	movs	r3, r1
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	600a      	str	r2, [r1, #0]
 80031e0:	604b      	str	r3, [r1, #4]
        }

        if (sensor_comp & BME280_HUM)
 80031e2:	230f      	movs	r3, #15
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2204      	movs	r2, #4
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00f      	beq.n	800320e <bme280_compensate_data+0xba>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	0011      	movs	r1, r2
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 fcd1 	bl	8003b9c <compensate_humidity>
 80031fa:	0002      	movs	r2, r0
 80031fc:	000b      	movs	r3, r1
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	610a      	str	r2, [r1, #16]
 8003202:	614b      	str	r3, [r1, #20]
        if (sensor_comp & BME280_HUM)
 8003204:	e003      	b.n	800320e <bme280_compensate_data+0xba>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8003206:	2317      	movs	r3, #23
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800320e:	2317      	movs	r3, #23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b25b      	sxtb	r3, r3
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b007      	add	sp, #28
 800321c:	bd90      	pop	{r4, r7, pc}

0800321e <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800321e:	b590      	push	{r4, r7, lr}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	210f      	movs	r1, #15
 800322a:	187b      	adds	r3, r7, r1
 800322c:	1c02      	adds	r2, r0, #0
 800322e:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003230:	2017      	movs	r0, #23
 8003232:	183b      	adds	r3, r7, r0
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8003238:	187b      	adds	r3, r7, r1
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	d008      	beq.n	8003254 <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8003242:	183c      	adds	r4, r7, r0
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f81b 	bl	8003286 <set_osr_humidity_settings>
 8003250:	0003      	movs	r3, r0
 8003252:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8003254:	200f      	movs	r0, #15
 8003256:	183b      	adds	r3, r7, r0
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2203      	movs	r2, #3
 800325c:	4013      	ands	r3, r2
 800325e:	d00a      	beq.n	8003276 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003260:	2317      	movs	r3, #23
 8003262:	18fc      	adds	r4, r7, r3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	183b      	adds	r3, r7, r0
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	0018      	movs	r0, r3
 800326e:	f000 f851 	bl	8003314 <set_osr_press_temp_settings>
 8003272:	0003      	movs	r3, r0
 8003274:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003276:	2317      	movs	r3, #23
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b25b      	sxtb	r3, r3
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b007      	add	sp, #28
 8003284:	bd90      	pop	{r4, r7, pc}

08003286 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8003286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8003290:	250c      	movs	r5, #12
 8003292:	197b      	adds	r3, r7, r5
 8003294:	22f2      	movs	r2, #242	; 0xf2
 8003296:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	2207      	movs	r2, #7
 800329e:	4013      	ands	r3, r2
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	210e      	movs	r1, #14
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80032a8:	260f      	movs	r6, #15
 80032aa:	19bc      	adds	r4, r7, r6
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1879      	adds	r1, r7, r1
 80032b0:	1978      	adds	r0, r7, r5
 80032b2:	2201      	movs	r2, #1
 80032b4:	f7ff fccc 	bl	8002c50 <bme280_set_regs>
 80032b8:	0003      	movs	r3, r0
 80032ba:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80032bc:	0031      	movs	r1, r6
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d11d      	bne.n	8003304 <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80032c8:	197b      	adds	r3, r7, r5
 80032ca:	22f4      	movs	r2, #244	; 0xf4
 80032cc:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80032ce:	197b      	adds	r3, r7, r5
 80032d0:	7818      	ldrb	r0, [r3, #0]
 80032d2:	000e      	movs	r6, r1
 80032d4:	187c      	adds	r4, r7, r1
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	220d      	movs	r2, #13
 80032da:	18b9      	adds	r1, r7, r2
 80032dc:	2201      	movs	r2, #1
 80032de:	f7ff fc66 	bl	8002bae <bme280_get_regs>
 80032e2:	0003      	movs	r3, r0
 80032e4:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 80032e6:	19bb      	adds	r3, r7, r6
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80032f0:	19bc      	adds	r4, r7, r6
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	220d      	movs	r2, #13
 80032f6:	18b9      	adds	r1, r7, r2
 80032f8:	1978      	adds	r0, r7, r5
 80032fa:	2201      	movs	r2, #1
 80032fc:	f7ff fca8 	bl	8002c50 <bme280_set_regs>
 8003300:	0003      	movs	r3, r0
 8003302:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b25b      	sxtb	r3, r3
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b005      	add	sp, #20
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003314 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	250f      	movs	r5, #15
 8003320:	197b      	adds	r3, r7, r5
 8003322:	1c02      	adds	r2, r0, #0
 8003324:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8003326:	2116      	movs	r1, #22
 8003328:	187b      	adds	r3, r7, r1
 800332a:	22f4      	movs	r2, #244	; 0xf4
 800332c:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800332e:	187b      	adds	r3, r7, r1
 8003330:	7818      	ldrb	r0, [r3, #0]
 8003332:	2617      	movs	r6, #23
 8003334:	19bc      	adds	r4, r7, r6
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2215      	movs	r2, #21
 800333a:	18b9      	adds	r1, r7, r2
 800333c:	2201      	movs	r2, #1
 800333e:	f7ff fc36 	bl	8002bae <bme280_get_regs>
 8003342:	0003      	movs	r3, r0
 8003344:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8003346:	19bb      	adds	r3, r7, r6
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b25b      	sxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d124      	bne.n	800339a <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8003350:	197b      	adds	r3, r7, r5
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2201      	movs	r2, #1
 8003356:	4013      	ands	r3, r2
 8003358:	d006      	beq.n	8003368 <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	2315      	movs	r3, #21
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f000 f89f 	bl	80034a6 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 8003368:	230f      	movs	r3, #15
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d006      	beq.n	8003382 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	2315      	movs	r3, #21
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f000 f8ad 	bl	80034dc <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003382:	2317      	movs	r3, #23
 8003384:	18fc      	adds	r4, r7, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2215      	movs	r2, #21
 800338a:	18b9      	adds	r1, r7, r2
 800338c:	2216      	movs	r2, #22
 800338e:	18b8      	adds	r0, r7, r2
 8003390:	2201      	movs	r2, #1
 8003392:	f7ff fc5d 	bl	8002c50 <bme280_set_regs>
 8003396:	0003      	movs	r3, r0
 8003398:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800339a:	2317      	movs	r3, #23
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b25b      	sxtb	r3, r3
}
 80033a2:	0018      	movs	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b007      	add	sp, #28
 80033a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033aa <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 80033aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	250f      	movs	r5, #15
 80033b6:	197b      	adds	r3, r7, r5
 80033b8:	1c02      	adds	r2, r0, #0
 80033ba:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 80033bc:	2116      	movs	r1, #22
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	22f5      	movs	r2, #245	; 0xf5
 80033c2:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	7818      	ldrb	r0, [r3, #0]
 80033c8:	2617      	movs	r6, #23
 80033ca:	19bc      	adds	r4, r7, r6
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2215      	movs	r2, #21
 80033d0:	18b9      	adds	r1, r7, r2
 80033d2:	2201      	movs	r2, #1
 80033d4:	f7ff fbeb 	bl	8002bae <bme280_get_regs>
 80033d8:	0003      	movs	r3, r0
 80033da:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 80033dc:	19bb      	adds	r3, r7, r6
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d124      	bne.n	8003430 <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80033e6:	197b      	adds	r3, r7, r5
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2208      	movs	r2, #8
 80033ec:	4013      	ands	r3, r2
 80033ee:	d006      	beq.n	80033fe <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	2315      	movs	r3, #21
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f821 	bl	8003440 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2210      	movs	r2, #16
 8003406:	4013      	ands	r3, r2
 8003408:	d006      	beq.n	8003418 <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	2315      	movs	r3, #21
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f82f 	bl	8003476 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003418:	2317      	movs	r3, #23
 800341a:	18fc      	adds	r4, r7, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2215      	movs	r2, #21
 8003420:	18b9      	adds	r1, r7, r2
 8003422:	2216      	movs	r2, #22
 8003424:	18b8      	adds	r0, r7, r2
 8003426:	2201      	movs	r2, #1
 8003428:	f7ff fc12 	bl	8002c50 <bme280_set_regs>
 800342c:	0003      	movs	r3, r0
 800342e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003430:	2317      	movs	r3, #23
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b25b      	sxtb	r3, r3
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b007      	add	sp, #28
 800343e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003440 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b25b      	sxtb	r3, r3
 8003450:	221c      	movs	r2, #28
 8003452:	4393      	bics	r3, r2
 8003454:	b25a      	sxtb	r2, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	78db      	ldrb	r3, [r3, #3]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	b25b      	sxtb	r3, r3
 800345e:	211c      	movs	r1, #28
 8003460:	400b      	ands	r3, r1
 8003462:	b25b      	sxtb	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b25b      	sxtb	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	701a      	strb	r2, [r3, #0]
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}

08003476 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b25b      	sxtb	r3, r3
 8003486:	221f      	movs	r2, #31
 8003488:	4013      	ands	r3, r2
 800348a:	b25a      	sxtb	r2, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	791b      	ldrb	r3, [r3, #4]
 8003490:	015b      	lsls	r3, r3, #5
 8003492:	b25b      	sxtb	r3, r3
 8003494:	4313      	orrs	r3, r2
 8003496:	b25b      	sxtb	r3, r3
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	701a      	strb	r2, [r3, #0]
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b002      	add	sp, #8
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	221c      	movs	r2, #28
 80034b8:	4393      	bics	r3, r2
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	211c      	movs	r1, #28
 80034c6:	400b      	ands	r3, r1
 80034c8:	b25b      	sxtb	r3, r3
 80034ca:	4313      	orrs	r3, r2
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	701a      	strb	r2, [r3, #0]
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	221f      	movs	r2, #31
 80034ee:	4013      	ands	r3, r2
 80034f0:	b25a      	sxtb	r2, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	015b      	lsls	r3, r3, #5
 80034f8:	b25b      	sxtb	r3, r3
 80034fa:	4313      	orrs	r3, r2
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	701a      	strb	r2, [r3, #0]
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2207      	movs	r2, #7
 800351c:	4013      	ands	r3, r2
 800351e:	b2da      	uxtb	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3302      	adds	r3, #2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	109b      	asrs	r3, r3, #2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2207      	movs	r2, #7
 8003530:	4013      	ands	r3, r2
 8003532:	b2da      	uxtb	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3302      	adds	r3, #2
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	b2da      	uxtb	r2, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3303      	adds	r3, #3
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	109b      	asrs	r3, r3, #2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2207      	movs	r2, #7
 8003552:	4013      	ands	r3, r2
 8003554:	b2da      	uxtb	r2, r3
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3303      	adds	r3, #3
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2da      	uxtb	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	711a      	strb	r2, [r3, #4]
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8003570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	0002      	movs	r2, r0
 8003578:	6039      	str	r1, [r7, #0]
 800357a:	1dfb      	adds	r3, r7, #7
 800357c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800357e:	260e      	movs	r6, #14
 8003580:	19bb      	adds	r3, r7, r6
 8003582:	22f4      	movs	r2, #244	; 0xf4
 8003584:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8003586:	19bb      	adds	r3, r7, r6
 8003588:	7818      	ldrb	r0, [r3, #0]
 800358a:	240f      	movs	r4, #15
 800358c:	193c      	adds	r4, r7, r4
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	250d      	movs	r5, #13
 8003592:	1979      	adds	r1, r7, r5
 8003594:	2201      	movs	r2, #1
 8003596:	f7ff fb0a 	bl	8002bae <bme280_get_regs>
 800359a:	0003      	movs	r3, r0
 800359c:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800359e:	240f      	movs	r4, #15
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11a      	bne.n	80035e0 <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80035aa:	0028      	movs	r0, r5
 80035ac:	183b      	adds	r3, r7, r0
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	2203      	movs	r2, #3
 80035b4:	4393      	bics	r3, r2
 80035b6:	b25a      	sxtb	r2, r3
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	2103      	movs	r1, #3
 80035c0:	400b      	ands	r3, r1
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80035ce:	193c      	adds	r4, r7, r4
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1839      	adds	r1, r7, r0
 80035d4:	19b8      	adds	r0, r7, r6
 80035d6:	2201      	movs	r2, #1
 80035d8:	f7ff fb3a 	bl	8002c50 <bme280_set_regs>
 80035dc:	0003      	movs	r3, r0
 80035de:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	b25b      	sxtb	r3, r3
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b005      	add	sp, #20
 80035ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035f0 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80035f8:	2517      	movs	r5, #23
 80035fa:	197c      	adds	r4, r7, r5
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2610      	movs	r6, #16
 8003600:	19b9      	adds	r1, r7, r6
 8003602:	2204      	movs	r2, #4
 8003604:	20f2      	movs	r0, #242	; 0xf2
 8003606:	f7ff fad2 	bl	8002bae <bme280_get_regs>
 800360a:	0003      	movs	r3, r0
 800360c:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800360e:	002c      	movs	r4, r5
 8003610:	193b      	adds	r3, r7, r4
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b25b      	sxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11d      	bne.n	8003656 <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800361a:	2308      	movs	r3, #8
 800361c:	18fa      	adds	r2, r7, r3
 800361e:	19bb      	adds	r3, r7, r6
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff ff72 	bl	800350c <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8003628:	0025      	movs	r5, r4
 800362a:	193c      	adds	r4, r7, r4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f7ff fc8b 	bl	8002f4a <bme280_soft_reset>
 8003634:	0003      	movs	r3, r0
 8003636:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003638:	197b      	adds	r3, r7, r5
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b25b      	sxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 8003642:	197c      	adds	r4, r7, r5
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	2308      	movs	r3, #8
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	0011      	movs	r1, r2
 800364c:	0018      	movs	r0, r3
 800364e:	f000 f80a 	bl	8003666 <reload_device_settings>
 8003652:	0003      	movs	r3, r0
 8003654:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8003656:	2317      	movs	r3, #23
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b25b      	sxtb	r3, r3
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b007      	add	sp, #28
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003666 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 8003666:	b5b0      	push	{r4, r5, r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8003670:	250f      	movs	r5, #15
 8003672:	197c      	adds	r4, r7, r5
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0019      	movs	r1, r3
 800367a:	201f      	movs	r0, #31
 800367c:	f7ff fdcf 	bl	800321e <set_osr_settings>
 8003680:	0003      	movs	r3, r0
 8003682:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8003684:	197b      	adds	r3, r7, r5
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b25b      	sxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800368e:	197c      	adds	r4, r7, r5
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0019      	movs	r1, r3
 8003696:	201f      	movs	r0, #31
 8003698:	f7ff fe87 	bl	80033aa <set_filter_standby_settings>
 800369c:	0003      	movs	r3, r0
 800369e:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b25b      	sxtb	r3, r3
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bdb0      	pop	{r4, r5, r7, pc}

080036b0 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b08c      	sub	sp, #48	; 0x30
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80036ba:	2200      	movs	r2, #0
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <compensate_temperature+0x174>)
 80036be:	623a      	str	r2, [r7, #32]
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    double temperature_max = 85;
 80036c2:	2200      	movs	r2, #0
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <compensate_temperature+0x178>)
 80036c6:	61ba      	str	r2, [r7, #24]
 80036c8:	61fb      	str	r3, [r7, #28]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff f8ea 	bl	80028a8 <__aeabi_ui2d>
 80036d4:	2200      	movs	r2, #0
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <compensate_temperature+0x17c>)
 80036d8:	f7fd fe62 	bl	80013a0 <__aeabi_ddiv>
 80036dc:	0002      	movs	r2, r0
 80036de:	000b      	movs	r3, r1
 80036e0:	0014      	movs	r4, r2
 80036e2:	001d      	movs	r5, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff f8dd 	bl	80028a8 <__aeabi_ui2d>
 80036ee:	2200      	movs	r2, #0
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <compensate_temperature+0x180>)
 80036f2:	f7fd fe55 	bl	80013a0 <__aeabi_ddiv>
 80036f6:	0002      	movs	r2, r0
 80036f8:	000b      	movs	r3, r1
 80036fa:	0020      	movs	r0, r4
 80036fc:	0029      	movs	r1, r5
 80036fe:	f7fe fcbd 	bl	800207c <__aeabi_dsub>
 8003702:	0002      	movs	r2, r0
 8003704:	000b      	movs	r3, r1
 8003706:	613a      	str	r2, [r7, #16]
 8003708:	617b      	str	r3, [r7, #20]
    var1 = var1 * ((double)calib_data->dig_t2);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2202      	movs	r2, #2
 800370e:	5e9b      	ldrsh	r3, [r3, r2]
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff f899 	bl	8002848 <__aeabi_i2d>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	6938      	ldr	r0, [r7, #16]
 800371c:	6979      	ldr	r1, [r7, #20]
 800371e:	f7fe fa41 	bl	8001ba4 <__aeabi_dmul>
 8003722:	0002      	movs	r2, r0
 8003724:	000b      	movs	r3, r1
 8003726:	613a      	str	r2, [r7, #16]
 8003728:	617b      	str	r3, [r7, #20]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f7ff f8ba 	bl	80028a8 <__aeabi_ui2d>
 8003734:	2200      	movs	r2, #0
 8003736:	2382      	movs	r3, #130	; 0x82
 8003738:	05db      	lsls	r3, r3, #23
 800373a:	f7fd fe31 	bl	80013a0 <__aeabi_ddiv>
 800373e:	0002      	movs	r2, r0
 8003740:	000b      	movs	r3, r1
 8003742:	0014      	movs	r4, r2
 8003744:	001d      	movs	r5, r3
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	0018      	movs	r0, r3
 800374c:	f7ff f8ac 	bl	80028a8 <__aeabi_ui2d>
 8003750:	2200      	movs	r2, #0
 8003752:	4b38      	ldr	r3, [pc, #224]	; (8003834 <compensate_temperature+0x184>)
 8003754:	f7fd fe24 	bl	80013a0 <__aeabi_ddiv>
 8003758:	0002      	movs	r2, r0
 800375a:	000b      	movs	r3, r1
 800375c:	0020      	movs	r0, r4
 800375e:	0029      	movs	r1, r5
 8003760:	f7fe fc8c 	bl	800207c <__aeabi_dsub>
 8003764:	0002      	movs	r2, r0
 8003766:	000b      	movs	r3, r1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	60fb      	str	r3, [r7, #12]
    var2 = (var2 * var2) * ((double)calib_data->dig_t3);
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	68b8      	ldr	r0, [r7, #8]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	f7fe fa16 	bl	8001ba4 <__aeabi_dmul>
 8003778:	0002      	movs	r2, r0
 800377a:	000b      	movs	r3, r1
 800377c:	0014      	movs	r4, r2
 800377e:	001d      	movs	r5, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	5e9b      	ldrsh	r3, [r3, r2]
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff f85e 	bl	8002848 <__aeabi_i2d>
 800378c:	0002      	movs	r2, r0
 800378e:	000b      	movs	r3, r1
 8003790:	0020      	movs	r0, r4
 8003792:	0029      	movs	r1, r5
 8003794:	f7fe fa06 	bl	8001ba4 <__aeabi_dmul>
 8003798:	0002      	movs	r2, r0
 800379a:	000b      	movs	r3, r1
 800379c:	60ba      	str	r2, [r7, #8]
 800379e:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6938      	ldr	r0, [r7, #16]
 80037a6:	6979      	ldr	r1, [r7, #20]
 80037a8:	f7fd fabe 	bl	8000d28 <__aeabi_dadd>
 80037ac:	0002      	movs	r2, r0
 80037ae:	000b      	movs	r3, r1
 80037b0:	0010      	movs	r0, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	f7ff f812 	bl	80027dc <__aeabi_d2iz>
 80037b8:	0002      	movs	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6938      	ldr	r0, [r7, #16]
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	f7fd faaf 	bl	8000d28 <__aeabi_dadd>
 80037ca:	0002      	movs	r2, r0
 80037cc:	000b      	movs	r3, r1
 80037ce:	0010      	movs	r0, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <compensate_temperature+0x188>)
 80037d6:	f7fd fde3 	bl	80013a0 <__aeabi_ddiv>
 80037da:	0002      	movs	r2, r0
 80037dc:	000b      	movs	r3, r1
 80037de:	62ba      	str	r2, [r7, #40]	; 0x28
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (temperature < temperature_min)
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ea:	f7fc fe35 	bl	8000458 <__aeabi_dcmplt>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d004      	beq.n	80037fc <compensate_temperature+0x14c>
    {
        temperature = temperature_min;
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	e00b      	b.n	8003814 <compensate_temperature+0x164>
    }
    else if (temperature > temperature_max)
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003804:	f7fc fe3c 	bl	8000480 <__aeabi_dcmpgt>
 8003808:	1e03      	subs	r3, r0, #0
 800380a:	d003      	beq.n	8003814 <compensate_temperature+0x164>
    {
        temperature = temperature_max;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	62ba      	str	r2, [r7, #40]	; 0x28
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    return temperature;
 8003814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003818:	0010      	movs	r0, r2
 800381a:	0019      	movs	r1, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b00c      	add	sp, #48	; 0x30
 8003820:	bdb0      	pop	{r4, r5, r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	c0440000 	.word	0xc0440000
 8003828:	40554000 	.word	0x40554000
 800382c:	40d00000 	.word	0x40d00000
 8003830:	40900000 	.word	0x40900000
 8003834:	40c00000 	.word	0x40c00000
 8003838:	40b40000 	.word	0x40b40000

0800383c <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 800383c:	b5b0      	push	{r4, r5, r7, lr}
 800383e:	b08e      	sub	sp, #56	; 0x38
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8003846:	2200      	movs	r2, #0
 8003848:	4bc7      	ldr	r3, [pc, #796]	; (8003b68 <compensate_pressure+0x32c>)
 800384a:	62ba      	str	r2, [r7, #40]	; 0x28
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    double pressure_max = 110000.0;
 800384e:	2200      	movs	r2, #0
 8003850:	4bc6      	ldr	r3, [pc, #792]	; (8003b6c <compensate_pressure+0x330>)
 8003852:	623a      	str	r2, [r7, #32]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	0018      	movs	r0, r3
 800385c:	f7fe fff4 	bl	8002848 <__aeabi_i2d>
 8003860:	2200      	movs	r2, #0
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	05db      	lsls	r3, r3, #23
 8003866:	f7fd fd9b 	bl	80013a0 <__aeabi_ddiv>
 800386a:	0002      	movs	r2, r0
 800386c:	000b      	movs	r3, r1
 800386e:	0010      	movs	r0, r2
 8003870:	0019      	movs	r1, r3
 8003872:	2200      	movs	r2, #0
 8003874:	4bbe      	ldr	r3, [pc, #760]	; (8003b70 <compensate_pressure+0x334>)
 8003876:	f7fe fc01 	bl	800207c <__aeabi_dsub>
 800387a:	0002      	movs	r2, r0
 800387c:	000b      	movs	r3, r1
 800387e:	61ba      	str	r2, [r7, #24]
 8003880:	61fb      	str	r3, [r7, #28]
    var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	69b8      	ldr	r0, [r7, #24]
 8003888:	69f9      	ldr	r1, [r7, #28]
 800388a:	f7fe f98b 	bl	8001ba4 <__aeabi_dmul>
 800388e:	0002      	movs	r2, r0
 8003890:	000b      	movs	r3, r1
 8003892:	0014      	movs	r4, r2
 8003894:	001d      	movs	r5, r3
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2210      	movs	r2, #16
 800389a:	5e9b      	ldrsh	r3, [r3, r2]
 800389c:	0018      	movs	r0, r3
 800389e:	f7fe ffd3 	bl	8002848 <__aeabi_i2d>
 80038a2:	0002      	movs	r2, r0
 80038a4:	000b      	movs	r3, r1
 80038a6:	0020      	movs	r0, r4
 80038a8:	0029      	movs	r1, r5
 80038aa:	f7fe f97b 	bl	8001ba4 <__aeabi_dmul>
 80038ae:	0002      	movs	r2, r0
 80038b0:	000b      	movs	r3, r1
 80038b2:	0010      	movs	r0, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	4bae      	ldr	r3, [pc, #696]	; (8003b74 <compensate_pressure+0x338>)
 80038ba:	f7fd fd71 	bl	80013a0 <__aeabi_ddiv>
 80038be:	0002      	movs	r2, r0
 80038c0:	000b      	movs	r3, r1
 80038c2:	613a      	str	r2, [r7, #16]
 80038c4:	617b      	str	r3, [r7, #20]
    var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	220e      	movs	r2, #14
 80038ca:	5e9b      	ldrsh	r3, [r3, r2]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fe ffbb 	bl	8002848 <__aeabi_i2d>
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f7fe f965 	bl	8001ba4 <__aeabi_dmul>
 80038da:	0002      	movs	r2, r0
 80038dc:	000b      	movs	r3, r1
 80038de:	0010      	movs	r0, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	0002      	movs	r2, r0
 80038e4:	000b      	movs	r3, r1
 80038e6:	f7fd fa1f 	bl	8000d28 <__aeabi_dadd>
 80038ea:	0002      	movs	r2, r0
 80038ec:	000b      	movs	r3, r1
 80038ee:	6938      	ldr	r0, [r7, #16]
 80038f0:	6979      	ldr	r1, [r7, #20]
 80038f2:	f7fd fa19 	bl	8000d28 <__aeabi_dadd>
 80038f6:	0002      	movs	r2, r0
 80038f8:	000b      	movs	r3, r1
 80038fa:	613a      	str	r2, [r7, #16]
 80038fc:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
 80038fe:	2200      	movs	r2, #0
 8003900:	4b9d      	ldr	r3, [pc, #628]	; (8003b78 <compensate_pressure+0x33c>)
 8003902:	6938      	ldr	r0, [r7, #16]
 8003904:	6979      	ldr	r1, [r7, #20]
 8003906:	f7fd fd4b 	bl	80013a0 <__aeabi_ddiv>
 800390a:	0002      	movs	r2, r0
 800390c:	000b      	movs	r3, r1
 800390e:	0014      	movs	r4, r2
 8003910:	001d      	movs	r5, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	220c      	movs	r2, #12
 8003916:	5e9b      	ldrsh	r3, [r3, r2]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fe ff95 	bl	8002848 <__aeabi_i2d>
 800391e:	2200      	movs	r2, #0
 8003920:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <compensate_pressure+0x340>)
 8003922:	f7fe f93f 	bl	8001ba4 <__aeabi_dmul>
 8003926:	0002      	movs	r2, r0
 8003928:	000b      	movs	r3, r1
 800392a:	0020      	movs	r0, r4
 800392c:	0029      	movs	r1, r5
 800392e:	f7fd f9fb 	bl	8000d28 <__aeabi_dadd>
 8003932:	0002      	movs	r2, r0
 8003934:	000b      	movs	r3, r1
 8003936:	613a      	str	r2, [r7, #16]
 8003938:	617b      	str	r3, [r7, #20]
    var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	220a      	movs	r2, #10
 800393e:	5e9b      	ldrsh	r3, [r3, r2]
 8003940:	0018      	movs	r0, r3
 8003942:	f7fe ff81 	bl	8002848 <__aeabi_i2d>
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f7fe f92b 	bl	8001ba4 <__aeabi_dmul>
 800394e:	0002      	movs	r2, r0
 8003950:	000b      	movs	r3, r1
 8003952:	0010      	movs	r0, r2
 8003954:	0019      	movs	r1, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f7fe f923 	bl	8001ba4 <__aeabi_dmul>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	0010      	movs	r0, r2
 8003964:	0019      	movs	r1, r3
 8003966:	2200      	movs	r2, #0
 8003968:	4b85      	ldr	r3, [pc, #532]	; (8003b80 <compensate_pressure+0x344>)
 800396a:	f7fd fd19 	bl	80013a0 <__aeabi_ddiv>
 800396e:	0002      	movs	r2, r0
 8003970:	000b      	movs	r3, r1
 8003972:	60ba      	str	r2, [r7, #8]
 8003974:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2208      	movs	r2, #8
 800397a:	5e9b      	ldrsh	r3, [r3, r2]
 800397c:	0018      	movs	r0, r3
 800397e:	f7fe ff63 	bl	8002848 <__aeabi_i2d>
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f7fe f90d 	bl	8001ba4 <__aeabi_dmul>
 800398a:	0002      	movs	r2, r0
 800398c:	000b      	movs	r3, r1
 800398e:	0010      	movs	r0, r2
 8003990:	0019      	movs	r1, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f7fd f9c7 	bl	8000d28 <__aeabi_dadd>
 800399a:	0002      	movs	r2, r0
 800399c:	000b      	movs	r3, r1
 800399e:	0010      	movs	r0, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	4b76      	ldr	r3, [pc, #472]	; (8003b80 <compensate_pressure+0x344>)
 80039a6:	f7fd fcfb 	bl	80013a0 <__aeabi_ddiv>
 80039aa:	0002      	movs	r2, r0
 80039ac:	000b      	movs	r3, r1
 80039ae:	61ba      	str	r2, [r7, #24]
 80039b0:	61fb      	str	r3, [r7, #28]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
 80039b2:	2200      	movs	r2, #0
 80039b4:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <compensate_pressure+0x338>)
 80039b6:	69b8      	ldr	r0, [r7, #24]
 80039b8:	69f9      	ldr	r1, [r7, #28]
 80039ba:	f7fd fcf1 	bl	80013a0 <__aeabi_ddiv>
 80039be:	0002      	movs	r2, r0
 80039c0:	000b      	movs	r3, r1
 80039c2:	0010      	movs	r0, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	2200      	movs	r2, #0
 80039c8:	4b6e      	ldr	r3, [pc, #440]	; (8003b84 <compensate_pressure+0x348>)
 80039ca:	f7fd f9ad 	bl	8000d28 <__aeabi_dadd>
 80039ce:	0002      	movs	r2, r0
 80039d0:	000b      	movs	r3, r1
 80039d2:	0014      	movs	r4, r2
 80039d4:	001d      	movs	r5, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	88db      	ldrh	r3, [r3, #6]
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fe ff64 	bl	80028a8 <__aeabi_ui2d>
 80039e0:	0002      	movs	r2, r0
 80039e2:	000b      	movs	r3, r1
 80039e4:	0020      	movs	r0, r4
 80039e6:	0029      	movs	r1, r5
 80039e8:	f7fe f8dc 	bl	8001ba4 <__aeabi_dmul>
 80039ec:	0002      	movs	r2, r0
 80039ee:	000b      	movs	r3, r1
 80039f0:	61ba      	str	r2, [r7, #24]
 80039f2:	61fb      	str	r3, [r7, #28]

    /* avoid exception caused by division by zero */
    if (var1 > (0.0))
 80039f4:	2200      	movs	r2, #0
 80039f6:	2300      	movs	r3, #0
 80039f8:	69b8      	ldr	r0, [r7, #24]
 80039fa:	69f9      	ldr	r1, [r7, #28]
 80039fc:	f7fc fd40 	bl	8000480 <__aeabi_dcmpgt>
 8003a00:	1e03      	subs	r3, r0, #0
 8003a02:	d100      	bne.n	8003a06 <compensate_pressure+0x1ca>
 8003a04:	e0a4      	b.n	8003b50 <compensate_pressure+0x314>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fe ff4c 	bl	80028a8 <__aeabi_ui2d>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	2000      	movs	r0, #0
 8003a16:	495c      	ldr	r1, [pc, #368]	; (8003b88 <compensate_pressure+0x34c>)
 8003a18:	f7fe fb30 	bl	800207c <__aeabi_dsub>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	000b      	movs	r3, r1
 8003a20:	633a      	str	r2, [r7, #48]	; 0x30
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8003a24:	2200      	movs	r2, #0
 8003a26:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <compensate_pressure+0x350>)
 8003a28:	6938      	ldr	r0, [r7, #16]
 8003a2a:	6979      	ldr	r1, [r7, #20]
 8003a2c:	f7fd fcb8 	bl	80013a0 <__aeabi_ddiv>
 8003a30:	0002      	movs	r2, r0
 8003a32:	000b      	movs	r3, r1
 8003a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a38:	f7fe fb20 	bl	800207c <__aeabi_dsub>
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	000b      	movs	r3, r1
 8003a40:	0010      	movs	r0, r2
 8003a42:	0019      	movs	r1, r3
 8003a44:	2200      	movs	r2, #0
 8003a46:	4b52      	ldr	r3, [pc, #328]	; (8003b90 <compensate_pressure+0x354>)
 8003a48:	f7fe f8ac 	bl	8001ba4 <__aeabi_dmul>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	000b      	movs	r3, r1
 8003a50:	0010      	movs	r0, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f7fd fca2 	bl	80013a0 <__aeabi_ddiv>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	000b      	movs	r3, r1
 8003a60:	633a      	str	r2, [r7, #48]	; 0x30
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
        var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2216      	movs	r2, #22
 8003a68:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fe feec 	bl	8002848 <__aeabi_i2d>
 8003a70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	f7fe f896 	bl	8001ba4 <__aeabi_dmul>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	0010      	movs	r0, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	f7fe f88e 	bl	8001ba4 <__aeabi_dmul>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	000b      	movs	r3, r1
 8003a8c:	0010      	movs	r0, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b40      	ldr	r3, [pc, #256]	; (8003b94 <compensate_pressure+0x358>)
 8003a94:	f7fd fc84 	bl	80013a0 <__aeabi_ddiv>
 8003a98:	0002      	movs	r2, r0
 8003a9a:	000b      	movs	r3, r1
 8003a9c:	61ba      	str	r2, [r7, #24]
 8003a9e:	61fb      	str	r3, [r7, #28]
        var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2214      	movs	r2, #20
 8003aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fe fece 	bl	8002848 <__aeabi_i2d>
 8003aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	f7fe f878 	bl	8001ba4 <__aeabi_dmul>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	000b      	movs	r3, r1
 8003ab8:	0010      	movs	r0, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	2200      	movs	r2, #0
 8003abe:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <compensate_pressure+0x338>)
 8003ac0:	f7fd fc6e 	bl	80013a0 <__aeabi_ddiv>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	000b      	movs	r3, r1
 8003ac8:	613a      	str	r2, [r7, #16]
 8003aca:	617b      	str	r3, [r7, #20]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	69b8      	ldr	r0, [r7, #24]
 8003ad2:	69f9      	ldr	r1, [r7, #28]
 8003ad4:	f7fd f928 	bl	8000d28 <__aeabi_dadd>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	000b      	movs	r3, r1
 8003adc:	0014      	movs	r4, r2
 8003ade:	001d      	movs	r5, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2212      	movs	r2, #18
 8003ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7fe feae 	bl	8002848 <__aeabi_i2d>
 8003aec:	0002      	movs	r2, r0
 8003aee:	000b      	movs	r3, r1
 8003af0:	0020      	movs	r0, r4
 8003af2:	0029      	movs	r1, r5
 8003af4:	f7fd f918 	bl	8000d28 <__aeabi_dadd>
 8003af8:	0002      	movs	r2, r0
 8003afa:	000b      	movs	r3, r1
 8003afc:	0010      	movs	r0, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	2200      	movs	r2, #0
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <compensate_pressure+0x35c>)
 8003b04:	f7fd fc4c 	bl	80013a0 <__aeabi_ddiv>
 8003b08:	0002      	movs	r2, r0
 8003b0a:	000b      	movs	r3, r1
 8003b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b10:	f7fd f90a 	bl	8000d28 <__aeabi_dadd>
 8003b14:	0002      	movs	r2, r0
 8003b16:	000b      	movs	r3, r1
 8003b18:	633a      	str	r2, [r7, #48]	; 0x30
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34

        if (pressure < pressure_min)
 8003b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b24:	f7fc fc98 	bl	8000458 <__aeabi_dcmplt>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d004      	beq.n	8003b36 <compensate_pressure+0x2fa>
        {
            pressure = pressure_min;
 8003b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	633a      	str	r2, [r7, #48]	; 0x30
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
 8003b34:	e010      	b.n	8003b58 <compensate_pressure+0x31c>
        }
        else if (pressure > pressure_max)
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b3e:	f7fc fc9f 	bl	8000480 <__aeabi_dcmpgt>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d008      	beq.n	8003b58 <compensate_pressure+0x31c>
        {
            pressure = pressure_max;
 8003b46:	6a3a      	ldr	r2, [r7, #32]
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	e003      	b.n	8003b58 <compensate_pressure+0x31c>
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	633a      	str	r2, [r7, #48]	; 0x30
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
    }

    return pressure;
 8003b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b00e      	add	sp, #56	; 0x38
 8003b64:	bdb0      	pop	{r4, r5, r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	40dd4c00 	.word	0x40dd4c00
 8003b6c:	40fadb00 	.word	0x40fadb00
 8003b70:	40ef4000 	.word	0x40ef4000
 8003b74:	40e00000 	.word	0x40e00000
 8003b78:	40100000 	.word	0x40100000
 8003b7c:	40f00000 	.word	0x40f00000
 8003b80:	41200000 	.word	0x41200000
 8003b84:	3ff00000 	.word	0x3ff00000
 8003b88:	41300000 	.word	0x41300000
 8003b8c:	40b00000 	.word	0x40b00000
 8003b90:	40b86a00 	.word	0x40b86a00
 8003b94:	41e00000 	.word	0x41e00000
 8003b98:	40300000 	.word	0x40300000

08003b9c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b094      	sub	sp, #80	; 0x50
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643a      	str	r2, [r7, #64]	; 0x40
 8003bac:	647b      	str	r3, [r7, #68]	; 0x44
    double humidity_max = 100.0;
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <compensate_humidity+0x1fc>)
 8003bb2:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fe fe44 	bl	8002848 <__aeabi_i2d>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <compensate_humidity+0x200>)
 8003bc4:	f7fe fa5a 	bl	800207c <__aeabi_dsub>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	000b      	movs	r3, r1
 8003bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8003bce:	637b      	str	r3, [r7, #52]	; 0x34
    var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	221e      	movs	r2, #30
 8003bd4:	5e9b      	ldrsh	r3, [r3, r2]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fe fe36 	bl	8002848 <__aeabi_i2d>
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <compensate_humidity+0x204>)
 8003be0:	f7fd ffe0 	bl	8001ba4 <__aeabi_dmul>
 8003be4:	0002      	movs	r2, r0
 8003be6:	000b      	movs	r3, r1
 8003be8:	0014      	movs	r4, r2
 8003bea:	001d      	movs	r5, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	5e9b      	ldrsh	r3, [r3, r2]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fe fe28 	bl	8002848 <__aeabi_i2d>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <compensate_humidity+0x208>)
 8003bfc:	f7fd fbd0 	bl	80013a0 <__aeabi_ddiv>
 8003c00:	0002      	movs	r2, r0
 8003c02:	000b      	movs	r3, r1
 8003c04:	0010      	movs	r0, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0c:	f7fd ffca 	bl	8001ba4 <__aeabi_dmul>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	0020      	movs	r0, r4
 8003c16:	0029      	movs	r1, r5
 8003c18:	f7fd f886 	bl	8000d28 <__aeabi_dadd>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	000b      	movs	r3, r1
 8003c20:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    var3 = uncomp_data->humidity - var2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fe fe3d 	bl	80028a8 <__aeabi_ui2d>
 8003c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	f7fe fa23 	bl	800207c <__aeabi_dsub>
 8003c36:	0002      	movs	r2, r0
 8003c38:	000b      	movs	r3, r1
 8003c3a:	623a      	str	r2, [r7, #32]
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    var4 = ((double)calib_data->dig_h2) / 65536.0;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	221a      	movs	r2, #26
 8003c42:	5e9b      	ldrsh	r3, [r3, r2]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fe fdff 	bl	8002848 <__aeabi_i2d>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <compensate_humidity+0x20c>)
 8003c4e:	f7fd fba7 	bl	80013a0 <__aeabi_ddiv>
 8003c52:	0002      	movs	r2, r0
 8003c54:	000b      	movs	r3, r1
 8003c56:	61ba      	str	r2, [r7, #24]
 8003c58:	61fb      	str	r3, [r7, #28]
    var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	7f1b      	ldrb	r3, [r3, #28]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fe fe22 	bl	80028a8 <__aeabi_ui2d>
 8003c64:	2200      	movs	r2, #0
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <compensate_humidity+0x210>)
 8003c68:	f7fd fb9a 	bl	80013a0 <__aeabi_ddiv>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	000b      	movs	r3, r1
 8003c70:	0010      	movs	r0, r2
 8003c72:	0019      	movs	r1, r3
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c78:	f7fd ff94 	bl	8001ba4 <__aeabi_dmul>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	000b      	movs	r3, r1
 8003c80:	0010      	movs	r0, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	2200      	movs	r2, #0
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <compensate_humidity+0x214>)
 8003c88:	f7fd f84e 	bl	8000d28 <__aeabi_dadd>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	000b      	movs	r3, r1
 8003c90:	613a      	str	r2, [r7, #16]
 8003c92:	617b      	str	r3, [r7, #20]
    var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2222      	movs	r2, #34	; 0x22
 8003c98:	569b      	ldrsb	r3, [r3, r2]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f7fe fdd4 	bl	8002848 <__aeabi_i2d>
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4b42      	ldr	r3, [pc, #264]	; (8003dac <compensate_humidity+0x210>)
 8003ca4:	f7fd fb7c 	bl	80013a0 <__aeabi_ddiv>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	000b      	movs	r3, r1
 8003cac:	0010      	movs	r0, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb4:	f7fd ff76 	bl	8001ba4 <__aeabi_dmul>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f7fd ff6e 	bl	8001ba4 <__aeabi_dmul>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	000b      	movs	r3, r1
 8003ccc:	0010      	movs	r0, r2
 8003cce:	0019      	movs	r1, r3
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <compensate_humidity+0x214>)
 8003cd4:	f7fd f828 	bl	8000d28 <__aeabi_dadd>
 8003cd8:	0002      	movs	r2, r0
 8003cda:	000b      	movs	r3, r1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	60fb      	str	r3, [r7, #12]
    var6 = var3 * var4 * (var5 * var6);
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	6a38      	ldr	r0, [r7, #32]
 8003ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce8:	f7fd ff5c 	bl	8001ba4 <__aeabi_dmul>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	0014      	movs	r4, r2
 8003cf2:	001d      	movs	r5, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6938      	ldr	r0, [r7, #16]
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	f7fd ff52 	bl	8001ba4 <__aeabi_dmul>
 8003d00:	0002      	movs	r2, r0
 8003d02:	000b      	movs	r3, r1
 8003d04:	0020      	movs	r0, r4
 8003d06:	0029      	movs	r1, r5
 8003d08:	f7fd ff4c 	bl	8001ba4 <__aeabi_dmul>
 8003d0c:	0002      	movs	r2, r0
 8003d0e:	000b      	movs	r3, r1
 8003d10:	60ba      	str	r2, [r7, #8]
 8003d12:	60fb      	str	r3, [r7, #12]
    humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	7e1b      	ldrb	r3, [r3, #24]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7fe fdc5 	bl	80028a8 <__aeabi_ui2d>
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f7fd ff3f 	bl	8001ba4 <__aeabi_dmul>
 8003d26:	0002      	movs	r2, r0
 8003d28:	000b      	movs	r3, r1
 8003d2a:	0010      	movs	r0, r2
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <compensate_humidity+0x218>)
 8003d32:	f7fd fb35 	bl	80013a0 <__aeabi_ddiv>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	491c      	ldr	r1, [pc, #112]	; (8003db0 <compensate_humidity+0x214>)
 8003d3e:	f7fe f99d 	bl	800207c <__aeabi_dsub>
 8003d42:	0002      	movs	r2, r0
 8003d44:	000b      	movs	r3, r1
 8003d46:	68b8      	ldr	r0, [r7, #8]
 8003d48:	68f9      	ldr	r1, [r7, #12]
 8003d4a:	f7fd ff2b 	bl	8001ba4 <__aeabi_dmul>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	000b      	movs	r3, r1
 8003d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d54:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (humidity > humidity_max)
 8003d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d5c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d5e:	f7fc fb8f 	bl	8000480 <__aeabi_dcmpgt>
 8003d62:	1e03      	subs	r3, r0, #0
 8003d64:	d004      	beq.n	8003d70 <compensate_humidity+0x1d4>
    {
        humidity = humidity_max;
 8003d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d6e:	e00b      	b.n	8003d88 <compensate_humidity+0x1ec>
    }
    else if (humidity < humidity_min)
 8003d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003d76:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003d78:	f7fc fb6e 	bl	8000458 <__aeabi_dcmplt>
 8003d7c:	1e03      	subs	r3, r0, #0
 8003d7e:	d003      	beq.n	8003d88 <compensate_humidity+0x1ec>
    {
        humidity = humidity_min;
 8003d80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d84:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d86:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    return humidity;
 8003d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b014      	add	sp, #80	; 0x50
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	40590000 	.word	0x40590000
 8003d9c:	40f2c000 	.word	0x40f2c000
 8003da0:	40500000 	.word	0x40500000
 8003da4:	40d00000 	.word	0x40d00000
 8003da8:	40f00000 	.word	0x40f00000
 8003dac:	41900000 	.word	0x41900000
 8003db0:	3ff00000 	.word	0x3ff00000
 8003db4:	41200000 	.word	0x41200000

08003db8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	b08b      	sub	sp, #44	; 0x2c
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8003dc0:	2626      	movs	r6, #38	; 0x26
 8003dc2:	19bb      	adds	r3, r7, r6
 8003dc4:	2288      	movs	r2, #136	; 0x88
 8003dc6:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8003dc8:	250c      	movs	r5, #12
 8003dca:	197b      	adds	r3, r7, r5
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2216      	movs	r2, #22
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f005 fd82 	bl	80098e0 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8003ddc:	2427      	movs	r4, #39	; 0x27
 8003dde:	193c      	adds	r4, r7, r4
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	1979      	adds	r1, r7, r5
 8003de4:	19bb      	adds	r3, r7, r6
 8003de6:	7818      	ldrb	r0, [r3, #0]
 8003de8:	0013      	movs	r3, r2
 8003dea:	221a      	movs	r2, #26
 8003dec:	f7fe fedf 	bl	8002bae <bme280_get_regs>
 8003df0:	0003      	movs	r3, r0
 8003df2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8003df4:	2427      	movs	r4, #39	; 0x27
 8003df6:	193b      	adds	r3, r7, r4
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d11f      	bne.n	8003e40 <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	197b      	adds	r3, r7, r5
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 f85a 	bl	8003ec0 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8003e0c:	19bb      	adds	r3, r7, r6
 8003e0e:	22e1      	movs	r2, #225	; 0xe1
 8003e10:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8003e12:	193c      	adds	r4, r7, r4
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	1979      	adds	r1, r7, r5
 8003e18:	19bb      	adds	r3, r7, r6
 8003e1a:	7818      	ldrb	r0, [r3, #0]
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	2207      	movs	r2, #7
 8003e20:	f7fe fec5 	bl	8002bae <bme280_get_regs>
 8003e24:	0003      	movs	r3, r0
 8003e26:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8003e28:	2427      	movs	r4, #39	; 0x27
 8003e2a:	193b      	adds	r3, r7, r4
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	197b      	adds	r3, r7, r5
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f000 f8ed 	bl	800401a <parse_humidity_calib_data>
        }
    }

    return rslt;
 8003e40:	2327      	movs	r3, #39	; 0x27
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b25b      	sxtb	r3, r3
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00b      	add	sp, #44	; 0x2c
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e50 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	1cfb      	adds	r3, r7, #3
 8003e60:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 8003e62:	2317      	movs	r3, #23
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e01d      	b.n	8003ea8 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003e6c:	2017      	movs	r0, #23
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	18d2      	adds	r2, r2, r3
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	18cb      	adds	r3, r1, r3
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	18d2      	adds	r2, r2, r3
 8003e8e:	183b      	adds	r3, r7, r0
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	0019      	movs	r1, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	185b      	adds	r3, r3, r1
 8003e9a:	7812      	ldrb	r2, [r2, #0]
 8003e9c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003e9e:	183b      	adds	r3, r7, r0
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	3201      	adds	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	2317      	movs	r3, #23
 8003eaa:	18fa      	adds	r2, r7, r3
 8003eac:	1cfb      	adds	r3, r7, #3
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3da      	bcc.n	8003e6c <interleave_reg_addr+0x1c>
    }
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b006      	add	sp, #24
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3318      	adds	r3, #24
 8003ece:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b21b      	sxth	r3, r3
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	b21b      	sxth	r3, r3
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3303      	adds	r3, #3
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4313      	orrs	r3, r2
 8003efe:	b21a      	sxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3305      	adds	r3, #5
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	b21a      	sxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3307      	adds	r3, #7
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	b21a      	sxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3306      	adds	r3, #6
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b21b      	sxth	r3, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3309      	adds	r3, #9
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	b21a      	sxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3308      	adds	r3, #8
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	b21a      	sxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	330b      	adds	r3, #11
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	b21a      	sxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	330a      	adds	r3, #10
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b21a      	sxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	330d      	adds	r3, #13
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	b21a      	sxth	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b21b      	sxth	r3, r3
 8003f80:	4313      	orrs	r3, r2
 8003f82:	b21a      	sxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	330f      	adds	r3, #15
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	b21a      	sxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	330e      	adds	r3, #14
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b21b      	sxth	r3, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	b21a      	sxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3311      	adds	r3, #17
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	b21a      	sxth	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3310      	adds	r3, #16
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b21a      	sxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3313      	adds	r3, #19
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	021b      	lsls	r3, r3, #8
 8003fc4:	b21a      	sxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3312      	adds	r3, #18
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b21b      	sxth	r3, r3
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	b21a      	sxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3315      	adds	r3, #21
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	b21a      	sxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b21b      	sxth	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b21a      	sxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3317      	adds	r3, #23
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3316      	adds	r3, #22
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b21b      	sxth	r3, r3
 8004002:	4313      	orrs	r3, r2
 8004004:	b21a      	sxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7e5a      	ldrb	r2, [r3, #25]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	761a      	strb	r2, [r3, #24]
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b004      	add	sp, #16
 8004018:	bd80      	pop	{r7, pc}

0800401a <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800401a:	b590      	push	{r4, r7, lr}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	3318      	adds	r3, #24
 8004028:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3301      	adds	r3, #1
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21a      	sxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b21b      	sxth	r3, r3
 800403a:	4313      	orrs	r3, r2
 800403c:	b21a      	sxth	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	789a      	ldrb	r2, [r3, #2]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3303      	adds	r3, #3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	b25b      	sxtb	r3, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	b29a      	uxth	r2, r3
 8004058:	2012      	movs	r0, #18
 800405a:	183b      	adds	r3, r7, r0
 800405c:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3304      	adds	r3, #4
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b21a      	sxth	r2, r3
 8004066:	2410      	movs	r4, #16
 8004068:	193b      	adds	r3, r7, r4
 800406a:	210f      	movs	r1, #15
 800406c:	400a      	ands	r2, r1
 800406e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 8004070:	183a      	adds	r2, r7, r0
 8004072:	193b      	adds	r3, r7, r4
 8004074:	8812      	ldrh	r2, [r2, #0]
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	b21a      	sxth	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3305      	adds	r3, #5
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	b25b      	sxtb	r3, r3
 8004088:	b29b      	uxth	r3, r3
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	b29a      	uxth	r2, r3
 800408e:	210e      	movs	r1, #14
 8004090:	187b      	adds	r3, r7, r1
 8004092:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	b2da      	uxtb	r2, r3
 800409e:	200c      	movs	r0, #12
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 80040a4:	187a      	adds	r2, r7, r1
 80040a6:	183b      	adds	r3, r7, r0
 80040a8:	8812      	ldrh	r2, [r2, #0]
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3306      	adds	r3, #6
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b259      	sxtb	r1, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2222      	movs	r2, #34	; 0x22
 80040c0:	5499      	strb	r1, [r3, r2]
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b007      	add	sp, #28
 80040c8:	bd90      	pop	{r4, r7, pc}

080040ca <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	0002      	movs	r2, r0
 80040d2:	1dfb      	adds	r3, r7, #7
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	1c0a      	adds	r2, r1, #0
 80040da:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 80040dc:	210f      	movs	r1, #15
 80040de:	187b      	adds	r3, r7, r1
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	1dba      	adds	r2, r7, #6
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	4013      	ands	r3, r2
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80040f4:	187b      	adds	r3, r7, r1
 80040f6:	2201      	movs	r2, #1
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e003      	b.n	8004104 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80040fc:	230f      	movs	r3, #15
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 8004104:	230f      	movs	r3, #15
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b004      	add	sp, #16
 8004110:	bd80      	pop	{r7, pc}

08004112 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <null_ptr_check+0x26>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <null_ptr_check+0x26>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <null_ptr_check+0x26>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 8004138:	230f      	movs	r3, #15
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e003      	b.n	800414a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8004142:	230f      	movs	r3, #15
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800414a:	230f      	movs	r3, #15
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	b25b      	sxtb	r3, r3
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b004      	add	sp, #16
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <BME280_init>:

}date;
static int8_t init_done;


int8_t BME280_init(void) {
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_OK;
 8004162:	1dfb      	adds	r3, r7, #7
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
	uint8_t settings_sel;
	init_done = BME280_E_DEV_NOT_FOUND;
 8004168:	4b32      	ldr	r3, [pc, #200]	; (8004234 <BME280_init+0xd8>)
 800416a:	22fe      	movs	r2, #254	; 0xfe
 800416c:	701a      	strb	r2, [r3, #0]

	bme.intf_ptr = (BME280_I2C_ADDR_PRIM<<1);
 800416e:	4b32      	ldr	r3, [pc, #200]	; (8004238 <BME280_init+0xdc>)
 8004170:	22ec      	movs	r2, #236	; 0xec
 8004172:	605a      	str	r2, [r3, #4]
	bme.intf = BME280_I2C_INTF;
 8004174:	4b30      	ldr	r3, [pc, #192]	; (8004238 <BME280_init+0xdc>)
 8004176:	2201      	movs	r2, #1
 8004178:	721a      	strb	r2, [r3, #8]
	bme.read = user_i2c_read;
 800417a:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <BME280_init+0xdc>)
 800417c:	4a2f      	ldr	r2, [pc, #188]	; (800423c <BME280_init+0xe0>)
 800417e:	60da      	str	r2, [r3, #12]
	bme.write = user_i2c_write;
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <BME280_init+0xdc>)
 8004182:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <BME280_init+0xe4>)
 8004184:	611a      	str	r2, [r3, #16]
	bme.delay_ms = user_delay_ms;
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <BME280_init+0xdc>)
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <BME280_init+0xe8>)
 800418a:	615a      	str	r2, [r3, #20]

	rslt = bme280_init(&bme);
 800418c:	1dfc      	adds	r4, r7, #7
 800418e:	4b2a      	ldr	r3, [pc, #168]	; (8004238 <BME280_init+0xdc>)
 8004190:	0018      	movs	r0, r3
 8004192:	f7fe fca9 	bl	8002ae8 <bme280_init>
 8004196:	0003      	movs	r3, r0
 8004198:	7023      	strb	r3, [r4, #0]

	/* Recommended mode of operation: Indoor navigation */
	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <BME280_init+0xdc>)
 800419c:	2242      	movs	r2, #66	; 0x42
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <BME280_init+0xdc>)
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	2105      	movs	r1, #5
 80041a8:	5499      	strb	r1, [r3, r2]
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <BME280_init+0xdc>)
 80041ac:	2241      	movs	r2, #65	; 0x41
 80041ae:	2102      	movs	r1, #2
 80041b0:	5499      	strb	r1, [r3, r2]
	bme.settings.filter = BME280_FILTER_COEFF_16;
 80041b2:	4b21      	ldr	r3, [pc, #132]	; (8004238 <BME280_init+0xdc>)
 80041b4:	2243      	movs	r2, #67	; 0x43
 80041b6:	2104      	movs	r1, #4
 80041b8:	5499      	strb	r1, [r3, r2]
	bme.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <BME280_init+0xdc>)
 80041bc:	2244      	movs	r2, #68	; 0x44
 80041be:	2101      	movs	r1, #1
 80041c0:	5499      	strb	r1, [r3, r2]


		settings_sel = BME280_OSR_PRESS_SEL;
 80041c2:	1dbb      	adds	r3, r7, #6
 80041c4:	2201      	movs	r2, #1
 80041c6:	701a      	strb	r2, [r3, #0]
		settings_sel |= BME280_OSR_TEMP_SEL;
 80041c8:	1dbb      	adds	r3, r7, #6
 80041ca:	1dba      	adds	r2, r7, #6
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	2102      	movs	r1, #2
 80041d0:	430a      	orrs	r2, r1
 80041d2:	701a      	strb	r2, [r3, #0]
		settings_sel |= BME280_OSR_HUM_SEL;
 80041d4:	1dbb      	adds	r3, r7, #6
 80041d6:	1dba      	adds	r2, r7, #6
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	2104      	movs	r1, #4
 80041dc:	430a      	orrs	r2, r1
 80041de:	701a      	strb	r2, [r3, #0]
		settings_sel |= BME280_STANDBY_SEL;
 80041e0:	1dbb      	adds	r3, r7, #6
 80041e2:	1dba      	adds	r2, r7, #6
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	2110      	movs	r1, #16
 80041e8:	430a      	orrs	r2, r1
 80041ea:	701a      	strb	r2, [r3, #0]
		settings_sel |= BME280_FILTER_SEL;
 80041ec:	1dbb      	adds	r3, r7, #6
 80041ee:	1dba      	adds	r2, r7, #6
 80041f0:	7812      	ldrb	r2, [r2, #0]
 80041f2:	2108      	movs	r1, #8
 80041f4:	430a      	orrs	r2, r1
 80041f6:	701a      	strb	r2, [r3, #0]

		rslt = bme280_set_sensor_settings(settings_sel, &bme);
 80041f8:	1dfc      	adds	r4, r7, #7
 80041fa:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <BME280_init+0xdc>)
 80041fc:	1dbb      	adds	r3, r7, #6
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f7fe fdbc 	bl	8002d80 <bme280_set_sensor_settings>
 8004208:	0003      	movs	r3, r0
 800420a:	7023      	strb	r3, [r4, #0]
		rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 800420c:	1dfc      	adds	r4, r7, #7
 800420e:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <BME280_init+0xdc>)
 8004210:	0019      	movs	r1, r3
 8004212:	2003      	movs	r0, #3
 8004214:	f7fe fe1f 	bl	8002e56 <bme280_set_sensor_mode>
 8004218:	0003      	movs	r3, r0
 800421a:	7023      	strb	r3, [r4, #0]
		init_done = rslt;
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <BME280_init+0xd8>)
 800421e:	1dfa      	adds	r2, r7, #7
 8004220:	7812      	ldrb	r2, [r2, #0]
 8004222:	701a      	strb	r2, [r3, #0]

	return rslt;
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b25b      	sxtb	r3, r3
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b003      	add	sp, #12
 8004230:	bd90      	pop	{r4, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000310 	.word	0x20000310
 8004238:	20000220 	.word	0x20000220
 800423c:	0800468d 	.word	0x0800468d
 8004240:	080046dd 	.word	0x080046dd
 8004244:	08004661 	.word	0x08004661

08004248 <get_temperature>:



int8_t get_temperature(void) {
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_E_NULL_PTR;
 800424e:	1dfb      	adds	r3, r7, #7
 8004250:	22ff      	movs	r2, #255	; 0xff
 8004252:	701a      	strb	r2, [r3, #0]

	if(init_done == BME280_OK)
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <get_temperature+0x7c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25b      	sxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <get_temperature+0x28>
	{
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 800425e:	1dfc      	adds	r4, r7, #7
 8004260:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <get_temperature+0x80>)
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <get_temperature+0x84>)
 8004264:	0019      	movs	r1, r3
 8004266:	2007      	movs	r0, #7
 8004268:	f7fe fed7 	bl	800301a <bme280_get_sensor_data>
 800426c:	0003      	movs	r3, r0
 800426e:	7023      	strb	r3, [r4, #0]

	}

		    date.temp = comp_data.temperature;
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <get_temperature+0x84>)
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	0010      	movs	r0, r2
 8004278:	0019      	movs	r1, r3
 800427a:	f7fe fb83 	bl	8002984 <__aeabi_d2f>
 800427e:	1c02      	adds	r2, r0, #0
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <get_temperature+0x88>)
 8004282:	601a      	str	r2, [r3, #0]
		    date.list_temp[date.list_position_t]=date.temp;
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <get_temperature+0x88>)
 8004286:	2284      	movs	r2, #132	; 0x84
 8004288:	5898      	ldr	r0, [r3, r2]
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <get_temperature+0x88>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4910      	ldr	r1, [pc, #64]	; (80042d0 <get_temperature+0x88>)
 8004290:	1c83      	adds	r3, r0, #2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	18cb      	adds	r3, r1, r3
 8004296:	3304      	adds	r3, #4
 8004298:	601a      	str	r2, [r3, #0]
		    date.list_position_t=date.list_position_t+1;
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <get_temperature+0x88>)
 800429c:	2284      	movs	r2, #132	; 0x84
 800429e:	589b      	ldr	r3, [r3, r2]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <get_temperature+0x88>)
 80042a4:	2184      	movs	r1, #132	; 0x84
 80042a6:	505a      	str	r2, [r3, r1]
		    if(date.list_position_t>=BUF_SIZE){
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <get_temperature+0x88>)
 80042aa:	2284      	movs	r2, #132	; 0x84
 80042ac:	589b      	ldr	r3, [r3, r2]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	dd03      	ble.n	80042ba <get_temperature+0x72>
		    	date.list_position_t=0;
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <get_temperature+0x88>)
 80042b4:	2284      	movs	r2, #132	; 0x84
 80042b6:	2100      	movs	r1, #0
 80042b8:	5099      	str	r1, [r3, r2]
		    }

}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b003      	add	sp, #12
 80042c2:	bd90      	pop	{r4, r7, pc}
 80042c4:	20000310 	.word	0x20000310
 80042c8:	20000220 	.word	0x20000220
 80042cc:	20000268 	.word	0x20000268
 80042d0:	20000280 	.word	0x20000280

080042d4 <print_temperature>:

int8_t print_temperature(void){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0

	float avg_temp=0;
 80042da:	2300      	movs	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 80042de:	2300      	movs	r3, #0
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	e00f      	b.n	8004304 <print_temperature+0x30>
	    avg_temp=avg_temp+date.list_temp[i];
 80042e4:	4a24      	ldr	r2, [pc, #144]	; (8004378 <print_temperature+0xa4>)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3302      	adds	r3, #2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	3304      	adds	r3, #4
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	1c19      	adds	r1, r3, #0
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fc fa61 	bl	80007bc <__aeabi_fadd>
 80042fa:	1c03      	adds	r3, r0, #0
 80042fc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b09      	cmp	r3, #9
 8004308:	ddec      	ble.n	80042e4 <print_temperature+0x10>
	}
	avg_temp=avg_temp/BUF_SIZE;
 800430a:	491c      	ldr	r1, [pc, #112]	; (800437c <print_temperature+0xa8>)
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7fc fbf3 	bl	8000af8 <__aeabi_fdiv>
 8004312:	1c03      	adds	r3, r0, #0
 8004314:	607b      	str	r3, [r7, #4]

    disp.addr = (0x27 << 1);
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <print_temperature+0xac>)
 8004318:	224e      	movs	r2, #78	; 0x4e
 800431a:	701a      	strb	r2, [r3, #0]
    disp.bl = true;
 800431c:	4b18      	ldr	r3, [pc, #96]	; (8004380 <print_temperature+0xac>)
 800431e:	2223      	movs	r2, #35	; 0x23
 8004320:	2101      	movs	r1, #1
 8004322:	5499      	strb	r1, [r3, r2]
    lcd_init(&disp);
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <print_temperature+0xac>)
 8004326:	0018      	movs	r0, r3
 8004328:	f000 fb68 	bl	80049fc <lcd_init>

	printf("Temperature\r\n");
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <print_temperature+0xb0>)
 800432e:	0018      	movs	r0, r3
 8004330:	f006 f9e0 	bl	800a6f4 <puts>
    printf("%0.2f C\r\n", avg_temp);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7fe fadd 	bl	80028f4 <__aeabi_f2d>
 800433a:	0002      	movs	r2, r0
 800433c:	000b      	movs	r3, r1
 800433e:	4912      	ldr	r1, [pc, #72]	; (8004388 <print_temperature+0xb4>)
 8004340:	0008      	movs	r0, r1
 8004342:	f006 f94b 	bl	800a5dc <iprintf>
    sprintf((char *)disp.f_line, "Temperatura");
 8004346:	4a11      	ldr	r2, [pc, #68]	; (800438c <print_temperature+0xb8>)
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <print_temperature+0xbc>)
 800434a:	0011      	movs	r1, r2
 800434c:	0018      	movs	r0, r3
 800434e:	f006 f9df 	bl	800a710 <siprintf>
    sprintf((char *)disp.s_line, "%0.2f C", avg_temp);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fe face 	bl	80028f4 <__aeabi_f2d>
 8004358:	0002      	movs	r2, r0
 800435a:	000b      	movs	r3, r1
 800435c:	490d      	ldr	r1, [pc, #52]	; (8004394 <print_temperature+0xc0>)
 800435e:	480e      	ldr	r0, [pc, #56]	; (8004398 <print_temperature+0xc4>)
 8004360:	f006 f9d6 	bl	800a710 <siprintf>
    lcd_display(&disp);
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <print_temperature+0xac>)
 8004366:	0018      	movs	r0, r3
 8004368:	f000 fbec 	bl	8004b44 <lcd_display>

}
 800436c:	46c0      	nop			; (mov r8, r8)
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	20000280 	.word	0x20000280
 800437c:	41200000 	.word	0x41200000
 8004380:	200001fc 	.word	0x200001fc
 8004384:	0800e488 	.word	0x0800e488
 8004388:	0800e498 	.word	0x0800e498
 800438c:	0800e4a4 	.word	0x0800e4a4
 8004390:	200001fd 	.word	0x200001fd
 8004394:	0800e4b0 	.word	0x0800e4b0
 8004398:	2000020e 	.word	0x2000020e

0800439c <get_pressure>:

int8_t  get_pressure(void) {
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_E_NULL_PTR;
 80043a2:	1dfb      	adds	r3, r7, #7
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	701a      	strb	r2, [r3, #0]

	if(init_done == BME280_OK)
 80043a8:	4b1f      	ldr	r3, [pc, #124]	; (8004428 <get_pressure+0x8c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d108      	bne.n	80043c4 <get_pressure+0x28>
	{
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 80043b2:	1dfc      	adds	r4, r7, #7
 80043b4:	4a1d      	ldr	r2, [pc, #116]	; (800442c <get_pressure+0x90>)
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <get_pressure+0x94>)
 80043b8:	0019      	movs	r1, r3
 80043ba:	2007      	movs	r0, #7
 80043bc:	f7fe fe2d 	bl	800301a <bme280_get_sensor_data>
 80043c0:	0003      	movs	r3, r0
 80043c2:	7023      	strb	r3, [r4, #0]
	}

    date.press = 0.01 * comp_data.pressure;
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <get_pressure+0x94>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	4a1a      	ldr	r2, [pc, #104]	; (8004434 <get_pressure+0x98>)
 80043cc:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <get_pressure+0x9c>)
 80043ce:	f7fd fbe9 	bl	8001ba4 <__aeabi_dmul>
 80043d2:	0002      	movs	r2, r0
 80043d4:	000b      	movs	r3, r1
 80043d6:	0010      	movs	r0, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	f7fe fad3 	bl	8002984 <__aeabi_d2f>
 80043de:	1c02      	adds	r2, r0, #0
 80043e0:	4b16      	ldr	r3, [pc, #88]	; (800443c <get_pressure+0xa0>)
 80043e2:	605a      	str	r2, [r3, #4]
    date.list_press[date.list_position_p]=date.press;
 80043e4:	4b15      	ldr	r3, [pc, #84]	; (800443c <get_pressure+0xa0>)
 80043e6:	2288      	movs	r2, #136	; 0x88
 80043e8:	5898      	ldr	r0, [r3, r2]
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <get_pressure+0xa0>)
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4913      	ldr	r1, [pc, #76]	; (800443c <get_pressure+0xa0>)
 80043f0:	0003      	movs	r3, r0
 80043f2:	330c      	adds	r3, #12
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	18cb      	adds	r3, r1, r3
 80043f8:	3304      	adds	r3, #4
 80043fa:	601a      	str	r2, [r3, #0]
    date.list_position_p=date.list_position_p+1;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <get_pressure+0xa0>)
 80043fe:	2288      	movs	r2, #136	; 0x88
 8004400:	589b      	ldr	r3, [r3, r2]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <get_pressure+0xa0>)
 8004406:	2188      	movs	r1, #136	; 0x88
 8004408:	505a      	str	r2, [r3, r1]
    if(date.list_position_p>=BUF_SIZE){
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <get_pressure+0xa0>)
 800440c:	2288      	movs	r2, #136	; 0x88
 800440e:	589b      	ldr	r3, [r3, r2]
 8004410:	2b09      	cmp	r3, #9
 8004412:	dd03      	ble.n	800441c <get_pressure+0x80>
    	date.list_position_p=0;
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <get_pressure+0xa0>)
 8004416:	2288      	movs	r2, #136	; 0x88
 8004418:	2100      	movs	r1, #0
 800441a:	5099      	str	r1, [r3, r2]
    }
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b003      	add	sp, #12
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20000310 	.word	0x20000310
 800442c:	20000220 	.word	0x20000220
 8004430:	20000268 	.word	0x20000268
 8004434:	47ae147b 	.word	0x47ae147b
 8004438:	3f847ae1 	.word	0x3f847ae1
 800443c:	20000280 	.word	0x20000280

08004440 <print_pressure>:

int8_t print_pressure(void){
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0

	float avg_press=0;
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 800444a:	2300      	movs	r3, #0
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	e00f      	b.n	8004470 <print_pressure+0x30>
	    avg_press=avg_press+date.list_press[i];
 8004450:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <print_pressure+0xa4>)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	3304      	adds	r3, #4
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	1c19      	adds	r1, r3, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fc f9ab 	bl	80007bc <__aeabi_fadd>
 8004466:	1c03      	adds	r3, r0, #0
 8004468:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b09      	cmp	r3, #9
 8004474:	ddec      	ble.n	8004450 <print_pressure+0x10>
	}
	avg_press=avg_press/BUF_SIZE;
 8004476:	491c      	ldr	r1, [pc, #112]	; (80044e8 <print_pressure+0xa8>)
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fc fb3d 	bl	8000af8 <__aeabi_fdiv>
 800447e:	1c03      	adds	r3, r0, #0
 8004480:	607b      	str	r3, [r7, #4]

    disp.addr = (0x27 << 1);
 8004482:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <print_pressure+0xac>)
 8004484:	224e      	movs	r2, #78	; 0x4e
 8004486:	701a      	strb	r2, [r3, #0]
    disp.bl = true;
 8004488:	4b18      	ldr	r3, [pc, #96]	; (80044ec <print_pressure+0xac>)
 800448a:	2223      	movs	r2, #35	; 0x23
 800448c:	2101      	movs	r1, #1
 800448e:	5499      	strb	r1, [r3, r2]
    lcd_init(&disp);
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <print_pressure+0xac>)
 8004492:	0018      	movs	r0, r3
 8004494:	f000 fab2 	bl	80049fc <lcd_init>

    printf("Pressure\r\n");
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <print_pressure+0xb0>)
 800449a:	0018      	movs	r0, r3
 800449c:	f006 f92a 	bl	800a6f4 <puts>
    printf("%0.2f hPa\r\n", avg_press);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fe fa27 	bl	80028f4 <__aeabi_f2d>
 80044a6:	0002      	movs	r2, r0
 80044a8:	000b      	movs	r3, r1
 80044aa:	4912      	ldr	r1, [pc, #72]	; (80044f4 <print_pressure+0xb4>)
 80044ac:	0008      	movs	r0, r1
 80044ae:	f006 f895 	bl	800a5dc <iprintf>
    sprintf((char *)disp.f_line, "Pressure");
 80044b2:	4a11      	ldr	r2, [pc, #68]	; (80044f8 <print_pressure+0xb8>)
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <print_pressure+0xbc>)
 80044b6:	0011      	movs	r1, r2
 80044b8:	0018      	movs	r0, r3
 80044ba:	f006 f929 	bl	800a710 <siprintf>
    sprintf((char *)disp.s_line, "%0.2f hPa", avg_press);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fe fa18 	bl	80028f4 <__aeabi_f2d>
 80044c4:	0002      	movs	r2, r0
 80044c6:	000b      	movs	r3, r1
 80044c8:	490d      	ldr	r1, [pc, #52]	; (8004500 <print_pressure+0xc0>)
 80044ca:	480e      	ldr	r0, [pc, #56]	; (8004504 <print_pressure+0xc4>)
 80044cc:	f006 f920 	bl	800a710 <siprintf>
    lcd_display(&disp);
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <print_pressure+0xac>)
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 fb36 	bl	8004b44 <lcd_display>

}
 80044d8:	46c0      	nop			; (mov r8, r8)
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b002      	add	sp, #8
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	20000280 	.word	0x20000280
 80044e8:	41200000 	.word	0x41200000
 80044ec:	200001fc 	.word	0x200001fc
 80044f0:	0800e4b8 	.word	0x0800e4b8
 80044f4:	0800e4c4 	.word	0x0800e4c4
 80044f8:	0800e4d0 	.word	0x0800e4d0
 80044fc:	200001fd 	.word	0x200001fd
 8004500:	0800e4dc 	.word	0x0800e4dc
 8004504:	2000020e 	.word	0x2000020e

08004508 <get_humidity>:

int8_t  get_humidity(void) {
 8004508:	b590      	push	{r4, r7, lr}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
	int8_t rslt = BME280_E_NULL_PTR;
 800450e:	1dfb      	adds	r3, r7, #7
 8004510:	22ff      	movs	r2, #255	; 0xff
 8004512:	701a      	strb	r2, [r3, #0]

	if(init_done == BME280_OK)
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <get_humidity+0x80>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b25b      	sxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <get_humidity+0x28>
	{
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &bme);
 800451e:	1dfc      	adds	r4, r7, #7
 8004520:	4a1a      	ldr	r2, [pc, #104]	; (800458c <get_humidity+0x84>)
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <get_humidity+0x88>)
 8004524:	0019      	movs	r1, r3
 8004526:	2007      	movs	r0, #7
 8004528:	f7fe fd77 	bl	800301a <bme280_get_sensor_data>
 800452c:	0003      	movs	r3, r0
 800452e:	7023      	strb	r3, [r4, #0]
	}

    date.hum = comp_data.humidity;
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <get_humidity+0x88>)
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	0010      	movs	r0, r2
 8004538:	0019      	movs	r1, r3
 800453a:	f7fe fa23 	bl	8002984 <__aeabi_d2f>
 800453e:	1c02      	adds	r2, r0, #0
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <get_humidity+0x8c>)
 8004542:	609a      	str	r2, [r3, #8]
    date.list_hum[date.list_position_h]=date.hum;
 8004544:	4b13      	ldr	r3, [pc, #76]	; (8004594 <get_humidity+0x8c>)
 8004546:	228c      	movs	r2, #140	; 0x8c
 8004548:	5898      	ldr	r0, [r3, r2]
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <get_humidity+0x8c>)
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	4911      	ldr	r1, [pc, #68]	; (8004594 <get_humidity+0x8c>)
 8004550:	0003      	movs	r3, r0
 8004552:	3316      	adds	r3, #22
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	18cb      	adds	r3, r1, r3
 8004558:	3304      	adds	r3, #4
 800455a:	601a      	str	r2, [r3, #0]
    date.list_position_h=date.list_position_h+1;
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <get_humidity+0x8c>)
 800455e:	228c      	movs	r2, #140	; 0x8c
 8004560:	589b      	ldr	r3, [r3, r2]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <get_humidity+0x8c>)
 8004566:	218c      	movs	r1, #140	; 0x8c
 8004568:	505a      	str	r2, [r3, r1]
    if(date.list_position_h>=BUF_SIZE){
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <get_humidity+0x8c>)
 800456c:	228c      	movs	r2, #140	; 0x8c
 800456e:	589b      	ldr	r3, [r3, r2]
 8004570:	2b09      	cmp	r3, #9
 8004572:	dd03      	ble.n	800457c <get_humidity+0x74>
    	date.list_position_h=0;
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <get_humidity+0x8c>)
 8004576:	228c      	movs	r2, #140	; 0x8c
 8004578:	2100      	movs	r1, #0
 800457a:	5099      	str	r1, [r3, r2]
    }


}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b003      	add	sp, #12
 8004584:	bd90      	pop	{r4, r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	20000310 	.word	0x20000310
 800458c:	20000220 	.word	0x20000220
 8004590:	20000268 	.word	0x20000268
 8004594:	20000280 	.word	0x20000280

08004598 <print_humidity>:

int8_t print_humidity(void){
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0

	float avg_hum=0;
 800459e:	2300      	movs	r3, #0
 80045a0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 80045a2:	2300      	movs	r3, #0
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	e00f      	b.n	80045c8 <print_humidity+0x30>
	    avg_hum=avg_hum+date.list_hum[i];
 80045a8:	4a24      	ldr	r2, [pc, #144]	; (800463c <print_humidity+0xa4>)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	3316      	adds	r3, #22
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	3304      	adds	r3, #4
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	1c19      	adds	r1, r3, #0
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fc f8ff 	bl	80007bc <__aeabi_fadd>
 80045be:	1c03      	adds	r3, r0, #0
 80045c0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i <BUF_SIZE; i++) {
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	3301      	adds	r3, #1
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	ddec      	ble.n	80045a8 <print_humidity+0x10>
	}
	avg_hum=avg_hum/BUF_SIZE;
 80045ce:	491c      	ldr	r1, [pc, #112]	; (8004640 <print_humidity+0xa8>)
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fc fa91 	bl	8000af8 <__aeabi_fdiv>
 80045d6:	1c03      	adds	r3, r0, #0
 80045d8:	607b      	str	r3, [r7, #4]

    disp.addr = (0x27 << 1);
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <print_humidity+0xac>)
 80045dc:	224e      	movs	r2, #78	; 0x4e
 80045de:	701a      	strb	r2, [r3, #0]
    disp.bl = true;
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <print_humidity+0xac>)
 80045e2:	2223      	movs	r2, #35	; 0x23
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]
    lcd_init(&disp);
 80045e8:	4b16      	ldr	r3, [pc, #88]	; (8004644 <print_humidity+0xac>)
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fa06 	bl	80049fc <lcd_init>

    printf("Humidity\r\n");
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <print_humidity+0xb0>)
 80045f2:	0018      	movs	r0, r3
 80045f4:	f006 f87e 	bl	800a6f4 <puts>
    printf("%0.2f \r\n", avg_hum);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7fe f97b 	bl	80028f4 <__aeabi_f2d>
 80045fe:	0002      	movs	r2, r0
 8004600:	000b      	movs	r3, r1
 8004602:	4912      	ldr	r1, [pc, #72]	; (800464c <print_humidity+0xb4>)
 8004604:	0008      	movs	r0, r1
 8004606:	f005 ffe9 	bl	800a5dc <iprintf>
    sprintf((char *)disp.f_line, "Humidity");
 800460a:	4a11      	ldr	r2, [pc, #68]	; (8004650 <print_humidity+0xb8>)
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <print_humidity+0xbc>)
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f006 f87d 	bl	800a710 <siprintf>
    sprintf((char *)disp.s_line, "%0.2f ", avg_hum);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe f96c 	bl	80028f4 <__aeabi_f2d>
 800461c:	0002      	movs	r2, r0
 800461e:	000b      	movs	r3, r1
 8004620:	490d      	ldr	r1, [pc, #52]	; (8004658 <print_humidity+0xc0>)
 8004622:	480e      	ldr	r0, [pc, #56]	; (800465c <print_humidity+0xc4>)
 8004624:	f006 f874 	bl	800a710 <siprintf>
    lcd_display(&disp);
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <print_humidity+0xac>)
 800462a:	0018      	movs	r0, r3
 800462c:	f000 fa8a 	bl	8004b44 <lcd_display>


}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b002      	add	sp, #8
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	20000280 	.word	0x20000280
 8004640:	41200000 	.word	0x41200000
 8004644:	200001fc 	.word	0x200001fc
 8004648:	0800e4e8 	.word	0x0800e4e8
 800464c:	0800e4f4 	.word	0x0800e4f4
 8004650:	0800e500 	.word	0x0800e500
 8004654:	200001fd 	.word	0x200001fd
 8004658:	0800e50c 	.word	0x0800e50c
 800465c:	2000020e 	.word	0x2000020e

08004660 <user_delay_ms>:




void user_delay_ms(uint32_t period)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <user_delay_ms+0x28>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2200      	movs	r2, #0
 800466e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period);
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <user_delay_ms+0x28>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	429a      	cmp	r2, r3
 800467c:	d8f9      	bhi.n	8004672 <user_delay_ms+0x12>
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200003c4 	.word	0x200003c4

0800468c <user_i2c_read>:
int8_t user_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af04      	add	r7, sp, #16
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	240f      	movs	r4, #15
 800469a:	193b      	adds	r3, r7, r4
 800469c:	1c02      	adds	r2, r0, #0
 800469e:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80046a0:	2517      	movs	r5, #23
 80046a2:	197b      	adds	r3, r7, r5
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, intf_ptr, reg_addr, 1, reg_data, len, 100);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b299      	uxth	r1, r3
 80046ac:	193b      	adds	r3, r7, r4
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4808      	ldr	r0, [pc, #32]	; (80046d8 <user_i2c_read+0x4c>)
 80046b8:	2464      	movs	r4, #100	; 0x64
 80046ba:	9402      	str	r4, [sp, #8]
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2301      	movs	r3, #1
 80046c4:	f001 fc88 	bl	8005fd8 <HAL_I2C_Mem_Read>


    return rslt;
 80046c8:	197b      	adds	r3, r7, r5
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	b25b      	sxtb	r3, r3
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b006      	add	sp, #24
 80046d4:	bdb0      	pop	{r4, r5, r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20000314 	.word	0x20000314

080046dc <user_i2c_write>:
int8_t user_i2c_write(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80046dc:	b5b0      	push	{r4, r5, r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	240f      	movs	r4, #15
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	1c02      	adds	r2, r0, #0
 80046ee:	701a      	strb	r2, [r3, #0]
    int8_t rslt = 0; /* Return 0 for Success, non-zero for failure */
 80046f0:	2517      	movs	r5, #23
 80046f2:	197b      	adds	r3, r7, r5
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, intf_ptr, reg_addr, 1, reg_data, len, 100);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	b299      	uxth	r1, r3
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	b29b      	uxth	r3, r3
 8004706:	4808      	ldr	r0, [pc, #32]	; (8004728 <user_i2c_write+0x4c>)
 8004708:	2464      	movs	r4, #100	; 0x64
 800470a:	9402      	str	r4, [sp, #8]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	2301      	movs	r3, #1
 8004714:	f001 fb32 	bl	8005d7c <HAL_I2C_Mem_Write>

    return rslt;
 8004718:	197b      	adds	r3, r7, r5
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b25b      	sxtb	r3, r3
}
 800471e:	0018      	movs	r0, r3
 8004720:	46bd      	mov	sp, r7
 8004722:	b006      	add	sp, #24
 8004724:	bdb0      	pop	{r4, r5, r7, pc}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	20000314 	.word	0x20000314

0800472c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b08b      	sub	sp, #44	; 0x2c
 8004730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004732:	2414      	movs	r4, #20
 8004734:	193b      	adds	r3, r7, r4
 8004736:	0018      	movs	r0, r3
 8004738:	2314      	movs	r3, #20
 800473a:	001a      	movs	r2, r3
 800473c:	2100      	movs	r1, #0
 800473e:	f005 f8cf 	bl	80098e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004742:	4b30      	ldr	r3, [pc, #192]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004748:	2104      	movs	r1, #4
 800474a:	430a      	orrs	r2, r1
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
 800474e:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	2204      	movs	r2, #4
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800475a:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <MX_GPIO_Init+0xd8>)
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	4b29      	ldr	r3, [pc, #164]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	430a      	orrs	r2, r1
 8004764:	62da      	str	r2, [r3, #44]	; 0x2c
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004778:	2101      	movs	r1, #1
 800477a:	430a      	orrs	r2, r1
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800478a:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <MX_GPIO_Init+0xd8>)
 800478c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004790:	2102      	movs	r1, #2
 8004792:	430a      	orrs	r2, r1
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <MX_GPIO_Init+0xd8>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80047a2:	23a0      	movs	r3, #160	; 0xa0
 80047a4:	05db      	lsls	r3, r3, #23
 80047a6:	2200      	movs	r2, #0
 80047a8:	2120      	movs	r1, #32
 80047aa:	0018      	movs	r0, r3
 80047ac:	f001 f92a 	bl	8005a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0192      	lsls	r2, r2, #6
 80047b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047b8:	193b      	adds	r3, r7, r4
 80047ba:	2284      	movs	r2, #132	; 0x84
 80047bc:	0392      	lsls	r2, r2, #14
 80047be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	193b      	adds	r3, r7, r4
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80047c6:	193b      	adds	r3, r7, r4
 80047c8:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <MX_GPIO_Init+0xdc>)
 80047ca:	0019      	movs	r1, r3
 80047cc:	0010      	movs	r0, r2
 80047ce:	f000 ff9b 	bl	8005708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80047d2:	0021      	movs	r1, r4
 80047d4:	187b      	adds	r3, r7, r1
 80047d6:	2220      	movs	r2, #32
 80047d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047da:	187b      	adds	r3, r7, r1
 80047dc:	2201      	movs	r2, #1
 80047de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e6:	187b      	adds	r3, r7, r1
 80047e8:	2200      	movs	r2, #0
 80047ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80047ec:	187a      	adds	r2, r7, r1
 80047ee:	23a0      	movs	r3, #160	; 0xa0
 80047f0:	05db      	lsls	r3, r3, #23
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 ff87 	bl	8005708 <HAL_GPIO_Init>

}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b00b      	add	sp, #44	; 0x2c
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	40021000 	.word	0x40021000
 8004808:	50000800 	.word	0x50000800

0800480c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <MX_I2C1_Init+0x74>)
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <MX_I2C1_Init+0x78>)
 8004814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <MX_I2C1_Init+0x74>)
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <MX_I2C1_Init+0x7c>)
 800481a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <MX_I2C1_Init+0x74>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <MX_I2C1_Init+0x74>)
 8004824:	2201      	movs	r2, #1
 8004826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <MX_I2C1_Init+0x74>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <MX_I2C1_Init+0x74>)
 8004830:	2200      	movs	r2, #0
 8004832:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <MX_I2C1_Init+0x74>)
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <MX_I2C1_Init+0x74>)
 800483c:	2200      	movs	r2, #0
 800483e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <MX_I2C1_Init+0x74>)
 8004842:	2200      	movs	r2, #0
 8004844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <MX_I2C1_Init+0x74>)
 8004848:	0018      	movs	r0, r3
 800484a:	f001 f8f9 	bl	8005a40 <HAL_I2C_Init>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d001      	beq.n	8004856 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004852:	f000 fafd 	bl	8004e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004856:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <MX_I2C1_Init+0x74>)
 8004858:	2100      	movs	r1, #0
 800485a:	0018      	movs	r0, r3
 800485c:	f001 ffea 	bl	8006834 <HAL_I2CEx_ConfigAnalogFilter>
 8004860:	1e03      	subs	r3, r0, #0
 8004862:	d001      	beq.n	8004868 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004864:	f000 faf4 	bl	8004e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004868:	4b05      	ldr	r3, [pc, #20]	; (8004880 <MX_I2C1_Init+0x74>)
 800486a:	2100      	movs	r1, #0
 800486c:	0018      	movs	r0, r3
 800486e:	f002 f82d 	bl	80068cc <HAL_I2CEx_ConfigDigitalFilter>
 8004872:	1e03      	subs	r3, r0, #0
 8004874:	d001      	beq.n	800487a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004876:	f000 faeb 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000314 	.word	0x20000314
 8004884:	40005400 	.word	0x40005400
 8004888:	00707cbb 	.word	0x00707cbb

0800488c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <MX_I2C2_Init+0x74>)
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <MX_I2C2_Init+0x78>)
 8004894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <MX_I2C2_Init+0x74>)
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <MX_I2C2_Init+0x7c>)
 800489a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <MX_I2C2_Init+0x74>)
 800489e:	2200      	movs	r2, #0
 80048a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <MX_I2C2_Init+0x74>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <MX_I2C2_Init+0x74>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <MX_I2C2_Init+0x74>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <MX_I2C2_Init+0x74>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <MX_I2C2_Init+0x74>)
 80048bc:	2200      	movs	r2, #0
 80048be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <MX_I2C2_Init+0x74>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <MX_I2C2_Init+0x74>)
 80048c8:	0018      	movs	r0, r3
 80048ca:	f001 f8b9 	bl	8005a40 <HAL_I2C_Init>
 80048ce:	1e03      	subs	r3, r0, #0
 80048d0:	d001      	beq.n	80048d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80048d2:	f000 fabd 	bl	8004e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <MX_I2C2_Init+0x74>)
 80048d8:	2100      	movs	r1, #0
 80048da:	0018      	movs	r0, r3
 80048dc:	f001 ffaa 	bl	8006834 <HAL_I2CEx_ConfigAnalogFilter>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d001      	beq.n	80048e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80048e4:	f000 fab4 	bl	8004e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <MX_I2C2_Init+0x74>)
 80048ea:	2100      	movs	r1, #0
 80048ec:	0018      	movs	r0, r3
 80048ee:	f001 ffed 	bl	80068cc <HAL_I2CEx_ConfigDigitalFilter>
 80048f2:	1e03      	subs	r3, r0, #0
 80048f4:	d001      	beq.n	80048fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80048f6:	f000 faab 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20000368 	.word	0x20000368
 8004904:	40005800 	.word	0x40005800
 8004908:	00707cbb 	.word	0x00707cbb

0800490c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b08b      	sub	sp, #44	; 0x2c
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	2414      	movs	r4, #20
 8004916:	193b      	adds	r3, r7, r4
 8004918:	0018      	movs	r0, r3
 800491a:	2314      	movs	r3, #20
 800491c:	001a      	movs	r2, r3
 800491e:	2100      	movs	r1, #0
 8004920:	f004 ffde 	bl	80098e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a30      	ldr	r2, [pc, #192]	; (80049ec <HAL_I2C_MspInit+0xe0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d12b      	bne.n	8004986 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492e:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 8004930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 8004934:	2101      	movs	r1, #1
 8004936:	430a      	orrs	r2, r1
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	2201      	movs	r2, #1
 8004940:	4013      	ands	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004946:	193b      	adds	r3, r7, r4
 8004948:	22c0      	movs	r2, #192	; 0xc0
 800494a:	00d2      	lsls	r2, r2, #3
 800494c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800494e:	0021      	movs	r1, r4
 8004950:	187b      	adds	r3, r7, r1
 8004952:	2212      	movs	r2, #18
 8004954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	187b      	adds	r3, r7, r1
 8004958:	2200      	movs	r2, #0
 800495a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	2203      	movs	r2, #3
 8004960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004962:	187b      	adds	r3, r7, r1
 8004964:	2206      	movs	r2, #6
 8004966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004968:	187a      	adds	r2, r7, r1
 800496a:	23a0      	movs	r3, #160	; 0xa0
 800496c:	05db      	lsls	r3, r3, #23
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fec9 	bl	8005708 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004976:	4b1e      	ldr	r3, [pc, #120]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 8004978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 800497c:	2180      	movs	r1, #128	; 0x80
 800497e:	0389      	lsls	r1, r1, #14
 8004980:	430a      	orrs	r2, r1
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004984:	e02e      	b.n	80049e4 <HAL_I2C_MspInit+0xd8>
  else if(i2cHandle->Instance==I2C2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <HAL_I2C_MspInit+0xe8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d129      	bne.n	80049e4 <HAL_I2C_MspInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 8004996:	2102      	movs	r1, #2
 8004998:	430a      	orrs	r2, r1
 800499a:	62da      	str	r2, [r3, #44]	; 0x2c
 800499c:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	2202      	movs	r2, #2
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80049a8:	2114      	movs	r1, #20
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	22c0      	movs	r2, #192	; 0xc0
 80049ae:	0112      	lsls	r2, r2, #4
 80049b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	2212      	movs	r2, #18
 80049b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	2203      	movs	r2, #3
 80049c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	2206      	movs	r2, #6
 80049c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049ca:	187b      	adds	r3, r7, r1
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <HAL_I2C_MspInit+0xec>)
 80049ce:	0019      	movs	r1, r3
 80049d0:	0010      	movs	r0, r2
 80049d2:	f000 fe99 	bl	8005708 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 80049d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_I2C_MspInit+0xe4>)
 80049dc:	2180      	movs	r1, #128	; 0x80
 80049de:	03c9      	lsls	r1, r1, #15
 80049e0:	430a      	orrs	r2, r1
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b00b      	add	sp, #44	; 0x2c
 80049ea:	bd90      	pop	{r4, r7, pc}
 80049ec:	40005400 	.word	0x40005400
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40005800 	.word	0x40005800
 80049f8:	50000400 	.word	0x50000400

080049fc <lcd_init>:
#include "bme280_add.h"



void lcd_init(struct lcd_disp * lcd)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8004a04:	210f      	movs	r1, #15
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
	/* set backlight */
	if(lcd->bl)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2223      	movs	r2, #35	; 0x23
 8004a10:	5c9b      	ldrb	r3, [r3, r2]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <lcd_init+0x20>
	{
		xpin = BL_PIN;
 8004a16:	187b      	adds	r3, r7, r1
 8004a18:	2208      	movs	r2, #8
 8004a1a:	701a      	strb	r2, [r3, #0]
	}

	/* init sequence */
	user_delay_ms(40);
 8004a1c:	2028      	movs	r0, #40	; 0x28
 8004a1e:	f7ff fe1f 	bl	8004660 <user_delay_ms>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	7818      	ldrb	r0, [r3, #0]
 8004a26:	240f      	movs	r4, #15
 8004a28:	193b      	adds	r3, r7, r4
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	001a      	movs	r2, r3
 8004a2e:	2130      	movs	r1, #48	; 0x30
 8004a30:	f000 f82e 	bl	8004a90 <lcd_write>
	user_delay_ms(5);
 8004a34:	2005      	movs	r0, #5
 8004a36:	f7ff fe13 	bl	8004660 <user_delay_ms>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	7818      	ldrb	r0, [r3, #0]
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	001a      	movs	r2, r3
 8004a44:	2130      	movs	r1, #48	; 0x30
 8004a46:	f000 f823 	bl	8004a90 <lcd_write>
	user_delay_ms(1);
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	f7ff fe08 	bl	8004660 <user_delay_ms>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	7818      	ldrb	r0, [r3, #0]
 8004a54:	193b      	adds	r3, r7, r4
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	001a      	movs	r2, r3
 8004a5a:	2130      	movs	r1, #48	; 0x30
 8004a5c:	f000 f818 	bl	8004a90 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	7818      	ldrb	r0, [r3, #0]
 8004a64:	193b      	adds	r3, r7, r4
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	001a      	movs	r2, r3
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	f000 f810 	bl	8004a90 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	7818      	ldrb	r0, [r3, #0]
 8004a74:	193b      	adds	r3, r7, r4
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	001a      	movs	r2, r3
 8004a7a:	210c      	movs	r1, #12
 8004a7c:	f000 f808 	bl	8004a90 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f8ce 	bl	8004c24 <lcd_clear>

}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b005      	add	sp, #20
 8004a8e:	bd90      	pop	{r4, r7, pc}

08004a90 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	0004      	movs	r4, r0
 8004a98:	0008      	movs	r0, r1
 8004a9a:	0011      	movs	r1, r2
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	1c22      	adds	r2, r4, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	1c02      	adds	r2, r0, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
 8004aa8:	1d7b      	adds	r3, r7, #5
 8004aaa:	1c0a      	adds	r2, r1, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8004aae:	1dbb      	adds	r3, r7, #6
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	220f      	movs	r2, #15
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	1d7b      	adds	r3, r7, #5
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	210c      	movs	r1, #12
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | xpin;
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	220f      	movs	r2, #15
 8004ad4:	4393      	bics	r3, r2
 8004ad6:	b25a      	sxtb	r2, r3
 8004ad8:	1d7b      	adds	r3, r7, #5
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8004ae8:	1dbb      	adds	r3, r7, #6
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	1d7b      	adds	r3, r7, #5
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2204      	movs	r2, #4
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	187b      	adds	r3, r7, r1
 8004b00:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4) | xpin;
 8004b02:	1dbb      	adds	r3, r7, #6
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	b25a      	sxtb	r2, r3
 8004b0a:	1d7b      	adds	r3, r7, #5
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b25b      	sxtb	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	0008      	movs	r0, r1
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	70da      	strb	r2, [r3, #3]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b299      	uxth	r1, r3
 8004b22:	183a      	adds	r2, r7, r0
 8004b24:	4806      	ldr	r0, [pc, #24]	; (8004b40 <lcd_write+0xb0>)
 8004b26:	2364      	movs	r3, #100	; 0x64
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	2304      	movs	r3, #4
 8004b2c:	f001 f81e 	bl	8005b6c <HAL_I2C_Master_Transmit>

	user_delay_ms(5);
 8004b30:	2005      	movs	r0, #5
 8004b32:	f7ff fd95 	bl	8004660 <user_delay_ms>
}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b005      	add	sp, #20
 8004b3c:	bd90      	pop	{r4, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	20000368 	.word	0x20000368

08004b44 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8004b4c:	210f      	movs	r1, #15
 8004b4e:	187b      	adds	r3, r7, r1
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	230e      	movs	r3, #14
 8004b56:	18fb      	adds	r3, r7, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2223      	movs	r2, #35	; 0x23
 8004b60:	5c9b      	ldrb	r3, [r3, r2]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <lcd_display+0x28>
	{
		xpin = BL_PIN;
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	2208      	movs	r2, #8
 8004b6a:	701a      	strb	r2, [r3, #0]
	}

	lcd_clear(lcd);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f858 	bl	8004c24 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	7818      	ldrb	r0, [r3, #0]
 8004b78:	230f      	movs	r3, #15
 8004b7a:	18fb      	adds	r3, r7, r3
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	001a      	movs	r2, r3
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	f7ff ff85 	bl	8004a90 <lcd_write>
	while(lcd->f_line[i])
 8004b86:	e015      	b.n	8004bb4 <lcd_display+0x70>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7818      	ldrb	r0, [r3, #0]
 8004b8c:	240e      	movs	r4, #14
 8004b8e:	193b      	adds	r3, r7, r4
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	7859      	ldrb	r1, [r3, #1]
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	f7ff ff73 	bl	8004a90 <lcd_write>
		i++;
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	193b      	adds	r3, r7, r4
 8004bb0:	3201      	adds	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
	while(lcd->f_line[i])
 8004bb4:	210e      	movs	r1, #14
 8004bb6:	187b      	adds	r3, r7, r1
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	18d3      	adds	r3, r2, r3
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e1      	bne.n	8004b88 <lcd_display+0x44>
	}

	/* send second line data */
	i = 0;
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7818      	ldrb	r0, [r3, #0]
 8004bce:	230f      	movs	r3, #15
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	21c0      	movs	r1, #192	; 0xc0
 8004bd8:	f7ff ff5a 	bl	8004a90 <lcd_write>
	while(lcd->s_line[i])
 8004bdc:	e015      	b.n	8004c0a <lcd_display+0xc6>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7818      	ldrb	r0, [r3, #0]
 8004be2:	240e      	movs	r4, #14
 8004be4:	193b      	adds	r3, r7, r4
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	18d3      	adds	r3, r2, r3
 8004bec:	7c99      	ldrb	r1, [r3, #18]
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fb      	adds	r3, r7, r3
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	f7ff ff48 	bl	8004a90 <lcd_write>
		i++;
 8004c00:	193b      	adds	r3, r7, r4
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	3201      	adds	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]
	while(lcd->s_line[i])
 8004c0a:	230e      	movs	r3, #14
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	18d3      	adds	r3, r2, r3
 8004c14:	7c9b      	ldrb	r3, [r3, #18]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e1      	bne.n	8004bde <lcd_display+0x9a>
	}
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b005      	add	sp, #20
 8004c22:	bd90      	pop	{r4, r7, pc}

08004c24 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8004c2c:	210f      	movs	r1, #15
 8004c2e:	187b      	adds	r3, r7, r1
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2223      	movs	r2, #35	; 0x23
 8004c38:	5c9b      	ldrb	r3, [r3, r2]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <lcd_clear+0x20>
	{
		xpin = BL_PIN;
 8004c3e:	187b      	adds	r3, r7, r1
 8004c40:	2208      	movs	r2, #8
 8004c42:	701a      	strb	r2, [r3, #0]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7818      	ldrb	r0, [r3, #0]
 8004c48:	230f      	movs	r3, #15
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	001a      	movs	r2, r3
 8004c50:	2101      	movs	r1, #1
 8004c52:	f7ff ff1d 	bl	8004a90 <lcd_write>
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b004      	add	sp, #16
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c64:	f000 fb7a 	bl	800535c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c68:	f000 f834 	bl	8004cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c6c:	f7ff fd5e 	bl	800472c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004c70:	f000 face 	bl	8005210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004c74:	f7ff fdca 	bl	800480c <MX_I2C1_Init>
  MX_I2C2_Init();
 8004c78:	f7ff fe08 	bl	800488c <MX_I2C2_Init>
  MX_TIM2_Init();
 8004c7c:	f000 fa08 	bl	8005090 <MX_TIM2_Init>
  MX_TIM6_Init();
 8004c80:	f000 fa5c 	bl	800513c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 8004c84:	f7ff fd52 	bl	800472c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004c88:	f000 fac2 	bl	8005210 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004c8c:	f7ff fdbe 	bl	800480c <MX_I2C1_Init>


  HAL_TIM_Base_Start(&htim2);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <main+0x60>)
 8004c92:	0018      	movs	r0, r3
 8004c94:	f002 fe3c 	bl	8007910 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <main+0x64>)
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f002 fe82 	bl	80079a4 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2, &uartData, 1);
 8004ca0:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <main+0x68>)
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <main+0x6c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f003 faf4 	bl	8008294 <HAL_UART_Receive_IT>

  if(BME280_init()!=BME280_OK) {
 8004cac:	f7ff fa56 	bl	800415c <BME280_init>
 8004cb0:	1e03      	subs	r3, r0, #0
 8004cb2:	d003      	beq.n	8004cbc <main+0x5c>
  printf("error init\n");
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <main+0x70>)
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f005 fd1c 	bl	800a6f4 <puts>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004cbc:	e7fe      	b.n	8004cbc <main+0x5c>
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	200003c4 	.word	0x200003c4
 8004cc4:	20000404 	.word	0x20000404
 8004cc8:	200003bc 	.word	0x200003bc
 8004ccc:	20000444 	.word	0x20000444
 8004cd0:	0800e514 	.word	0x0800e514

08004cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b09f      	sub	sp, #124	; 0x7c
 8004cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cda:	2440      	movs	r4, #64	; 0x40
 8004cdc:	193b      	adds	r3, r7, r4
 8004cde:	0018      	movs	r0, r3
 8004ce0:	2338      	movs	r3, #56	; 0x38
 8004ce2:	001a      	movs	r2, r3
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f004 fdfb 	bl	80098e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cea:	232c      	movs	r3, #44	; 0x2c
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	0018      	movs	r0, r3
 8004cf0:	2314      	movs	r3, #20
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f004 fdf3 	bl	80098e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	2328      	movs	r3, #40	; 0x28
 8004d00:	001a      	movs	r2, r3
 8004d02:	2100      	movs	r1, #0
 8004d04:	f004 fdec 	bl	80098e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d08:	4b2a      	ldr	r3, [pc, #168]	; (8004db4 <SystemClock_Config+0xe0>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <SystemClock_Config+0xe4>)
 8004d0e:	401a      	ands	r2, r3
 8004d10:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <SystemClock_Config+0xe0>)
 8004d12:	2180      	movs	r1, #128	; 0x80
 8004d14:	0109      	lsls	r1, r1, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d1a:	0021      	movs	r1, r4
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004d22:	187b      	adds	r3, r7, r1
 8004d24:	22a0      	movs	r2, #160	; 0xa0
 8004d26:	02d2      	lsls	r2, r2, #11
 8004d28:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d2a:	187b      	adds	r3, r7, r1
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2280      	movs	r2, #128	; 0x80
 8004d34:	0252      	lsls	r2, r2, #9
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	22c0      	movs	r2, #192	; 0xc0
 8004d3c:	0312      	lsls	r2, r2, #12
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8004d40:	187b      	adds	r3, r7, r1
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	03d2      	lsls	r2, r2, #15
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d48:	187b      	adds	r3, r7, r1
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f001 fe0a 	bl	8006964 <HAL_RCC_OscConfig>
 8004d50:	1e03      	subs	r3, r0, #0
 8004d52:	d001      	beq.n	8004d58 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004d54:	f000 f87c 	bl	8004e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2203      	movs	r2, #3
 8004d64:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	2200      	movs	r2, #0
 8004d76:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f002 f9c5 	bl	800710c <HAL_RCC_ClockConfig>
 8004d82:	1e03      	subs	r3, r0, #0
 8004d84:	d001      	beq.n	8004d8a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004d86:	f000 f863 	bl	8004e50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	220a      	movs	r2, #10
 8004d8e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d90:	1d3b      	adds	r3, r7, #4
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d96:	1d3b      	adds	r3, r7, #4
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f002 fbd8 	bl	8007554 <HAL_RCCEx_PeriphCLKConfig>
 8004da4:	1e03      	subs	r3, r0, #0
 8004da6:	d001      	beq.n	8004dac <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8004da8:	f000 f852 	bl	8004e50 <Error_Handler>
  }
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	46bd      	mov	sp, r7
 8004db0:	b01f      	add	sp, #124	; 0x7c
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	40007000 	.word	0x40007000
 8004db8:	ffffe7ff 	.word	0xffffe7ff

08004dbc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d105      	bne.n	8004dda <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		get_temperature();
 8004dce:	f7ff fa3b 	bl	8004248 <get_temperature>
		get_pressure();
 8004dd2:	f7ff fae3 	bl	800439c <get_pressure>
		get_humidity();
 8004dd6:	f7ff fb97 	bl	8004508 <get_humidity>

	}
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40001000 	.word	0x40001000

08004de8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <HAL_UART_RxCpltCallback+0x58>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d11e      	bne.n	8004e38 <HAL_UART_RxCpltCallback+0x50>
	{
		if(uartData == 't')
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_UART_RxCpltCallback+0x5c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b74      	cmp	r3, #116	; 0x74
 8004e00:	d102      	bne.n	8004e08 <HAL_UART_RxCpltCallback+0x20>
		{
			print_temperature();
 8004e02:	f7ff fa67 	bl	80042d4 <print_temperature>
 8004e06:	e011      	b.n	8004e2c <HAL_UART_RxCpltCallback+0x44>
		}
		else if(uartData == 'p')
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_UART_RxCpltCallback+0x5c>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b70      	cmp	r3, #112	; 0x70
 8004e0e:	d102      	bne.n	8004e16 <HAL_UART_RxCpltCallback+0x2e>
		{
			print_pressure();
 8004e10:	f7ff fb16 	bl	8004440 <print_pressure>
 8004e14:	e00a      	b.n	8004e2c <HAL_UART_RxCpltCallback+0x44>
		}
		else if(uartData == 'h')
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_UART_RxCpltCallback+0x5c>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b68      	cmp	r3, #104	; 0x68
 8004e1c:	d102      	bne.n	8004e24 <HAL_UART_RxCpltCallback+0x3c>
		{
			print_humidity();
 8004e1e:	f7ff fbbb 	bl	8004598 <print_humidity>
 8004e22:	e003      	b.n	8004e2c <HAL_UART_RxCpltCallback+0x44>
		}
		else
		{
			printf("zly znak");
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <HAL_UART_RxCpltCallback+0x60>)
 8004e26:	0018      	movs	r0, r3
 8004e28:	f005 fbd8 	bl	800a5dc <iprintf>
		}

		HAL_UART_Receive_IT(&huart2, &uartData, 1);
 8004e2c:	4905      	ldr	r1, [pc, #20]	; (8004e44 <HAL_UART_RxCpltCallback+0x5c>)
 8004e2e:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <HAL_UART_RxCpltCallback+0x64>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	0018      	movs	r0, r3
 8004e34:	f003 fa2e 	bl	8008294 <HAL_UART_Receive_IT>
	}
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40004400 	.word	0x40004400
 8004e44:	200003bc 	.word	0x200003bc
 8004e48:	0800e520 	.word	0x0800e520
 8004e4c:	20000444 	.word	0x20000444

08004e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e54:	b672      	cpsid	i
}
 8004e56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e58:	e7fe      	b.n	8004e58 <Error_Handler+0x8>
	...

08004e5c <__io_putchar>:
 *      Author: Kacper
 */
#include "usart.h"

int __io_putchar(int ch)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8004e64:	23fa      	movs	r3, #250	; 0xfa
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	1d39      	adds	r1, r7, #4
 8004e6a:	4804      	ldr	r0, [pc, #16]	; (8004e7c <__io_putchar+0x20>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f003 f971 	bl	8008154 <HAL_UART_Transmit>
	return ch;
 8004e72:	687b      	ldr	r3, [r7, #4]
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000444 	.word	0x20000444

08004e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e84:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <HAL_MspInit+0x24>)
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_MspInit+0x24>)
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <HAL_MspInit+0x24>)
 8004e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_MspInit+0x24>)
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	0549      	lsls	r1, r1, #21
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000

08004ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004eac:	e7fe      	b.n	8004eac <NMI_Handler+0x4>

08004eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eb2:	e7fe      	b.n	8004eb2 <HardFault_Handler+0x4>

08004eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ecc:	f000 fa9a 	bl	8005404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <TIM6_DAC_IRQHandler+0x14>)
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f002 fdb2 	bl	8007a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	20000404 	.word	0x20000404

08004ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <USART2_IRQHandler+0x14>)
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f003 fa2a 	bl	8008350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004efc:	46c0      	nop			; (mov r8, r8)
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	20000444 	.word	0x20000444

08004f08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  return 1;
 8004f0c:	2301      	movs	r3, #1
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_kill>:

int _kill(int pid, int sig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f1e:	f004 fcb5 	bl	800988c <__errno>
 8004f22:	0003      	movs	r3, r0
 8004f24:	2216      	movs	r2, #22
 8004f26:	601a      	str	r2, [r3, #0]
  return -1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	425b      	negs	r3, r3
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_exit>:

void _exit (int status)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	425a      	negs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f7ff ffe5 	bl	8004f14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f4a:	e7fe      	b.n	8004f4a <_exit+0x16>

08004f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e00a      	b.n	8004f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f5e:	e000      	b.n	8004f62 <_read+0x16>
 8004f60:	bf00      	nop
 8004f62:	0001      	movs	r1, r0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	60ba      	str	r2, [r7, #8]
 8004f6a:	b2ca      	uxtb	r2, r1
 8004f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	dbf0      	blt.n	8004f5e <_read+0x12>
  }

  return len;
 8004f7c:	687b      	ldr	r3, [r7, #4]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b006      	add	sp, #24
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e009      	b.n	8004fac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	60ba      	str	r2, [r7, #8]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff ff5b 	bl	8004e5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	dbf1      	blt.n	8004f98 <_write+0x12>
  }
  return len;
 8004fb4:	687b      	ldr	r3, [r7, #4]
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b006      	add	sp, #24
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <_close>:

int _close(int file)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	425b      	negs	r3, r3
}
 8004fca:	0018      	movs	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b002      	add	sp, #8
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2280      	movs	r2, #128	; 0x80
 8004fe0:	0192      	lsls	r2, r2, #6
 8004fe2:	605a      	str	r2, [r3, #4]
  return 0;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b002      	add	sp, #8
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_isatty>:

int _isatty(int file)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ff6:	2301      	movs	r3, #1
}
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	b002      	add	sp, #8
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800500c:	2300      	movs	r3, #0
}
 800500e:	0018      	movs	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	b004      	add	sp, #16
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005020:	4a14      	ldr	r2, [pc, #80]	; (8005074 <_sbrk+0x5c>)
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <_sbrk+0x60>)
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <_sbrk+0x64>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005034:	4b11      	ldr	r3, [pc, #68]	; (800507c <_sbrk+0x64>)
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <_sbrk+0x68>)
 8005038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <_sbrk+0x64>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	18d3      	adds	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d207      	bcs.n	8005058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005048:	f004 fc20 	bl	800988c <__errno>
 800504c:	0003      	movs	r3, r0
 800504e:	220c      	movs	r2, #12
 8005050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005052:	2301      	movs	r3, #1
 8005054:	425b      	negs	r3, r3
 8005056:	e009      	b.n	800506c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <_sbrk+0x64>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <_sbrk+0x64>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	18d2      	adds	r2, r2, r3
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <_sbrk+0x64>)
 8005068:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800506a:	68fb      	ldr	r3, [r7, #12]
}
 800506c:	0018      	movs	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	b006      	add	sp, #24
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20005000 	.word	0x20005000
 8005078:	00000400 	.word	0x00000400
 800507c:	200003c0 	.word	0x200003c0
 8005080:	200004e0 	.word	0x200004e0

08005084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005096:	2308      	movs	r3, #8
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	0018      	movs	r0, r3
 800509c:	2310      	movs	r3, #16
 800509e:	001a      	movs	r2, r3
 80050a0:	2100      	movs	r1, #0
 80050a2:	f004 fc1d 	bl	80098e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050a6:	003b      	movs	r3, r7
 80050a8:	0018      	movs	r0, r3
 80050aa:	2308      	movs	r3, #8
 80050ac:	001a      	movs	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	f004 fc16 	bl	80098e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	05d2      	lsls	r2, r2, #23
 80050ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80050bc:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <MX_TIM2_Init+0xa4>)
 80050c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050c2:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050ca:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <MX_TIM2_Init+0xa8>)
 80050cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050ce:	4b18      	ldr	r3, [pc, #96]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050d4:	4b16      	ldr	r3, [pc, #88]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050dc:	0018      	movs	r0, r3
 80050de:	f002 fbd7 	bl	8007890 <HAL_TIM_Base_Init>
 80050e2:	1e03      	subs	r3, r0, #0
 80050e4:	d001      	beq.n	80050ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80050e6:	f7ff feb3 	bl	8004e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050ea:	2108      	movs	r1, #8
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	0152      	lsls	r2, r2, #5
 80050f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050f4:	187a      	adds	r2, r7, r1
 80050f6:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <MX_TIM2_Init+0xa0>)
 80050f8:	0011      	movs	r1, r2
 80050fa:	0018      	movs	r0, r3
 80050fc:	f002 fd8c 	bl	8007c18 <HAL_TIM_ConfigClockSource>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d001      	beq.n	8005108 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005104:	f7ff fea4 	bl	8004e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005108:	003b      	movs	r3, r7
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800510e:	003b      	movs	r3, r7
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005114:	003a      	movs	r2, r7
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <MX_TIM2_Init+0xa0>)
 8005118:	0011      	movs	r1, r2
 800511a:	0018      	movs	r0, r3
 800511c:	f002 ff68 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8005120:	1e03      	subs	r3, r0, #0
 8005122:	d001      	beq.n	8005128 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8005124:	f7ff fe94 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bd80      	pop	{r7, pc}
 8005130:	200003c4 	.word	0x200003c4
 8005134:	00007cff 	.word	0x00007cff
 8005138:	0000fffe 	.word	0x0000fffe

0800513c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005142:	003b      	movs	r3, r7
 8005144:	0018      	movs	r0, r3
 8005146:	2308      	movs	r3, #8
 8005148:	001a      	movs	r2, r3
 800514a:	2100      	movs	r1, #0
 800514c:	f004 fbc8 	bl	80098e0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005150:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <MX_TIM6_Init+0x6c>)
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <MX_TIM6_Init+0x70>)
 8005154:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3199;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <MX_TIM6_Init+0x6c>)
 8005158:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <MX_TIM6_Init+0x74>)
 800515a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <MX_TIM6_Init+0x6c>)
 800515e:	2200      	movs	r2, #0
 8005160:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <MX_TIM6_Init+0x6c>)
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <MX_TIM6_Init+0x78>)
 8005166:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <MX_TIM6_Init+0x6c>)
 800516a:	2280      	movs	r2, #128	; 0x80
 800516c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <MX_TIM6_Init+0x6c>)
 8005170:	0018      	movs	r0, r3
 8005172:	f002 fb8d 	bl	8007890 <HAL_TIM_Base_Init>
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	d001      	beq.n	800517e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800517a:	f7ff fe69 	bl	8004e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800517e:	003b      	movs	r3, r7
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005184:	003b      	movs	r3, r7
 8005186:	2200      	movs	r2, #0
 8005188:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800518a:	003a      	movs	r2, r7
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <MX_TIM6_Init+0x6c>)
 800518e:	0011      	movs	r1, r2
 8005190:	0018      	movs	r0, r3
 8005192:	f002 ff2d 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d001      	beq.n	800519e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800519a:	f7ff fe59 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b002      	add	sp, #8
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	20000404 	.word	0x20000404
 80051ac:	40001000 	.word	0x40001000
 80051b0:	00000c7f 	.word	0x00000c7f
 80051b4:	0000270f 	.word	0x0000270f

080051b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	05db      	lsls	r3, r3, #23
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d106      	bne.n	80051da <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_TIM_Base_MspInit+0x50>)
 80051ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_TIM_Base_MspInit+0x50>)
 80051d2:	2101      	movs	r1, #1
 80051d4:	430a      	orrs	r2, r1
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80051d8:	e012      	b.n	8005200 <HAL_TIM_Base_MspInit+0x48>
  else if(tim_baseHandle->Instance==TIM6)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a0b      	ldr	r2, [pc, #44]	; (800520c <HAL_TIM_Base_MspInit+0x54>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10d      	bne.n	8005200 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_TIM_Base_MspInit+0x50>)
 80051e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_TIM_Base_MspInit+0x50>)
 80051ea:	2110      	movs	r1, #16
 80051ec:	430a      	orrs	r2, r1
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80051f0:	2200      	movs	r2, #0
 80051f2:	2100      	movs	r1, #0
 80051f4:	2011      	movs	r0, #17
 80051f6:	f000 f9cd 	bl	8005594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051fa:	2011      	movs	r0, #17
 80051fc:	f000 f9df 	bl	80055be <HAL_NVIC_EnableIRQ>
}
 8005200:	46c0      	nop			; (mov r8, r8)
 8005202:	46bd      	mov	sp, r7
 8005204:	b002      	add	sp, #8
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	40001000 	.word	0x40001000

08005210 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005214:	4b14      	ldr	r3, [pc, #80]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <MX_USART2_UART_Init+0x5c>)
 8005218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <MX_USART2_UART_Init+0x58>)
 800521c:	22e1      	movs	r2, #225	; 0xe1
 800521e:	0252      	lsls	r2, r2, #9
 8005220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005222:	4b11      	ldr	r3, [pc, #68]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <MX_USART2_UART_Init+0x58>)
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800522e:	4b0e      	ldr	r3, [pc, #56]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005234:	4b0c      	ldr	r3, [pc, #48]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005236:	220c      	movs	r2, #12
 8005238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <MX_USART2_UART_Init+0x58>)
 800523c:	2200      	movs	r2, #0
 800523e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005246:	4b08      	ldr	r3, [pc, #32]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005248:	2200      	movs	r2, #0
 800524a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <MX_USART2_UART_Init+0x58>)
 800524e:	2200      	movs	r2, #0
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <MX_USART2_UART_Init+0x58>)
 8005254:	0018      	movs	r0, r3
 8005256:	f002 ff29 	bl	80080ac <HAL_UART_Init>
 800525a:	1e03      	subs	r3, r0, #0
 800525c:	d001      	beq.n	8005262 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800525e:	f7ff fdf7 	bl	8004e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000444 	.word	0x20000444
 800526c:	40004400 	.word	0x40004400

08005270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b089      	sub	sp, #36	; 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005278:	240c      	movs	r4, #12
 800527a:	193b      	adds	r3, r7, r4
 800527c:	0018      	movs	r0, r3
 800527e:	2314      	movs	r3, #20
 8005280:	001a      	movs	r2, r3
 8005282:	2100      	movs	r1, #0
 8005284:	f004 fb2c 	bl	80098e0 <memset>
  if(uartHandle->Instance==USART2)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <HAL_UART_MspInit+0x90>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d131      	bne.n	80052f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <HAL_UART_MspInit+0x94>)
 8005294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_UART_MspInit+0x94>)
 8005298:	2180      	movs	r1, #128	; 0x80
 800529a:	0289      	lsls	r1, r1, #10
 800529c:	430a      	orrs	r2, r1
 800529e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_UART_MspInit+0x94>)
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4b17      	ldr	r3, [pc, #92]	; (8005304 <HAL_UART_MspInit+0x94>)
 80052a6:	2101      	movs	r1, #1
 80052a8:	430a      	orrs	r2, r1
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <HAL_UART_MspInit+0x94>)
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	2201      	movs	r2, #1
 80052b2:	4013      	ands	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80052b8:	0021      	movs	r1, r4
 80052ba:	187b      	adds	r3, r7, r1
 80052bc:	220c      	movs	r2, #12
 80052be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c0:	187b      	adds	r3, r7, r1
 80052c2:	2202      	movs	r2, #2
 80052c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	187b      	adds	r3, r7, r1
 80052c8:	2200      	movs	r2, #0
 80052ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	2203      	movs	r2, #3
 80052d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80052d2:	187b      	adds	r3, r7, r1
 80052d4:	2204      	movs	r2, #4
 80052d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d8:	187a      	adds	r2, r7, r1
 80052da:	23a0      	movs	r3, #160	; 0xa0
 80052dc:	05db      	lsls	r3, r3, #23
 80052de:	0011      	movs	r1, r2
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 fa11 	bl	8005708 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80052e6:	2200      	movs	r2, #0
 80052e8:	2100      	movs	r1, #0
 80052ea:	201c      	movs	r0, #28
 80052ec:	f000 f952 	bl	8005594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052f0:	201c      	movs	r0, #28
 80052f2:	f000 f964 	bl	80055be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b009      	add	sp, #36	; 0x24
 80052fc:	bd90      	pop	{r4, r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	40004400 	.word	0x40004400
 8005304:	40021000 	.word	0x40021000

08005308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005308:	480d      	ldr	r0, [pc, #52]	; (8005340 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800530a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800530c:	f7ff feba 	bl	8005084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005310:	480c      	ldr	r0, [pc, #48]	; (8005344 <LoopForever+0x6>)
  ldr r1, =_edata
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005314:	4a0d      	ldr	r2, [pc, #52]	; (800534c <LoopForever+0xe>)
  movs r3, #0
 8005316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005318:	e002      	b.n	8005320 <LoopCopyDataInit>

0800531a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800531a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800531c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800531e:	3304      	adds	r3, #4

08005320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005324:	d3f9      	bcc.n	800531a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005326:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005328:	4c0a      	ldr	r4, [pc, #40]	; (8005354 <LoopForever+0x16>)
  movs r3, #0
 800532a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800532c:	e001      	b.n	8005332 <LoopFillZerobss>

0800532e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800532e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005330:	3204      	adds	r2, #4

08005332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005334:	d3fb      	bcc.n	800532e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8005336:	f004 faaf 	bl	8009898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800533a:	f7ff fc91 	bl	8004c60 <main>

0800533e <LoopForever>:

LoopForever:
    b LoopForever
 800533e:	e7fe      	b.n	800533e <LoopForever>
   ldr   r0, =_estack
 8005340:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005348:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800534c:	0800eb54 	.word	0x0800eb54
  ldr r2, =_sbss
 8005350:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005354:	200004e0 	.word	0x200004e0

08005358 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005358:	e7fe      	b.n	8005358 <ADC1_COMP_IRQHandler>
	...

0800535c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005362:	1dfb      	adds	r3, r7, #7
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_Init+0x3c>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_Init+0x3c>)
 800536e:	2140      	movs	r1, #64	; 0x40
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005374:	2000      	movs	r0, #0
 8005376:	f000 f811 	bl	800539c <HAL_InitTick>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d003      	beq.n	8005386 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800537e:	1dfb      	adds	r3, r7, #7
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e001      	b.n	800538a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005386:	f7ff fd7b 	bl	8004e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800538a:	1dfb      	adds	r3, r7, #7
 800538c:	781b      	ldrb	r3, [r3, #0]
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b002      	add	sp, #8
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	40022000 	.word	0x40022000

0800539c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053a4:	4b14      	ldr	r3, [pc, #80]	; (80053f8 <HAL_InitTick+0x5c>)
 80053a6:	681c      	ldr	r4, [r3, #0]
 80053a8:	4b14      	ldr	r3, [pc, #80]	; (80053fc <HAL_InitTick+0x60>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	0019      	movs	r1, r3
 80053ae:	23fa      	movs	r3, #250	; 0xfa
 80053b0:	0098      	lsls	r0, r3, #2
 80053b2:	f7fa fec5 	bl	8000140 <__udivsi3>
 80053b6:	0003      	movs	r3, r0
 80053b8:	0019      	movs	r1, r3
 80053ba:	0020      	movs	r0, r4
 80053bc:	f7fa fec0 	bl	8000140 <__udivsi3>
 80053c0:	0003      	movs	r3, r0
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 f90b 	bl	80055de <HAL_SYSTICK_Config>
 80053c8:	1e03      	subs	r3, r0, #0
 80053ca:	d001      	beq.n	80053d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e00f      	b.n	80053f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d80b      	bhi.n	80053ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	2301      	movs	r3, #1
 80053da:	425b      	negs	r3, r3
 80053dc:	2200      	movs	r2, #0
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 f8d8 	bl	8005594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_InitTick+0x64>)
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e000      	b.n	80053f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
}
 80053f0:	0018      	movs	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b003      	add	sp, #12
 80053f6:	bd90      	pop	{r4, r7, pc}
 80053f8:	20000000 	.word	0x20000000
 80053fc:	20000008 	.word	0x20000008
 8005400:	20000004 	.word	0x20000004

08005404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_IncTick+0x1c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	001a      	movs	r2, r3
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_IncTick+0x20>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	18d2      	adds	r2, r2, r3
 8005414:	4b03      	ldr	r3, [pc, #12]	; (8005424 <HAL_IncTick+0x20>)
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	46c0      	nop			; (mov r8, r8)
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	20000008 	.word	0x20000008
 8005424:	200004cc 	.word	0x200004cc

08005428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  return uwTick;
 800542c:	4b02      	ldr	r3, [pc, #8]	; (8005438 <HAL_GetTick+0x10>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	200004cc 	.word	0x200004cc

0800543c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	0002      	movs	r2, r0
 8005444:	1dfb      	adds	r3, r7, #7
 8005446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005448:	1dfb      	adds	r3, r7, #7
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b7f      	cmp	r3, #127	; 0x7f
 800544e:	d809      	bhi.n	8005464 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	001a      	movs	r2, r3
 8005456:	231f      	movs	r3, #31
 8005458:	401a      	ands	r2, r3
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <__NVIC_EnableIRQ+0x30>)
 800545c:	2101      	movs	r1, #1
 800545e:	4091      	lsls	r1, r2
 8005460:	000a      	movs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]
  }
}
 8005464:	46c0      	nop			; (mov r8, r8)
 8005466:	46bd      	mov	sp, r7
 8005468:	b002      	add	sp, #8
 800546a:	bd80      	pop	{r7, pc}
 800546c:	e000e100 	.word	0xe000e100

08005470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	0002      	movs	r2, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	1dfb      	adds	r3, r7, #7
 800547c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800547e:	1dfb      	adds	r3, r7, #7
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b7f      	cmp	r3, #127	; 0x7f
 8005484:	d828      	bhi.n	80054d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005486:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <__NVIC_SetPriority+0xd4>)
 8005488:	1dfb      	adds	r3, r7, #7
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b25b      	sxtb	r3, r3
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	33c0      	adds	r3, #192	; 0xc0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	589b      	ldr	r3, [r3, r2]
 8005496:	1dfa      	adds	r2, r7, #7
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	0011      	movs	r1, r2
 800549c:	2203      	movs	r2, #3
 800549e:	400a      	ands	r2, r1
 80054a0:	00d2      	lsls	r2, r2, #3
 80054a2:	21ff      	movs	r1, #255	; 0xff
 80054a4:	4091      	lsls	r1, r2
 80054a6:	000a      	movs	r2, r1
 80054a8:	43d2      	mvns	r2, r2
 80054aa:	401a      	ands	r2, r3
 80054ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	019b      	lsls	r3, r3, #6
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	401a      	ands	r2, r3
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	0018      	movs	r0, r3
 80054bc:	2303      	movs	r3, #3
 80054be:	4003      	ands	r3, r0
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054c4:	481f      	ldr	r0, [pc, #124]	; (8005544 <__NVIC_SetPriority+0xd4>)
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b25b      	sxtb	r3, r3
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	430a      	orrs	r2, r1
 80054d0:	33c0      	adds	r3, #192	; 0xc0
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80054d6:	e031      	b.n	800553c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054d8:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <__NVIC_SetPriority+0xd8>)
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	0019      	movs	r1, r3
 80054e0:	230f      	movs	r3, #15
 80054e2:	400b      	ands	r3, r1
 80054e4:	3b08      	subs	r3, #8
 80054e6:	089b      	lsrs	r3, r3, #2
 80054e8:	3306      	adds	r3, #6
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	3304      	adds	r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1dfa      	adds	r2, r7, #7
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	0011      	movs	r1, r2
 80054f8:	2203      	movs	r2, #3
 80054fa:	400a      	ands	r2, r1
 80054fc:	00d2      	lsls	r2, r2, #3
 80054fe:	21ff      	movs	r1, #255	; 0xff
 8005500:	4091      	lsls	r1, r2
 8005502:	000a      	movs	r2, r1
 8005504:	43d2      	mvns	r2, r2
 8005506:	401a      	ands	r2, r3
 8005508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	22ff      	movs	r2, #255	; 0xff
 8005510:	401a      	ands	r2, r3
 8005512:	1dfb      	adds	r3, r7, #7
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	0018      	movs	r0, r3
 8005518:	2303      	movs	r3, #3
 800551a:	4003      	ands	r3, r0
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <__NVIC_SetPriority+0xd8>)
 8005522:	1dfb      	adds	r3, r7, #7
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	001c      	movs	r4, r3
 8005528:	230f      	movs	r3, #15
 800552a:	4023      	ands	r3, r4
 800552c:	3b08      	subs	r3, #8
 800552e:	089b      	lsrs	r3, r3, #2
 8005530:	430a      	orrs	r2, r1
 8005532:	3306      	adds	r3, #6
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	18c3      	adds	r3, r0, r3
 8005538:	3304      	adds	r3, #4
 800553a:	601a      	str	r2, [r3, #0]
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b003      	add	sp, #12
 8005542:	bd90      	pop	{r4, r7, pc}
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1e5a      	subs	r2, r3, #1
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	045b      	lsls	r3, r3, #17
 800555c:	429a      	cmp	r2, r3
 800555e:	d301      	bcc.n	8005564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005560:	2301      	movs	r3, #1
 8005562:	e010      	b.n	8005586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <SysTick_Config+0x44>)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	3a01      	subs	r2, #1
 800556a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800556c:	2301      	movs	r3, #1
 800556e:	425b      	negs	r3, r3
 8005570:	2103      	movs	r1, #3
 8005572:	0018      	movs	r0, r3
 8005574:	f7ff ff7c 	bl	8005470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005578:	4b05      	ldr	r3, [pc, #20]	; (8005590 <SysTick_Config+0x44>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SysTick_Config+0x44>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b002      	add	sp, #8
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	e000e010 	.word	0xe000e010

08005594 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	210f      	movs	r1, #15
 80055a0:	187b      	adds	r3, r7, r1
 80055a2:	1c02      	adds	r2, r0, #0
 80055a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	0011      	movs	r1, r2
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff ff5d 	bl	8005470 <__NVIC_SetPriority>
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b004      	add	sp, #16
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	0002      	movs	r2, r0
 80055c6:	1dfb      	adds	r3, r7, #7
 80055c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055ca:	1dfb      	adds	r3, r7, #7
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b25b      	sxtb	r3, r3
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff ff33 	bl	800543c <__NVIC_EnableIRQ>
}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b002      	add	sp, #8
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f7ff ffaf 	bl	800554c <SysTick_Config>
 80055ee:	0003      	movs	r3, r0
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	230f      	movs	r3, #15
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2225      	movs	r2, #37	; 0x25
 800560c:	5c9b      	ldrb	r3, [r3, r2]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d008      	beq.n	8005626 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2204      	movs	r2, #4
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2224      	movs	r2, #36	; 0x24
 800561e:	2100      	movs	r1, #0
 8005620:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e024      	b.n	8005670 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	210e      	movs	r1, #14
 8005632:	438a      	bics	r2, r1
 8005634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2101      	movs	r1, #1
 8005642:	438a      	bics	r2, r1
 8005644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	221c      	movs	r2, #28
 800564c:	401a      	ands	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2101      	movs	r1, #1
 8005654:	4091      	lsls	r1, r2
 8005656:	000a      	movs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2225      	movs	r2, #37	; 0x25
 800565e:	2101      	movs	r1, #1
 8005660:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2224      	movs	r2, #36	; 0x24
 8005666:	2100      	movs	r1, #0
 8005668:	5499      	strb	r1, [r3, r2]

    return status;
 800566a:	230f      	movs	r3, #15
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b004      	add	sp, #16
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	210f      	movs	r1, #15
 8005682:	187b      	adds	r3, r7, r1
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2225      	movs	r2, #37	; 0x25
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d006      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2204      	movs	r2, #4
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800569a:	187b      	adds	r3, r7, r1
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e02a      	b.n	80056f8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	210e      	movs	r1, #14
 80056ae:	438a      	bics	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2101      	movs	r1, #1
 80056be:	438a      	bics	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c6:	221c      	movs	r2, #28
 80056c8:	401a      	ands	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2101      	movs	r1, #1
 80056d0:	4091      	lsls	r1, r2
 80056d2:	000a      	movs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2225      	movs	r2, #37	; 0x25
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2224      	movs	r2, #36	; 0x24
 80056e2:	2100      	movs	r1, #0
 80056e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d004      	beq.n	80056f8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	0010      	movs	r0, r2
 80056f6:	4798      	blx	r3
    }
  }
  return status;
 80056f8:	230f      	movs	r3, #15
 80056fa:	18fb      	adds	r3, r7, r3
 80056fc:	781b      	ldrb	r3, [r3, #0]
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b004      	add	sp, #16
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800571e:	e155      	b.n	80059cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2101      	movs	r1, #1
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4091      	lsls	r1, r2
 800572a:	000a      	movs	r2, r1
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d100      	bne.n	8005738 <HAL_GPIO_Init+0x30>
 8005736:	e146      	b.n	80059c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2203      	movs	r2, #3
 800573e:	4013      	ands	r3, r2
 8005740:	2b01      	cmp	r3, #1
 8005742:	d005      	beq.n	8005750 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2203      	movs	r2, #3
 800574a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800574c:	2b02      	cmp	r3, #2
 800574e:	d130      	bne.n	80057b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	2203      	movs	r2, #3
 800575c:	409a      	lsls	r2, r3
 800575e:	0013      	movs	r3, r2
 8005760:	43da      	mvns	r2, r3
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4013      	ands	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	409a      	lsls	r2, r3
 8005772:	0013      	movs	r3, r2
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005786:	2201      	movs	r2, #1
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	409a      	lsls	r2, r3
 800578c:	0013      	movs	r3, r2
 800578e:	43da      	mvns	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4013      	ands	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	2201      	movs	r2, #1
 800579e:	401a      	ands	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	409a      	lsls	r2, r3
 80057a4:	0013      	movs	r3, r2
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2203      	movs	r2, #3
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d017      	beq.n	80057ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	2203      	movs	r2, #3
 80057ca:	409a      	lsls	r2, r3
 80057cc:	0013      	movs	r3, r2
 80057ce:	43da      	mvns	r2, r3
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	409a      	lsls	r2, r3
 80057e0:	0013      	movs	r3, r2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d123      	bne.n	8005842 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	08da      	lsrs	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3208      	adds	r2, #8
 8005802:	0092      	lsls	r2, r2, #2
 8005804:	58d3      	ldr	r3, [r2, r3]
 8005806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2207      	movs	r2, #7
 800580c:	4013      	ands	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	220f      	movs	r2, #15
 8005812:	409a      	lsls	r2, r3
 8005814:	0013      	movs	r3, r2
 8005816:	43da      	mvns	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4013      	ands	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2107      	movs	r1, #7
 8005826:	400b      	ands	r3, r1
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	409a      	lsls	r2, r3
 800582c:	0013      	movs	r3, r2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	08da      	lsrs	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3208      	adds	r2, #8
 800583c:	0092      	lsls	r2, r2, #2
 800583e:	6939      	ldr	r1, [r7, #16]
 8005840:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	2203      	movs	r2, #3
 800584e:	409a      	lsls	r2, r3
 8005850:	0013      	movs	r3, r2
 8005852:	43da      	mvns	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4013      	ands	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2203      	movs	r2, #3
 8005860:	401a      	ands	r2, r3
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	409a      	lsls	r2, r3
 8005868:	0013      	movs	r3, r2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	23c0      	movs	r3, #192	; 0xc0
 800587c:	029b      	lsls	r3, r3, #10
 800587e:	4013      	ands	r3, r2
 8005880:	d100      	bne.n	8005884 <HAL_GPIO_Init+0x17c>
 8005882:	e0a0      	b.n	80059c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005884:	4b57      	ldr	r3, [pc, #348]	; (80059e4 <HAL_GPIO_Init+0x2dc>)
 8005886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005888:	4b56      	ldr	r3, [pc, #344]	; (80059e4 <HAL_GPIO_Init+0x2dc>)
 800588a:	2101      	movs	r1, #1
 800588c:	430a      	orrs	r2, r1
 800588e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005890:	4a55      	ldr	r2, [pc, #340]	; (80059e8 <HAL_GPIO_Init+0x2e0>)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	3302      	adds	r3, #2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	589b      	ldr	r3, [r3, r2]
 800589c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2203      	movs	r2, #3
 80058a2:	4013      	ands	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	220f      	movs	r2, #15
 80058a8:	409a      	lsls	r2, r3
 80058aa:	0013      	movs	r3, r2
 80058ac:	43da      	mvns	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4013      	ands	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	23a0      	movs	r3, #160	; 0xa0
 80058b8:	05db      	lsls	r3, r3, #23
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d01f      	beq.n	80058fe <HAL_GPIO_Init+0x1f6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a4a      	ldr	r2, [pc, #296]	; (80059ec <HAL_GPIO_Init+0x2e4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d019      	beq.n	80058fa <HAL_GPIO_Init+0x1f2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a49      	ldr	r2, [pc, #292]	; (80059f0 <HAL_GPIO_Init+0x2e8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_GPIO_Init+0x1ee>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a48      	ldr	r2, [pc, #288]	; (80059f4 <HAL_GPIO_Init+0x2ec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00d      	beq.n	80058f2 <HAL_GPIO_Init+0x1ea>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a47      	ldr	r2, [pc, #284]	; (80059f8 <HAL_GPIO_Init+0x2f0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <HAL_GPIO_Init+0x1e6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a46      	ldr	r2, [pc, #280]	; (80059fc <HAL_GPIO_Init+0x2f4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_GPIO_Init+0x1e2>
 80058e6:	2305      	movs	r3, #5
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058ea:	2306      	movs	r3, #6
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x1f8>
 80058fe:	2300      	movs	r3, #0
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	2103      	movs	r1, #3
 8005904:	400a      	ands	r2, r1
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005910:	4935      	ldr	r1, [pc, #212]	; (80059e8 <HAL_GPIO_Init+0x2e0>)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800591e:	4b38      	ldr	r3, [pc, #224]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	43da      	mvns	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4013      	ands	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	035b      	lsls	r3, r3, #13
 8005936:	4013      	ands	r3, r2
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005942:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005948:	4b2d      	ldr	r3, [pc, #180]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	43da      	mvns	r2, r3
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4013      	ands	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	039b      	lsls	r3, r3, #14
 8005960:	4013      	ands	r3, r2
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005972:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	43da      	mvns	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4013      	ands	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	029b      	lsls	r3, r3, #10
 800598a:	4013      	ands	r3, r2
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005996:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	43da      	mvns	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4013      	ands	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	2380      	movs	r3, #128	; 0x80
 80059b2:	025b      	lsls	r3, r3, #9
 80059b4:	4013      	ands	r3, r2
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_GPIO_Init+0x2f8>)
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3301      	adds	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	40da      	lsrs	r2, r3
 80059d4:	1e13      	subs	r3, r2, #0
 80059d6:	d000      	beq.n	80059da <HAL_GPIO_Init+0x2d2>
 80059d8:	e6a2      	b.n	8005720 <HAL_GPIO_Init+0x18>
  }
}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	b006      	add	sp, #24
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40021000 	.word	0x40021000
 80059e8:	40010000 	.word	0x40010000
 80059ec:	50000400 	.word	0x50000400
 80059f0:	50000800 	.word	0x50000800
 80059f4:	50000c00 	.word	0x50000c00
 80059f8:	50001000 	.word	0x50001000
 80059fc:	50001c00 	.word	0x50001c00
 8005a00:	40010400 	.word	0x40010400

08005a04 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	0008      	movs	r0, r1
 8005a0e:	0011      	movs	r1, r2
 8005a10:	1cbb      	adds	r3, r7, #2
 8005a12:	1c02      	adds	r2, r0, #0
 8005a14:	801a      	strh	r2, [r3, #0]
 8005a16:	1c7b      	adds	r3, r7, #1
 8005a18:	1c0a      	adds	r2, r1, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a1c:	1c7b      	adds	r3, r7, #1
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a24:	1cbb      	adds	r3, r7, #2
 8005a26:	881a      	ldrh	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005a2c:	e003      	b.n	8005a36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005a2e:	1cbb      	adds	r3, r7, #2
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e082      	b.n	8005b58 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2241      	movs	r2, #65	; 0x41
 8005a56:	5c9b      	ldrb	r3, [r3, r2]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d107      	bne.n	8005a6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2240      	movs	r2, #64	; 0x40
 8005a62:	2100      	movs	r1, #0
 8005a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	0018      	movs	r0, r3
 8005a6a:	f7fe ff4f 	bl	800490c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2241      	movs	r2, #65	; 0x41
 8005a72:	2124      	movs	r1, #36	; 0x24
 8005a74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2101      	movs	r1, #1
 8005a82:	438a      	bics	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4934      	ldr	r1, [pc, #208]	; (8005b60 <HAL_I2C_Init+0x120>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4931      	ldr	r1, [pc, #196]	; (8005b64 <HAL_I2C_Init+0x124>)
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d108      	bne.n	8005abe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2180      	movs	r1, #128	; 0x80
 8005ab6:	0209      	lsls	r1, r1, #8
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	e007      	b.n	8005ace <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2184      	movs	r1, #132	; 0x84
 8005ac8:	0209      	lsls	r1, r1, #8
 8005aca:	430a      	orrs	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d104      	bne.n	8005ae0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	0112      	lsls	r2, r2, #4
 8005ade:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	491f      	ldr	r1, [pc, #124]	; (8005b68 <HAL_I2C_Init+0x128>)
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	491a      	ldr	r1, [pc, #104]	; (8005b64 <HAL_I2C_Init+0x124>)
 8005afc:	400a      	ands	r2, r1
 8005afe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69d9      	ldr	r1, [r3, #28]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1a      	ldr	r2, [r3, #32]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2241      	movs	r2, #65	; 0x41
 8005b44:	2120      	movs	r1, #32
 8005b46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2242      	movs	r2, #66	; 0x42
 8005b52:	2100      	movs	r1, #0
 8005b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	0018      	movs	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	b002      	add	sp, #8
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	f0ffffff 	.word	0xf0ffffff
 8005b64:	ffff7fff 	.word	0xffff7fff
 8005b68:	02008000 	.word	0x02008000

08005b6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b6c:	b590      	push	{r4, r7, lr}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	0008      	movs	r0, r1
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	0019      	movs	r1, r3
 8005b7a:	230a      	movs	r3, #10
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	1c02      	adds	r2, r0, #0
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	2308      	movs	r3, #8
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	1c0a      	adds	r2, r1, #0
 8005b88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2241      	movs	r2, #65	; 0x41
 8005b8e:	5c9b      	ldrb	r3, [r3, r2]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d000      	beq.n	8005b98 <HAL_I2C_Master_Transmit+0x2c>
 8005b96:	e0e7      	b.n	8005d68 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	5c9b      	ldrb	r3, [r3, r2]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_I2C_Master_Transmit+0x3a>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0e1      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2240      	movs	r2, #64	; 0x40
 8005baa:	2101      	movs	r1, #1
 8005bac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bae:	f7ff fc3b 	bl	8005428 <HAL_GetTick>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	0219      	lsls	r1, r3, #8
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2319      	movs	r3, #25
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f000 fc24 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d001      	beq.n	8005bd0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0cc      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2241      	movs	r2, #65	; 0x41
 8005bd4:	2121      	movs	r1, #33	; 0x21
 8005bd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2242      	movs	r2, #66	; 0x42
 8005bdc:	2110      	movs	r1, #16
 8005bde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	18ba      	adds	r2, r7, r2
 8005bf2:	8812      	ldrh	r2, [r2, #0]
 8005bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2bff      	cmp	r3, #255	; 0xff
 8005c04:	d911      	bls.n	8005c2a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	22ff      	movs	r2, #255	; 0xff
 8005c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	045c      	lsls	r4, r3, #17
 8005c16:	230a      	movs	r3, #10
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	8819      	ldrh	r1, [r3, #0]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	4b55      	ldr	r3, [pc, #340]	; (8005d74 <HAL_I2C_Master_Transmit+0x208>)
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	0023      	movs	r3, r4
 8005c24:	f000 fdcc 	bl	80067c0 <I2C_TransferConfig>
 8005c28:	e075      	b.n	8005d16 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	049c      	lsls	r4, r3, #18
 8005c3e:	230a      	movs	r3, #10
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	8819      	ldrh	r1, [r3, #0]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	4b4b      	ldr	r3, [pc, #300]	; (8005d74 <HAL_I2C_Master_Transmit+0x208>)
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	0023      	movs	r3, r4
 8005c4c:	f000 fdb8 	bl	80067c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c50:	e061      	b.n	8005d16 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f000 fc27 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005c5e:	1e03      	subs	r3, r0, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e081      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d03a      	beq.n	8005d16 <HAL_I2C_Master_Transmit+0x1aa>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d136      	bne.n	8005d16 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	0013      	movs	r3, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	f000 fbab 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005cba:	1e03      	subs	r3, r0, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e053      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2bff      	cmp	r3, #255	; 0xff
 8005cca:	d911      	bls.n	8005cf0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	045c      	lsls	r4, r3, #17
 8005cdc:	230a      	movs	r3, #10
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	8819      	ldrh	r1, [r3, #0]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	0023      	movs	r3, r4
 8005cea:	f000 fd69 	bl	80067c0 <I2C_TransferConfig>
 8005cee:	e012      	b.n	8005d16 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	049c      	lsls	r4, r3, #18
 8005d04:	230a      	movs	r3, #10
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	8819      	ldrh	r1, [r3, #0]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	0023      	movs	r3, r4
 8005d12:	f000 fd55 	bl	80067c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d198      	bne.n	8005c52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f000 fc06 	bl	8006538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d2c:	1e03      	subs	r3, r0, #0
 8005d2e:	d001      	beq.n	8005d34 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e01a      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	490c      	ldr	r1, [pc, #48]	; (8005d78 <HAL_I2C_Master_Transmit+0x20c>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2241      	movs	r2, #65	; 0x41
 8005d50:	2120      	movs	r1, #32
 8005d52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2242      	movs	r2, #66	; 0x42
 8005d58:	2100      	movs	r1, #0
 8005d5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2240      	movs	r2, #64	; 0x40
 8005d60:	2100      	movs	r1, #0
 8005d62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b007      	add	sp, #28
 8005d70:	bd90      	pop	{r4, r7, pc}
 8005d72:	46c0      	nop			; (mov r8, r8)
 8005d74:	80002000 	.word	0x80002000
 8005d78:	fe00e800 	.word	0xfe00e800

08005d7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	000c      	movs	r4, r1
 8005d86:	0010      	movs	r0, r2
 8005d88:	0019      	movs	r1, r3
 8005d8a:	230a      	movs	r3, #10
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	1c22      	adds	r2, r4, #0
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	2308      	movs	r3, #8
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	1c02      	adds	r2, r0, #0
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	1dbb      	adds	r3, r7, #6
 8005d9c:	1c0a      	adds	r2, r1, #0
 8005d9e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2241      	movs	r2, #65	; 0x41
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d000      	beq.n	8005dae <HAL_I2C_Mem_Write+0x32>
 8005dac:	e10c      	b.n	8005fc8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <HAL_I2C_Mem_Write+0x42>
 8005db4:	232c      	movs	r3, #44	; 0x2c
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d105      	bne.n	8005dca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	0092      	lsls	r2, r2, #2
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e0ff      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	5c9b      	ldrb	r3, [r3, r2]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2C_Mem_Write+0x5c>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e0f8      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2240      	movs	r2, #64	; 0x40
 8005ddc:	2101      	movs	r1, #1
 8005dde:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005de0:	f7ff fb22 	bl	8005428 <HAL_GetTick>
 8005de4:	0003      	movs	r3, r0
 8005de6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	0219      	lsls	r1, r3, #8
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	2319      	movs	r3, #25
 8005df4:	2201      	movs	r2, #1
 8005df6:	f000 fb0b 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005dfa:	1e03      	subs	r3, r0, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0e3      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2241      	movs	r2, #65	; 0x41
 8005e06:	2121      	movs	r1, #33	; 0x21
 8005e08:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2242      	movs	r2, #66	; 0x42
 8005e0e:	2140      	movs	r1, #64	; 0x40
 8005e10:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	222c      	movs	r2, #44	; 0x2c
 8005e22:	18ba      	adds	r2, r7, r2
 8005e24:	8812      	ldrh	r2, [r2, #0]
 8005e26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e2e:	1dbb      	adds	r3, r7, #6
 8005e30:	881c      	ldrh	r4, [r3, #0]
 8005e32:	2308      	movs	r3, #8
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	230a      	movs	r3, #10
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	8819      	ldrh	r1, [r3, #0]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	0023      	movs	r3, r4
 8005e4a:	f000 f9f9 	bl	8006240 <I2C_RequestMemoryWrite>
 8005e4e:	1e03      	subs	r3, r0, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2240      	movs	r2, #64	; 0x40
 8005e56:	2100      	movs	r1, #0
 8005e58:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0b5      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2bff      	cmp	r3, #255	; 0xff
 8005e66:	d911      	bls.n	8005e8c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	22ff      	movs	r2, #255	; 0xff
 8005e6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	045c      	lsls	r4, r3, #17
 8005e78:	230a      	movs	r3, #10
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	8819      	ldrh	r1, [r3, #0]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	0023      	movs	r3, r4
 8005e86:	f000 fc9b 	bl	80067c0 <I2C_TransferConfig>
 8005e8a:	e012      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	049c      	lsls	r4, r3, #18
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	8819      	ldrh	r1, [r3, #0]
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	0023      	movs	r3, r4
 8005eae:	f000 fc87 	bl	80067c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 faf7 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 8005ebe:	1e03      	subs	r3, r0, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e081      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d03a      	beq.n	8005f76 <HAL_I2C_Mem_Write+0x1fa>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d136      	bne.n	8005f76 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	0013      	movs	r3, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	2180      	movs	r1, #128	; 0x80
 8005f16:	f000 fa7b 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8005f1a:	1e03      	subs	r3, r0, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e053      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2bff      	cmp	r3, #255	; 0xff
 8005f2a:	d911      	bls.n	8005f50 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	22ff      	movs	r2, #255	; 0xff
 8005f30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	045c      	lsls	r4, r3, #17
 8005f3c:	230a      	movs	r3, #10
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	8819      	ldrh	r1, [r3, #0]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	2300      	movs	r3, #0
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	0023      	movs	r3, r4
 8005f4a:	f000 fc39 	bl	80067c0 <I2C_TransferConfig>
 8005f4e:	e012      	b.n	8005f76 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	049c      	lsls	r4, r3, #18
 8005f64:	230a      	movs	r3, #10
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	8819      	ldrh	r1, [r3, #0]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	0023      	movs	r3, r4
 8005f72:	f000 fc25 	bl	80067c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d198      	bne.n	8005eb2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 fad6 	bl	8006538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f8c:	1e03      	subs	r3, r0, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e01a      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	490b      	ldr	r1, [pc, #44]	; (8005fd4 <HAL_I2C_Mem_Write+0x258>)
 8005fa8:	400a      	ands	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2241      	movs	r2, #65	; 0x41
 8005fb0:	2120      	movs	r1, #32
 8005fb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2242      	movs	r2, #66	; 0x42
 8005fb8:	2100      	movs	r1, #0
 8005fba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2240      	movs	r2, #64	; 0x40
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b007      	add	sp, #28
 8005fd0:	bd90      	pop	{r4, r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	fe00e800 	.word	0xfe00e800

08005fd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b089      	sub	sp, #36	; 0x24
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	000c      	movs	r4, r1
 8005fe2:	0010      	movs	r0, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	230a      	movs	r3, #10
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	1c22      	adds	r2, r4, #0
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	2308      	movs	r3, #8
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	1c02      	adds	r2, r0, #0
 8005ff4:	801a      	strh	r2, [r3, #0]
 8005ff6:	1dbb      	adds	r3, r7, #6
 8005ff8:	1c0a      	adds	r2, r1, #0
 8005ffa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2241      	movs	r2, #65	; 0x41
 8006000:	5c9b      	ldrb	r3, [r3, r2]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b20      	cmp	r3, #32
 8006006:	d000      	beq.n	800600a <HAL_I2C_Mem_Read+0x32>
 8006008:	e110      	b.n	800622c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d004      	beq.n	800601a <HAL_I2C_Mem_Read+0x42>
 8006010:	232c      	movs	r3, #44	; 0x2c
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d105      	bne.n	8006026 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e103      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2240      	movs	r2, #64	; 0x40
 800602a:	5c9b      	ldrb	r3, [r3, r2]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_I2C_Mem_Read+0x5c>
 8006030:	2302      	movs	r3, #2
 8006032:	e0fc      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	2101      	movs	r1, #1
 800603a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800603c:	f7ff f9f4 	bl	8005428 <HAL_GetTick>
 8006040:	0003      	movs	r3, r0
 8006042:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	0219      	lsls	r1, r3, #8
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	2319      	movs	r3, #25
 8006050:	2201      	movs	r2, #1
 8006052:	f000 f9dd 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d001      	beq.n	800605e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e0e7      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2241      	movs	r2, #65	; 0x41
 8006062:	2122      	movs	r1, #34	; 0x22
 8006064:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2242      	movs	r2, #66	; 0x42
 800606a:	2140      	movs	r1, #64	; 0x40
 800606c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	222c      	movs	r2, #44	; 0x2c
 800607e:	18ba      	adds	r2, r7, r2
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800608a:	1dbb      	adds	r3, r7, #6
 800608c:	881c      	ldrh	r4, [r3, #0]
 800608e:	2308      	movs	r3, #8
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	881a      	ldrh	r2, [r3, #0]
 8006094:	230a      	movs	r3, #10
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	8819      	ldrh	r1, [r3, #0]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	0023      	movs	r3, r4
 80060a6:	f000 f92f 	bl	8006308 <I2C_RequestMemoryRead>
 80060aa:	1e03      	subs	r3, r0, #0
 80060ac:	d005      	beq.n	80060ba <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2240      	movs	r2, #64	; 0x40
 80060b2:	2100      	movs	r1, #0
 80060b4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0b9      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2bff      	cmp	r3, #255	; 0xff
 80060c2:	d911      	bls.n	80060e8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	045c      	lsls	r4, r3, #17
 80060d4:	230a      	movs	r3, #10
 80060d6:	18fb      	adds	r3, r7, r3
 80060d8:	8819      	ldrh	r1, [r3, #0]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	4b56      	ldr	r3, [pc, #344]	; (8006238 <HAL_I2C_Mem_Read+0x260>)
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	0023      	movs	r3, r4
 80060e2:	f000 fb6d 	bl	80067c0 <I2C_TransferConfig>
 80060e6:	e012      	b.n	800610e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	049c      	lsls	r4, r3, #18
 80060fc:	230a      	movs	r3, #10
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	8819      	ldrh	r1, [r3, #0]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	4b4c      	ldr	r3, [pc, #304]	; (8006238 <HAL_I2C_Mem_Read+0x260>)
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	0023      	movs	r3, r4
 800610a:	f000 fb59 	bl	80067c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800610e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	0013      	movs	r3, r2
 8006118:	2200      	movs	r2, #0
 800611a:	2104      	movs	r1, #4
 800611c:	f000 f978 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 8006120:	1e03      	subs	r3, r0, #0
 8006122:	d001      	beq.n	8006128 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e082      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d03a      	beq.n	80061da <HAL_I2C_Mem_Read+0x202>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	d136      	bne.n	80061da <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	0013      	movs	r3, r2
 8006176:	2200      	movs	r2, #0
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	f000 f949 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 800617e:	1e03      	subs	r3, r0, #0
 8006180:	d001      	beq.n	8006186 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e053      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	2bff      	cmp	r3, #255	; 0xff
 800618e:	d911      	bls.n	80061b4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	22ff      	movs	r2, #255	; 0xff
 8006194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	b2da      	uxtb	r2, r3
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	045c      	lsls	r4, r3, #17
 80061a0:	230a      	movs	r3, #10
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	8819      	ldrh	r1, [r3, #0]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	0023      	movs	r3, r4
 80061ae:	f000 fb07 	bl	80067c0 <I2C_TransferConfig>
 80061b2:	e012      	b.n	80061da <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	2380      	movs	r3, #128	; 0x80
 80061c6:	049c      	lsls	r4, r3, #18
 80061c8:	230a      	movs	r3, #10
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	8819      	ldrh	r1, [r3, #0]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	2300      	movs	r3, #0
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	0023      	movs	r3, r4
 80061d6:	f000 faf3 	bl	80067c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d194      	bne.n	800610e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 f9a4 	bl	8006538 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061f0:	1e03      	subs	r3, r0, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e01a      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2220      	movs	r2, #32
 80061fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	490c      	ldr	r1, [pc, #48]	; (800623c <HAL_I2C_Mem_Read+0x264>)
 800620c:	400a      	ands	r2, r1
 800620e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2241      	movs	r2, #65	; 0x41
 8006214:	2120      	movs	r1, #32
 8006216:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2242      	movs	r2, #66	; 0x42
 800621c:	2100      	movs	r1, #0
 800621e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2240      	movs	r2, #64	; 0x40
 8006224:	2100      	movs	r1, #0
 8006226:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b007      	add	sp, #28
 8006234:	bd90      	pop	{r4, r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	80002400 	.word	0x80002400
 800623c:	fe00e800 	.word	0xfe00e800

08006240 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006240:	b5b0      	push	{r4, r5, r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	000c      	movs	r4, r1
 800624a:	0010      	movs	r0, r2
 800624c:	0019      	movs	r1, r3
 800624e:	250a      	movs	r5, #10
 8006250:	197b      	adds	r3, r7, r5
 8006252:	1c22      	adds	r2, r4, #0
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	2308      	movs	r3, #8
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	1c02      	adds	r2, r0, #0
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	1dbb      	adds	r3, r7, #6
 8006260:	1c0a      	adds	r2, r1, #0
 8006262:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	045c      	lsls	r4, r3, #17
 800626e:	197b      	adds	r3, r7, r5
 8006270:	8819      	ldrh	r1, [r3, #0]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	4b23      	ldr	r3, [pc, #140]	; (8006304 <I2C_RequestMemoryWrite+0xc4>)
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	0023      	movs	r3, r4
 800627a:	f000 faa1 	bl	80067c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006280:	6a39      	ldr	r1, [r7, #32]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	0018      	movs	r0, r3
 8006286:	f000 f911 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 800628a:	1e03      	subs	r3, r0, #0
 800628c:	d001      	beq.n	8006292 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e033      	b.n	80062fa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006292:	1dbb      	adds	r3, r7, #6
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d107      	bne.n	80062aa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800629a:	2308      	movs	r3, #8
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
 80062a8:	e019      	b.n	80062de <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062aa:	2308      	movs	r3, #8
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062be:	6a39      	ldr	r1, [r7, #32]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	0018      	movs	r0, r3
 80062c4:	f000 f8f2 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e014      	b.n	80062fa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062d0:	2308      	movs	r3, #8
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	0013      	movs	r3, r2
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	f000 f890 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	1e03      	subs	r3, r0, #0
 80062f2:	d001      	beq.n	80062f8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	0018      	movs	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	b004      	add	sp, #16
 8006300:	bdb0      	pop	{r4, r5, r7, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	80002000 	.word	0x80002000

08006308 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	000c      	movs	r4, r1
 8006312:	0010      	movs	r0, r2
 8006314:	0019      	movs	r1, r3
 8006316:	250a      	movs	r5, #10
 8006318:	197b      	adds	r3, r7, r5
 800631a:	1c22      	adds	r2, r4, #0
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	2308      	movs	r3, #8
 8006320:	18fb      	adds	r3, r7, r3
 8006322:	1c02      	adds	r2, r0, #0
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	1dbb      	adds	r3, r7, #6
 8006328:	1c0a      	adds	r2, r1, #0
 800632a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800632c:	1dbb      	adds	r3, r7, #6
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	197b      	adds	r3, r7, r5
 8006334:	8819      	ldrh	r1, [r3, #0]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <I2C_RequestMemoryRead+0xc0>)
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	f000 fa3f 	bl	80067c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	6a39      	ldr	r1, [r7, #32]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	0018      	movs	r0, r3
 800634a:	f000 f8af 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 800634e:	1e03      	subs	r3, r0, #0
 8006350:	d001      	beq.n	8006356 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e033      	b.n	80063be <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006356:	1dbb      	adds	r3, r7, #6
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800635e:	2308      	movs	r3, #8
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28
 800636c:	e019      	b.n	80063a2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800636e:	2308      	movs	r3, #8
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	b29b      	uxth	r3, r3
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	6a39      	ldr	r1, [r7, #32]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0018      	movs	r0, r3
 8006388:	f000 f890 	bl	80064ac <I2C_WaitOnTXISFlagUntilTimeout>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d001      	beq.n	8006394 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e014      	b.n	80063be <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006394:	2308      	movs	r3, #8
 8006396:	18fb      	adds	r3, r7, r3
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	0013      	movs	r3, r2
 80063ac:	2200      	movs	r2, #0
 80063ae:	2140      	movs	r1, #64	; 0x40
 80063b0:	f000 f82e 	bl	8006410 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	1e03      	subs	r3, r0, #0
 80063b6:	d001      	beq.n	80063bc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b004      	add	sp, #16
 80063c4:	bdb0      	pop	{r4, r5, r7, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	80002000 	.word	0x80002000

080063cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2202      	movs	r2, #2
 80063dc:	4013      	ands	r3, r2
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d103      	bne.n	80063ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2200      	movs	r2, #0
 80063e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2201      	movs	r2, #1
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d007      	beq.n	8006408 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2101      	movs	r1, #1
 8006404:	430a      	orrs	r2, r1
 8006406:	619a      	str	r2, [r3, #24]
  }
}
 8006408:	46c0      	nop			; (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	b002      	add	sp, #8
 800640e:	bd80      	pop	{r7, pc}

08006410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	1dfb      	adds	r3, r7, #7
 800641e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006420:	e030      	b.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	d02d      	beq.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006428:	f7fe fffe 	bl	8005428 <HAL_GetTick>
 800642c:	0002      	movs	r2, r0
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d122      	bne.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	425a      	negs	r2, r3
 800644e:	4153      	adcs	r3, r2
 8006450:	b2db      	uxtb	r3, r3
 8006452:	001a      	movs	r2, r3
 8006454:	1dfb      	adds	r3, r7, #7
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d113      	bne.n	8006484 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006460:	2220      	movs	r2, #32
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2241      	movs	r2, #65	; 0x41
 800646c:	2120      	movs	r1, #32
 800646e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2242      	movs	r2, #66	; 0x42
 8006474:	2100      	movs	r1, #0
 8006476:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	2100      	movs	r1, #0
 800647e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e00f      	b.n	80064a4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	4013      	ands	r3, r2
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	425a      	negs	r2, r3
 8006494:	4153      	adcs	r3, r2
 8006496:	b2db      	uxtb	r3, r3
 8006498:	001a      	movs	r2, r3
 800649a:	1dfb      	adds	r3, r7, #7
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d0bf      	beq.n	8006422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b004      	add	sp, #16
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064b8:	e032      	b.n	8006520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f000 f87d 	bl	80065c0 <I2C_IsErrorOccurred>
 80064c6:	1e03      	subs	r3, r0, #0
 80064c8:	d001      	beq.n	80064ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e030      	b.n	8006530 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3301      	adds	r3, #1
 80064d2:	d025      	beq.n	8006520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d4:	f7fe ffa8 	bl	8005428 <HAL_GetTick>
 80064d8:	0002      	movs	r2, r0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d302      	bcc.n	80064ea <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d11a      	bne.n	8006520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2202      	movs	r2, #2
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d013      	beq.n	8006520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fc:	2220      	movs	r2, #32
 80064fe:	431a      	orrs	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2241      	movs	r2, #65	; 0x41
 8006508:	2120      	movs	r1, #32
 800650a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2242      	movs	r2, #66	; 0x42
 8006510:	2100      	movs	r1, #0
 8006512:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2240      	movs	r2, #64	; 0x40
 8006518:	2100      	movs	r1, #0
 800651a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e007      	b.n	8006530 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d1c5      	bne.n	80064ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	b004      	add	sp, #16
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006544:	e02f      	b.n	80065a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f837 	bl	80065c0 <I2C_IsErrorOccurred>
 8006552:	1e03      	subs	r3, r0, #0
 8006554:	d001      	beq.n	800655a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e02d      	b.n	80065b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fe ff65 	bl	8005428 <HAL_GetTick>
 800655e:	0002      	movs	r2, r0
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11a      	bne.n	80065a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2220      	movs	r2, #32
 8006578:	4013      	ands	r3, r2
 800657a:	2b20      	cmp	r3, #32
 800657c:	d013      	beq.n	80065a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	2220      	movs	r2, #32
 8006584:	431a      	orrs	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2241      	movs	r2, #65	; 0x41
 800658e:	2120      	movs	r1, #32
 8006590:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2242      	movs	r2, #66	; 0x42
 8006596:	2100      	movs	r1, #0
 8006598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2240      	movs	r2, #64	; 0x40
 800659e:	2100      	movs	r1, #0
 80065a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e007      	b.n	80065b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	2220      	movs	r2, #32
 80065ae:	4013      	ands	r3, r2
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d1c8      	bne.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b004      	add	sp, #16
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b08b      	sub	sp, #44	; 0x2c
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065cc:	2327      	movs	r3, #39	; 0x27
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2210      	movs	r2, #16
 80065e8:	4013      	ands	r3, r2
 80065ea:	d100      	bne.n	80065ee <I2C_IsErrorOccurred+0x2e>
 80065ec:	e082      	b.n	80066f4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2210      	movs	r2, #16
 80065f4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065f6:	e060      	b.n	80066ba <I2C_IsErrorOccurred+0xfa>
 80065f8:	2427      	movs	r4, #39	; 0x27
 80065fa:	193b      	adds	r3, r7, r4
 80065fc:	193a      	adds	r2, r7, r4
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3301      	adds	r3, #1
 8006606:	d058      	beq.n	80066ba <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fe ff0e 	bl	8005428 <HAL_GetTick>
 800660c:	0002      	movs	r2, r0
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	429a      	cmp	r2, r3
 8006616:	d306      	bcc.n	8006626 <I2C_IsErrorOccurred+0x66>
 8006618:	193b      	adds	r3, r7, r4
 800661a:	193a      	adds	r2, r7, r4
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d149      	bne.n	80066ba <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	2380      	movs	r3, #128	; 0x80
 800662e:	01db      	lsls	r3, r3, #7
 8006630:	4013      	ands	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006634:	2013      	movs	r0, #19
 8006636:	183b      	adds	r3, r7, r0
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	2142      	movs	r1, #66	; 0x42
 800663c:	5c52      	ldrb	r2, [r2, r1]
 800663e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	2380      	movs	r3, #128	; 0x80
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	401a      	ands	r2, r3
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	021b      	lsls	r3, r3, #8
 8006650:	429a      	cmp	r2, r3
 8006652:	d126      	bne.n	80066a2 <I2C_IsErrorOccurred+0xe2>
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	2380      	movs	r3, #128	; 0x80
 8006658:	01db      	lsls	r3, r3, #7
 800665a:	429a      	cmp	r2, r3
 800665c:	d021      	beq.n	80066a2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800665e:	183b      	adds	r3, r7, r0
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b20      	cmp	r3, #32
 8006664:	d01d      	beq.n	80066a2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2180      	movs	r1, #128	; 0x80
 8006672:	01c9      	lsls	r1, r1, #7
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006678:	f7fe fed6 	bl	8005428 <HAL_GetTick>
 800667c:	0003      	movs	r3, r0
 800667e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006680:	e00f      	b.n	80066a2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006682:	f7fe fed1 	bl	8005428 <HAL_GetTick>
 8006686:	0002      	movs	r2, r0
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b19      	cmp	r3, #25
 800668e:	d908      	bls.n	80066a2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2220      	movs	r2, #32
 8006694:	4313      	orrs	r3, r2
 8006696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006698:	2327      	movs	r3, #39	; 0x27
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]

              break;
 80066a0:	e00b      	b.n	80066ba <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	2220      	movs	r2, #32
 80066aa:	4013      	ands	r3, r2
 80066ac:	2127      	movs	r1, #39	; 0x27
 80066ae:	187a      	adds	r2, r7, r1
 80066b0:	1879      	adds	r1, r7, r1
 80066b2:	7809      	ldrb	r1, [r1, #0]
 80066b4:	7011      	strb	r1, [r2, #0]
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d1e3      	bne.n	8006682 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	2220      	movs	r2, #32
 80066c2:	4013      	ands	r3, r2
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d004      	beq.n	80066d2 <I2C_IsErrorOccurred+0x112>
 80066c8:	2327      	movs	r3, #39	; 0x27
 80066ca:	18fb      	adds	r3, r7, r3
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d092      	beq.n	80065f8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066d2:	2327      	movs	r3, #39	; 0x27
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2220      	movs	r2, #32
 80066e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	2204      	movs	r2, #4
 80066e8:	4313      	orrs	r3, r2
 80066ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066ec:	2327      	movs	r3, #39	; 0x27
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	4013      	ands	r3, r2
 8006704:	d00c      	beq.n	8006720 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	2201      	movs	r2, #1
 800670a:	4313      	orrs	r3, r2
 800670c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006718:	2327      	movs	r3, #39	; 0x27
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	2380      	movs	r3, #128	; 0x80
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4013      	ands	r3, r2
 8006728:	d00c      	beq.n	8006744 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	2208      	movs	r2, #8
 800672e:	4313      	orrs	r3, r2
 8006730:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2280      	movs	r2, #128	; 0x80
 8006738:	00d2      	lsls	r2, r2, #3
 800673a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800673c:	2327      	movs	r3, #39	; 0x27
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	2201      	movs	r2, #1
 8006742:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4013      	ands	r3, r2
 800674c:	d00c      	beq.n	8006768 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	2202      	movs	r2, #2
 8006752:	4313      	orrs	r3, r2
 8006754:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	0092      	lsls	r2, r2, #2
 800675e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006760:	2327      	movs	r3, #39	; 0x27
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006768:	2327      	movs	r3, #39	; 0x27
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01d      	beq.n	80067ae <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0018      	movs	r0, r3
 8006776:	f7ff fe29 	bl	80063cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	490d      	ldr	r1, [pc, #52]	; (80067bc <I2C_IsErrorOccurred+0x1fc>)
 8006786:	400a      	ands	r2, r1
 8006788:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	431a      	orrs	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2241      	movs	r2, #65	; 0x41
 800679a:	2120      	movs	r1, #32
 800679c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2242      	movs	r2, #66	; 0x42
 80067a2:	2100      	movs	r1, #0
 80067a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2240      	movs	r2, #64	; 0x40
 80067aa:	2100      	movs	r1, #0
 80067ac:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80067ae:	2327      	movs	r3, #39	; 0x27
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	781b      	ldrb	r3, [r3, #0]
}
 80067b4:	0018      	movs	r0, r3
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b00b      	add	sp, #44	; 0x2c
 80067ba:	bd90      	pop	{r4, r7, pc}
 80067bc:	fe00e800 	.word	0xfe00e800

080067c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	0008      	movs	r0, r1
 80067ca:	0011      	movs	r1, r2
 80067cc:	607b      	str	r3, [r7, #4]
 80067ce:	240a      	movs	r4, #10
 80067d0:	193b      	adds	r3, r7, r4
 80067d2:	1c02      	adds	r2, r0, #0
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	2009      	movs	r0, #9
 80067d8:	183b      	adds	r3, r7, r0
 80067da:	1c0a      	adds	r2, r1, #0
 80067dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067de:	193b      	adds	r3, r7, r4
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	059b      	lsls	r3, r3, #22
 80067e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067e6:	183b      	adds	r3, r7, r0
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	0419      	lsls	r1, r3, #16
 80067ec:	23ff      	movs	r3, #255	; 0xff
 80067ee:	041b      	lsls	r3, r3, #16
 80067f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	4313      	orrs	r3, r2
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800680a:	0d51      	lsrs	r1, r2, #21
 800680c:	2280      	movs	r2, #128	; 0x80
 800680e:	00d2      	lsls	r2, r2, #3
 8006810:	400a      	ands	r2, r1
 8006812:	4907      	ldr	r1, [pc, #28]	; (8006830 <I2C_TransferConfig+0x70>)
 8006814:	430a      	orrs	r2, r1
 8006816:	43d2      	mvns	r2, r2
 8006818:	401a      	ands	r2, r3
 800681a:	0011      	movs	r1, r2
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	46bd      	mov	sp, r7
 800682a:	b007      	add	sp, #28
 800682c:	bd90      	pop	{r4, r7, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	03ff63ff 	.word	0x03ff63ff

08006834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2241      	movs	r2, #65	; 0x41
 8006842:	5c9b      	ldrb	r3, [r3, r2]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b20      	cmp	r3, #32
 8006848:	d138      	bne.n	80068bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	5c9b      	ldrb	r3, [r3, r2]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006854:	2302      	movs	r3, #2
 8006856:	e032      	b.n	80068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2240      	movs	r2, #64	; 0x40
 800685c:	2101      	movs	r1, #1
 800685e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2241      	movs	r2, #65	; 0x41
 8006864:	2124      	movs	r1, #36	; 0x24
 8006866:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2101      	movs	r1, #1
 8006874:	438a      	bics	r2, r1
 8006876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4911      	ldr	r1, [pc, #68]	; (80068c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006884:	400a      	ands	r2, r1
 8006886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2101      	movs	r1, #1
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2241      	movs	r2, #65	; 0x41
 80068ac:	2120      	movs	r1, #32
 80068ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2240      	movs	r2, #64	; 0x40
 80068b4:	2100      	movs	r1, #0
 80068b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	ffffefff 	.word	0xffffefff

080068cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2241      	movs	r2, #65	; 0x41
 80068da:	5c9b      	ldrb	r3, [r3, r2]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d139      	bne.n	8006956 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	5c9b      	ldrb	r3, [r3, r2]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e033      	b.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2240      	movs	r2, #64	; 0x40
 80068f4:	2101      	movs	r1, #1
 80068f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2241      	movs	r2, #65	; 0x41
 80068fc:	2124      	movs	r1, #36	; 0x24
 80068fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2101      	movs	r1, #1
 800690c:	438a      	bics	r2, r1
 800690e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a11      	ldr	r2, [pc, #68]	; (8006960 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2101      	movs	r1, #1
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2241      	movs	r2, #65	; 0x41
 8006946:	2120      	movs	r1, #32
 8006948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2240      	movs	r2, #64	; 0x40
 800694e:	2100      	movs	r1, #0
 8006950:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	0018      	movs	r0, r3
 800695a:	46bd      	mov	sp, r7
 800695c:	b004      	add	sp, #16
 800695e:	bd80      	pop	{r7, pc}
 8006960:	fffff0ff 	.word	0xfffff0ff

08006964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006964:	b5b0      	push	{r4, r5, r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f000 fbbf 	bl	80070f6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006978:	4bc9      	ldr	r3, [pc, #804]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	220c      	movs	r2, #12
 800697e:	4013      	ands	r3, r2
 8006980:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006982:	4bc7      	ldr	r3, [pc, #796]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	2380      	movs	r3, #128	; 0x80
 8006988:	025b      	lsls	r3, r3, #9
 800698a:	4013      	ands	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2201      	movs	r2, #1
 8006994:	4013      	ands	r3, r2
 8006996:	d100      	bne.n	800699a <HAL_RCC_OscConfig+0x36>
 8006998:	e07e      	b.n	8006a98 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d007      	beq.n	80069b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b0c      	cmp	r3, #12
 80069a4:	d112      	bne.n	80069cc <HAL_RCC_OscConfig+0x68>
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	025b      	lsls	r3, r3, #9
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d10d      	bne.n	80069cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4bbb      	ldr	r3, [pc, #748]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2380      	movs	r3, #128	; 0x80
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	4013      	ands	r3, r2
 80069ba:	d100      	bne.n	80069be <HAL_RCC_OscConfig+0x5a>
 80069bc:	e06b      	b.n	8006a96 <HAL_RCC_OscConfig+0x132>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d167      	bne.n	8006a96 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f000 fb95 	bl	80070f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	025b      	lsls	r3, r3, #9
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d107      	bne.n	80069e8 <HAL_RCC_OscConfig+0x84>
 80069d8:	4bb1      	ldr	r3, [pc, #708]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	4bb0      	ldr	r3, [pc, #704]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 80069de:	2180      	movs	r1, #128	; 0x80
 80069e0:	0249      	lsls	r1, r1, #9
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	e027      	b.n	8006a38 <HAL_RCC_OscConfig+0xd4>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	23a0      	movs	r3, #160	; 0xa0
 80069ee:	02db      	lsls	r3, r3, #11
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d10e      	bne.n	8006a12 <HAL_RCC_OscConfig+0xae>
 80069f4:	4baa      	ldr	r3, [pc, #680]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4ba9      	ldr	r3, [pc, #676]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	02c9      	lsls	r1, r1, #11
 80069fe:	430a      	orrs	r2, r1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	4ba7      	ldr	r3, [pc, #668]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4ba6      	ldr	r3, [pc, #664]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a08:	2180      	movs	r1, #128	; 0x80
 8006a0a:	0249      	lsls	r1, r1, #9
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e012      	b.n	8006a38 <HAL_RCC_OscConfig+0xd4>
 8006a12:	4ba3      	ldr	r3, [pc, #652]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4ba2      	ldr	r3, [pc, #648]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a18:	49a2      	ldr	r1, [pc, #648]	; (8006ca4 <HAL_RCC_OscConfig+0x340>)
 8006a1a:	400a      	ands	r2, r1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	4ba0      	ldr	r3, [pc, #640]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	2380      	movs	r3, #128	; 0x80
 8006a24:	025b      	lsls	r3, r3, #9
 8006a26:	4013      	ands	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4b9c      	ldr	r3, [pc, #624]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b9b      	ldr	r3, [pc, #620]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a32:	499d      	ldr	r1, [pc, #628]	; (8006ca8 <HAL_RCC_OscConfig+0x344>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fe fcf2 	bl	8005428 <HAL_GetTick>
 8006a44:	0003      	movs	r3, r0
 8006a46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a48:	e009      	b.n	8006a5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a4a:	f7fe fced 	bl	8005428 <HAL_GetTick>
 8006a4e:	0002      	movs	r2, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b64      	cmp	r3, #100	; 0x64
 8006a56:	d902      	bls.n	8006a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	f000 fb4c 	bl	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a5e:	4b90      	ldr	r3, [pc, #576]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	4013      	ands	r3, r2
 8006a68:	d0ef      	beq.n	8006a4a <HAL_RCC_OscConfig+0xe6>
 8006a6a:	e015      	b.n	8006a98 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fe fcdc 	bl	8005428 <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a76:	f7fe fcd7 	bl	8005428 <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b64      	cmp	r3, #100	; 0x64
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e336      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006a88:	4b85      	ldr	r3, [pc, #532]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	2380      	movs	r3, #128	; 0x80
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	4013      	ands	r3, r2
 8006a92:	d1f0      	bne.n	8006a76 <HAL_RCC_OscConfig+0x112>
 8006a94:	e000      	b.n	8006a98 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	d100      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x140>
 8006aa2:	e099      	b.n	8006bd8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	2220      	movs	r2, #32
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006ab2:	4b7b      	ldr	r3, [pc, #492]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b7a      	ldr	r3, [pc, #488]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006ab8:	2120      	movs	r1, #32
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	4393      	bics	r3, r2
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d005      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b0c      	cmp	r3, #12
 8006ad0:	d13e      	bne.n	8006b50 <HAL_RCC_OscConfig+0x1ec>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d13b      	bne.n	8006b50 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006ad8:	4b71      	ldr	r3, [pc, #452]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2204      	movs	r2, #4
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d004      	beq.n	8006aec <HAL_RCC_OscConfig+0x188>
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e304      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aec:	4b6c      	ldr	r3, [pc, #432]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	4a6e      	ldr	r2, [pc, #440]	; (8006cac <HAL_RCC_OscConfig+0x348>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	0019      	movs	r1, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	021a      	lsls	r2, r3, #8
 8006afc:	4b68      	ldr	r3, [pc, #416]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006b02:	4b67      	ldr	r3, [pc, #412]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2209      	movs	r2, #9
 8006b08:	4393      	bics	r3, r2
 8006b0a:	0019      	movs	r1, r3
 8006b0c:	4b64      	ldr	r3, [pc, #400]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b10:	430a      	orrs	r2, r1
 8006b12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b14:	f000 fc42 	bl	800739c <HAL_RCC_GetSysClockFreq>
 8006b18:	0001      	movs	r1, r0
 8006b1a:	4b61      	ldr	r3, [pc, #388]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	091b      	lsrs	r3, r3, #4
 8006b20:	220f      	movs	r2, #15
 8006b22:	4013      	ands	r3, r2
 8006b24:	4a62      	ldr	r2, [pc, #392]	; (8006cb0 <HAL_RCC_OscConfig+0x34c>)
 8006b26:	5cd3      	ldrb	r3, [r2, r3]
 8006b28:	000a      	movs	r2, r1
 8006b2a:	40da      	lsrs	r2, r3
 8006b2c:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <HAL_RCC_OscConfig+0x350>)
 8006b2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006b30:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <HAL_RCC_OscConfig+0x354>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2513      	movs	r5, #19
 8006b36:	197c      	adds	r4, r7, r5
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7fe fc2f 	bl	800539c <HAL_InitTick>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006b42:	197b      	adds	r3, r7, r5
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d046      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006b4a:	197b      	adds	r3, r7, r5
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	e2d2      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d027      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006b56:	4b52      	ldr	r3, [pc, #328]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2209      	movs	r2, #9
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	430a      	orrs	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b68:	f7fe fc5e 	bl	8005428 <HAL_GetTick>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b72:	f7fe fc59 	bl	8005428 <HAL_GetTick>
 8006b76:	0002      	movs	r2, r0
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e2b8      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b84:	4b46      	ldr	r3, [pc, #280]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d0f1      	beq.n	8006b72 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8e:	4b44      	ldr	r3, [pc, #272]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	4a46      	ldr	r2, [pc, #280]	; (8006cac <HAL_RCC_OscConfig+0x348>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	0019      	movs	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	021a      	lsls	r2, r3, #8
 8006b9e:	4b40      	ldr	r3, [pc, #256]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e018      	b.n	8006bd8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba6:	4b3e      	ldr	r3, [pc, #248]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b3d      	ldr	r3, [pc, #244]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	438a      	bics	r2, r1
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fe fc39 	bl	8005428 <HAL_GetTick>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bbc:	f7fe fc34 	bl	8005428 <HAL_GetTick>
 8006bc0:	0002      	movs	r2, r0
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e293      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bce:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d1f1      	bne.n	8006bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	4013      	ands	r3, r2
 8006be0:	d100      	bne.n	8006be4 <HAL_RCC_OscConfig+0x280>
 8006be2:	e0a2      	b.n	8006d2a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d140      	bne.n	8006c6c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bea:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	2380      	movs	r3, #128	; 0x80
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d005      	beq.n	8006c02 <HAL_RCC_OscConfig+0x29e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e279      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c02:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	4a2d      	ldr	r2, [pc, #180]	; (8006cbc <HAL_RCC_OscConfig+0x358>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c12:	430a      	orrs	r2, r1
 8006c14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c16:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	0a19      	lsrs	r1, r3, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	061a      	lsls	r2, r3, #24
 8006c24:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c26:	430a      	orrs	r2, r1
 8006c28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2e:	0b5b      	lsrs	r3, r3, #13
 8006c30:	3301      	adds	r3, #1
 8006c32:	2280      	movs	r2, #128	; 0x80
 8006c34:	0212      	lsls	r2, r2, #8
 8006c36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006c38:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	210f      	movs	r1, #15
 8006c40:	400b      	ands	r3, r1
 8006c42:	491b      	ldr	r1, [pc, #108]	; (8006cb0 <HAL_RCC_OscConfig+0x34c>)
 8006c44:	5ccb      	ldrb	r3, [r1, r3]
 8006c46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006c48:	4b1a      	ldr	r3, [pc, #104]	; (8006cb4 <HAL_RCC_OscConfig+0x350>)
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006c4c:	4b1a      	ldr	r3, [pc, #104]	; (8006cb8 <HAL_RCC_OscConfig+0x354>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2513      	movs	r5, #19
 8006c52:	197c      	adds	r4, r7, r5
 8006c54:	0018      	movs	r0, r3
 8006c56:	f7fe fba1 	bl	800539c <HAL_InitTick>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006c5e:	197b      	adds	r3, r7, r5
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d061      	beq.n	8006d2a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006c66:	197b      	adds	r3, r7, r5
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	e244      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d040      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCC_OscConfig+0x33c>)
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	0049      	lsls	r1, r1, #1
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c82:	f7fe fbd1 	bl	8005428 <HAL_GetTick>
 8006c86:	0003      	movs	r3, r0
 8006c88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006c8a:	e019      	b.n	8006cc0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c8c:	f7fe fbcc 	bl	8005428 <HAL_GetTick>
 8006c90:	0002      	movs	r2, r0
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d912      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e22b      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
 8006c9e:	46c0      	nop			; (mov r8, r8)
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	fffeffff 	.word	0xfffeffff
 8006ca8:	fffbffff 	.word	0xfffbffff
 8006cac:	ffffe0ff 	.word	0xffffe0ff
 8006cb0:	0800e62c 	.word	0x0800e62c
 8006cb4:	20000000 	.word	0x20000000
 8006cb8:	20000004 	.word	0x20000004
 8006cbc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006cc0:	4bca      	ldr	r3, [pc, #808]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	2380      	movs	r3, #128	; 0x80
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d0df      	beq.n	8006c8c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ccc:	4bc7      	ldr	r3, [pc, #796]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4ac7      	ldr	r2, [pc, #796]	; (8006ff0 <HAL_RCC_OscConfig+0x68c>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	0019      	movs	r1, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cda:	4bc4      	ldr	r3, [pc, #784]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ce0:	4bc2      	ldr	r3, [pc, #776]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	0a19      	lsrs	r1, r3, #8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	061a      	lsls	r2, r3, #24
 8006cee:	4bbf      	ldr	r3, [pc, #764]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	605a      	str	r2, [r3, #4]
 8006cf4:	e019      	b.n	8006d2a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cf6:	4bbd      	ldr	r3, [pc, #756]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	4bbc      	ldr	r3, [pc, #752]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006cfc:	49bd      	ldr	r1, [pc, #756]	; (8006ff4 <HAL_RCC_OscConfig+0x690>)
 8006cfe:	400a      	ands	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d02:	f7fe fb91 	bl	8005428 <HAL_GetTick>
 8006d06:	0003      	movs	r3, r0
 8006d08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d0c:	f7fe fb8c 	bl	8005428 <HAL_GetTick>
 8006d10:	0002      	movs	r2, r0
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e1eb      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006d1e:	4bb3      	ldr	r3, [pc, #716]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	2380      	movs	r3, #128	; 0x80
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4013      	ands	r3, r2
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2208      	movs	r2, #8
 8006d30:	4013      	ands	r3, r2
 8006d32:	d036      	beq.n	8006da2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d019      	beq.n	8006d70 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d3c:	4bab      	ldr	r3, [pc, #684]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d40:	4baa      	ldr	r3, [pc, #680]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d42:	2101      	movs	r1, #1
 8006d44:	430a      	orrs	r2, r1
 8006d46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d48:	f7fe fb6e 	bl	8005428 <HAL_GetTick>
 8006d4c:	0003      	movs	r3, r0
 8006d4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d52:	f7fe fb69 	bl	8005428 <HAL_GetTick>
 8006d56:	0002      	movs	r2, r0
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e1c8      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d64:	4ba1      	ldr	r3, [pc, #644]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d68:	2202      	movs	r2, #2
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d0f1      	beq.n	8006d52 <HAL_RCC_OscConfig+0x3ee>
 8006d6e:	e018      	b.n	8006da2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d70:	4b9e      	ldr	r3, [pc, #632]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d74:	4b9d      	ldr	r3, [pc, #628]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d76:	2101      	movs	r1, #1
 8006d78:	438a      	bics	r2, r1
 8006d7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d7c:	f7fe fb54 	bl	8005428 <HAL_GetTick>
 8006d80:	0003      	movs	r3, r0
 8006d82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d86:	f7fe fb4f 	bl	8005428 <HAL_GetTick>
 8006d8a:	0002      	movs	r2, r0
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e1ae      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d98:	4b94      	ldr	r3, [pc, #592]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	4013      	ands	r3, r2
 8006da0:	d1f1      	bne.n	8006d86 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2204      	movs	r2, #4
 8006da8:	4013      	ands	r3, r2
 8006daa:	d100      	bne.n	8006dae <HAL_RCC_OscConfig+0x44a>
 8006dac:	e0ae      	b.n	8006f0c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dae:	2023      	movs	r0, #35	; 0x23
 8006db0:	183b      	adds	r3, r7, r0
 8006db2:	2200      	movs	r2, #0
 8006db4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db6:	4b8d      	ldr	r3, [pc, #564]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dba:	2380      	movs	r3, #128	; 0x80
 8006dbc:	055b      	lsls	r3, r3, #21
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	d109      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	4b8a      	ldr	r3, [pc, #552]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc6:	4b89      	ldr	r3, [pc, #548]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	0549      	lsls	r1, r1, #21
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006dd0:	183b      	adds	r3, r7, r0
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd6:	4b88      	ldr	r3, [pc, #544]	; (8006ff8 <HAL_RCC_OscConfig+0x694>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	4013      	ands	r3, r2
 8006de0:	d11a      	bne.n	8006e18 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006de2:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <HAL_RCC_OscConfig+0x694>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b84      	ldr	r3, [pc, #528]	; (8006ff8 <HAL_RCC_OscConfig+0x694>)
 8006de8:	2180      	movs	r1, #128	; 0x80
 8006dea:	0049      	lsls	r1, r1, #1
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df0:	f7fe fb1a 	bl	8005428 <HAL_GetTick>
 8006df4:	0003      	movs	r3, r0
 8006df6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df8:	e008      	b.n	8006e0c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfa:	f7fe fb15 	bl	8005428 <HAL_GetTick>
 8006dfe:	0002      	movs	r2, r0
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	2b64      	cmp	r3, #100	; 0x64
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e174      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e0c:	4b7a      	ldr	r3, [pc, #488]	; (8006ff8 <HAL_RCC_OscConfig+0x694>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	4013      	ands	r3, r2
 8006e16:	d0f0      	beq.n	8006dfa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d107      	bne.n	8006e34 <HAL_RCC_OscConfig+0x4d0>
 8006e24:	4b71      	ldr	r3, [pc, #452]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e28:	4b70      	ldr	r3, [pc, #448]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e2a:	2180      	movs	r1, #128	; 0x80
 8006e2c:	0049      	lsls	r1, r1, #1
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	651a      	str	r2, [r3, #80]	; 0x50
 8006e32:	e031      	b.n	8006e98 <HAL_RCC_OscConfig+0x534>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10c      	bne.n	8006e56 <HAL_RCC_OscConfig+0x4f2>
 8006e3c:	4b6b      	ldr	r3, [pc, #428]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e40:	4b6a      	ldr	r3, [pc, #424]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e42:	496c      	ldr	r1, [pc, #432]	; (8006ff4 <HAL_RCC_OscConfig+0x690>)
 8006e44:	400a      	ands	r2, r1
 8006e46:	651a      	str	r2, [r3, #80]	; 0x50
 8006e48:	4b68      	ldr	r3, [pc, #416]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e4c:	4b67      	ldr	r3, [pc, #412]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e4e:	496b      	ldr	r1, [pc, #428]	; (8006ffc <HAL_RCC_OscConfig+0x698>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	651a      	str	r2, [r3, #80]	; 0x50
 8006e54:	e020      	b.n	8006e98 <HAL_RCC_OscConfig+0x534>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	23a0      	movs	r3, #160	; 0xa0
 8006e5c:	00db      	lsls	r3, r3, #3
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d10e      	bne.n	8006e80 <HAL_RCC_OscConfig+0x51c>
 8006e62:	4b62      	ldr	r3, [pc, #392]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e66:	4b61      	ldr	r3, [pc, #388]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e68:	2180      	movs	r1, #128	; 0x80
 8006e6a:	00c9      	lsls	r1, r1, #3
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e70:	4b5e      	ldr	r3, [pc, #376]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e74:	4b5d      	ldr	r3, [pc, #372]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e76:	2180      	movs	r1, #128	; 0x80
 8006e78:	0049      	lsls	r1, r1, #1
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8006e7e:	e00b      	b.n	8006e98 <HAL_RCC_OscConfig+0x534>
 8006e80:	4b5a      	ldr	r3, [pc, #360]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e84:	4b59      	ldr	r3, [pc, #356]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e86:	495b      	ldr	r1, [pc, #364]	; (8006ff4 <HAL_RCC_OscConfig+0x690>)
 8006e88:	400a      	ands	r2, r1
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50
 8006e8c:	4b57      	ldr	r3, [pc, #348]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e90:	4b56      	ldr	r3, [pc, #344]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006e92:	495a      	ldr	r1, [pc, #360]	; (8006ffc <HAL_RCC_OscConfig+0x698>)
 8006e94:	400a      	ands	r2, r1
 8006e96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ea0:	f7fe fac2 	bl	8005428 <HAL_GetTick>
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ea8:	e009      	b.n	8006ebe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f7fe fabd 	bl	8005428 <HAL_GetTick>
 8006eae:	0002      	movs	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	4a52      	ldr	r2, [pc, #328]	; (8007000 <HAL_RCC_OscConfig+0x69c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e11b      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ebe:	4b4b      	ldr	r3, [pc, #300]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ec2:	2380      	movs	r3, #128	; 0x80
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d0ef      	beq.n	8006eaa <HAL_RCC_OscConfig+0x546>
 8006eca:	e014      	b.n	8006ef6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ecc:	f7fe faac 	bl	8005428 <HAL_GetTick>
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ed4:	e009      	b.n	8006eea <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fe faa7 	bl	8005428 <HAL_GetTick>
 8006eda:	0002      	movs	r2, r0
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	4a47      	ldr	r2, [pc, #284]	; (8007000 <HAL_RCC_OscConfig+0x69c>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e105      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006eea:	4b40      	ldr	r3, [pc, #256]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	d1ef      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ef6:	2323      	movs	r3, #35	; 0x23
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d105      	bne.n	8006f0c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f00:	4b3a      	ldr	r3, [pc, #232]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f06:	493f      	ldr	r1, [pc, #252]	; (8007004 <HAL_RCC_OscConfig+0x6a0>)
 8006f08:	400a      	ands	r2, r1
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2220      	movs	r2, #32
 8006f12:	4013      	ands	r3, r2
 8006f14:	d049      	beq.n	8006faa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d026      	beq.n	8006f6c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	4b32      	ldr	r3, [pc, #200]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f24:	2101      	movs	r1, #1
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2e:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f30:	2101      	movs	r1, #1
 8006f32:	430a      	orrs	r2, r1
 8006f34:	635a      	str	r2, [r3, #52]	; 0x34
 8006f36:	4b34      	ldr	r3, [pc, #208]	; (8007008 <HAL_RCC_OscConfig+0x6a4>)
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	4b33      	ldr	r3, [pc, #204]	; (8007008 <HAL_RCC_OscConfig+0x6a4>)
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	0189      	lsls	r1, r1, #6
 8006f40:	430a      	orrs	r2, r1
 8006f42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f44:	f7fe fa70 	bl	8005428 <HAL_GetTick>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f4e:	f7fe fa6b 	bl	8005428 <HAL_GetTick>
 8006f52:	0002      	movs	r2, r0
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e0ca      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f60:	4b22      	ldr	r3, [pc, #136]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	2202      	movs	r2, #2
 8006f66:	4013      	ands	r3, r2
 8006f68:	d0f1      	beq.n	8006f4e <HAL_RCC_OscConfig+0x5ea>
 8006f6a:	e01e      	b.n	8006faa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006f6c:	4b1f      	ldr	r3, [pc, #124]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006f72:	2101      	movs	r1, #1
 8006f74:	438a      	bics	r2, r1
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <HAL_RCC_OscConfig+0x6a4>)
 8006f7a:	6a1a      	ldr	r2, [r3, #32]
 8006f7c:	4b22      	ldr	r3, [pc, #136]	; (8007008 <HAL_RCC_OscConfig+0x6a4>)
 8006f7e:	4923      	ldr	r1, [pc, #140]	; (800700c <HAL_RCC_OscConfig+0x6a8>)
 8006f80:	400a      	ands	r2, r1
 8006f82:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fe fa50 	bl	8005428 <HAL_GetTick>
 8006f88:	0003      	movs	r3, r0
 8006f8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f8e:	f7fe fa4b 	bl	8005428 <HAL_GetTick>
 8006f92:	0002      	movs	r2, r0
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e0aa      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fa0:	4b12      	ldr	r3, [pc, #72]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d1f1      	bne.n	8006f8e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d100      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x650>
 8006fb2:	e09f      	b.n	80070f4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b0c      	cmp	r3, #12
 8006fb8:	d100      	bne.n	8006fbc <HAL_RCC_OscConfig+0x658>
 8006fba:	e078      	b.n	80070ae <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d159      	bne.n	8007078 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b08      	ldr	r3, [pc, #32]	; (8006fec <HAL_RCC_OscConfig+0x688>)
 8006fca:	4911      	ldr	r1, [pc, #68]	; (8007010 <HAL_RCC_OscConfig+0x6ac>)
 8006fcc:	400a      	ands	r2, r1
 8006fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd0:	f7fe fa2a 	bl	8005428 <HAL_GetTick>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006fd8:	e01c      	b.n	8007014 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fda:	f7fe fa25 	bl	8005428 <HAL_GetTick>
 8006fde:	0002      	movs	r2, r0
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d915      	bls.n	8007014 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e084      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
 8006fec:	40021000 	.word	0x40021000
 8006ff0:	ffff1fff 	.word	0xffff1fff
 8006ff4:	fffffeff 	.word	0xfffffeff
 8006ff8:	40007000 	.word	0x40007000
 8006ffc:	fffffbff 	.word	0xfffffbff
 8007000:	00001388 	.word	0x00001388
 8007004:	efffffff 	.word	0xefffffff
 8007008:	40010000 	.word	0x40010000
 800700c:	ffffdfff 	.word	0xffffdfff
 8007010:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007014:	4b3a      	ldr	r3, [pc, #232]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	049b      	lsls	r3, r3, #18
 800701c:	4013      	ands	r3, r2
 800701e:	d1dc      	bne.n	8006fda <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007020:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4a37      	ldr	r2, [pc, #220]	; (8007104 <HAL_RCC_OscConfig+0x7a0>)
 8007026:	4013      	ands	r3, r2
 8007028:	0019      	movs	r1, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	431a      	orrs	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 800703c:	430a      	orrs	r2, r1
 800703e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007040:	4b2f      	ldr	r3, [pc, #188]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 8007046:	2180      	movs	r1, #128	; 0x80
 8007048:	0449      	lsls	r1, r1, #17
 800704a:	430a      	orrs	r2, r1
 800704c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fe f9eb 	bl	8005428 <HAL_GetTick>
 8007052:	0003      	movs	r3, r0
 8007054:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007058:	f7fe f9e6 	bl	8005428 <HAL_GetTick>
 800705c:	0002      	movs	r2, r0
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e045      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800706a:	4b25      	ldr	r3, [pc, #148]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	2380      	movs	r3, #128	; 0x80
 8007070:	049b      	lsls	r3, r3, #18
 8007072:	4013      	ands	r3, r2
 8007074:	d0f0      	beq.n	8007058 <HAL_RCC_OscConfig+0x6f4>
 8007076:	e03d      	b.n	80070f4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007078:	4b21      	ldr	r3, [pc, #132]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 800707e:	4922      	ldr	r1, [pc, #136]	; (8007108 <HAL_RCC_OscConfig+0x7a4>)
 8007080:	400a      	ands	r2, r1
 8007082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007084:	f7fe f9d0 	bl	8005428 <HAL_GetTick>
 8007088:	0003      	movs	r3, r0
 800708a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800708e:	f7fe f9cb 	bl	8005428 <HAL_GetTick>
 8007092:	0002      	movs	r2, r0
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e02a      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	2380      	movs	r3, #128	; 0x80
 80070a6:	049b      	lsls	r3, r3, #18
 80070a8:	4013      	ands	r3, r2
 80070aa:	d1f0      	bne.n	800708e <HAL_RCC_OscConfig+0x72a>
 80070ac:	e022      	b.n	80070f4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e01d      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <HAL_RCC_OscConfig+0x79c>)
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	2380      	movs	r3, #128	; 0x80
 80070c4:	025b      	lsls	r3, r3, #9
 80070c6:	401a      	ands	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d10f      	bne.n	80070f0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	23f0      	movs	r3, #240	; 0xf0
 80070d4:	039b      	lsls	r3, r3, #14
 80070d6:	401a      	ands	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070dc:	429a      	cmp	r2, r3
 80070de:	d107      	bne.n	80070f0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	23c0      	movs	r3, #192	; 0xc0
 80070e4:	041b      	lsls	r3, r3, #16
 80070e6:	401a      	ands	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	0018      	movs	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	b00a      	add	sp, #40	; 0x28
 80070fc:	bdb0      	pop	{r4, r5, r7, pc}
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	40021000 	.word	0x40021000
 8007104:	ff02ffff 	.word	0xff02ffff
 8007108:	feffffff 	.word	0xfeffffff

0800710c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800710c:	b5b0      	push	{r4, r5, r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e128      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007120:	4b96      	ldr	r3, [pc, #600]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2201      	movs	r2, #1
 8007126:	4013      	ands	r3, r2
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d91e      	bls.n	800716c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712e:	4b93      	ldr	r3, [pc, #588]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2201      	movs	r2, #1
 8007134:	4393      	bics	r3, r2
 8007136:	0019      	movs	r1, r3
 8007138:	4b90      	ldr	r3, [pc, #576]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007140:	f7fe f972 	bl	8005428 <HAL_GetTick>
 8007144:	0003      	movs	r3, r0
 8007146:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007148:	e009      	b.n	800715e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800714a:	f7fe f96d 	bl	8005428 <HAL_GetTick>
 800714e:	0002      	movs	r2, r0
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	4a8a      	ldr	r2, [pc, #552]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d901      	bls.n	800715e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e109      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b87      	ldr	r3, [pc, #540]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2201      	movs	r2, #1
 8007164:	4013      	ands	r3, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d1ee      	bne.n	800714a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2202      	movs	r2, #2
 8007172:	4013      	ands	r3, r2
 8007174:	d009      	beq.n	800718a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007176:	4b83      	ldr	r3, [pc, #524]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	22f0      	movs	r2, #240	; 0xf0
 800717c:	4393      	bics	r3, r2
 800717e:	0019      	movs	r1, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	4b7f      	ldr	r3, [pc, #508]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007186:	430a      	orrs	r2, r1
 8007188:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2201      	movs	r2, #1
 8007190:	4013      	ands	r3, r2
 8007192:	d100      	bne.n	8007196 <HAL_RCC_ClockConfig+0x8a>
 8007194:	e089      	b.n	80072aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d107      	bne.n	80071ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800719e:	4b79      	ldr	r3, [pc, #484]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	4013      	ands	r3, r2
 80071a8:	d120      	bne.n	80071ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e0e1      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d107      	bne.n	80071c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071b6:	4b73      	ldr	r3, [pc, #460]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	2380      	movs	r3, #128	; 0x80
 80071bc:	049b      	lsls	r3, r3, #18
 80071be:	4013      	ands	r3, r2
 80071c0:	d114      	bne.n	80071ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e0d5      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d106      	bne.n	80071dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071ce:	4b6d      	ldr	r3, [pc, #436]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2204      	movs	r2, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	d109      	bne.n	80071ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0ca      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80071dc:	4b69      	ldr	r3, [pc, #420]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	2380      	movs	r3, #128	; 0x80
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4013      	ands	r3, r2
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0c2      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ec:	4b65      	ldr	r3, [pc, #404]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2203      	movs	r2, #3
 80071f2:	4393      	bics	r3, r2
 80071f4:	0019      	movs	r1, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	4b62      	ldr	r3, [pc, #392]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80071fc:	430a      	orrs	r2, r1
 80071fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007200:	f7fe f912 	bl	8005428 <HAL_GetTick>
 8007204:	0003      	movs	r3, r0
 8007206:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d111      	bne.n	8007234 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007210:	e009      	b.n	8007226 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007212:	f7fe f909 	bl	8005428 <HAL_GetTick>
 8007216:	0002      	movs	r2, r0
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	4a58      	ldr	r2, [pc, #352]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e0a5      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007226:	4b57      	ldr	r3, [pc, #348]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	220c      	movs	r2, #12
 800722c:	4013      	ands	r3, r2
 800722e:	2b08      	cmp	r3, #8
 8007230:	d1ef      	bne.n	8007212 <HAL_RCC_ClockConfig+0x106>
 8007232:	e03a      	b.n	80072aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d111      	bne.n	8007260 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800723c:	e009      	b.n	8007252 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800723e:	f7fe f8f3 	bl	8005428 <HAL_GetTick>
 8007242:	0002      	movs	r2, r0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	4a4d      	ldr	r2, [pc, #308]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e08f      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007252:	4b4c      	ldr	r3, [pc, #304]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	220c      	movs	r2, #12
 8007258:	4013      	ands	r3, r2
 800725a:	2b0c      	cmp	r3, #12
 800725c:	d1ef      	bne.n	800723e <HAL_RCC_ClockConfig+0x132>
 800725e:	e024      	b.n	80072aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d11b      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007268:	e009      	b.n	800727e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800726a:	f7fe f8dd 	bl	8005428 <HAL_GetTick>
 800726e:	0002      	movs	r2, r0
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	4a42      	ldr	r2, [pc, #264]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e079      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800727e:	4b41      	ldr	r3, [pc, #260]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	220c      	movs	r2, #12
 8007284:	4013      	ands	r3, r2
 8007286:	2b04      	cmp	r3, #4
 8007288:	d1ef      	bne.n	800726a <HAL_RCC_ClockConfig+0x15e>
 800728a:	e00e      	b.n	80072aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800728c:	f7fe f8cc 	bl	8005428 <HAL_GetTick>
 8007290:	0002      	movs	r2, r0
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	4a3a      	ldr	r2, [pc, #232]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e068      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80072a0:	4b38      	ldr	r3, [pc, #224]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	220c      	movs	r2, #12
 80072a6:	4013      	ands	r3, r2
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072aa:	4b34      	ldr	r3, [pc, #208]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	4013      	ands	r3, r2
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d21e      	bcs.n	80072f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b8:	4b30      	ldr	r3, [pc, #192]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2201      	movs	r2, #1
 80072be:	4393      	bics	r3, r2
 80072c0:	0019      	movs	r1, r3
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072ca:	f7fe f8ad 	bl	8005428 <HAL_GetTick>
 80072ce:	0003      	movs	r3, r0
 80072d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d2:	e009      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072d4:	f7fe f8a8 	bl	8005428 <HAL_GetTick>
 80072d8:	0002      	movs	r2, r0
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	4a28      	ldr	r2, [pc, #160]	; (8007380 <HAL_RCC_ClockConfig+0x274>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e044      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e8:	4b24      	ldr	r3, [pc, #144]	; (800737c <HAL_RCC_ClockConfig+0x270>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2201      	movs	r2, #1
 80072ee:	4013      	ands	r3, r2
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d1ee      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	4013      	ands	r3, r2
 80072fe:	d009      	beq.n	8007314 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007300:	4b20      	ldr	r3, [pc, #128]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <HAL_RCC_ClockConfig+0x27c>)
 8007306:	4013      	ands	r3, r2
 8007308:	0019      	movs	r1, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007310:	430a      	orrs	r2, r1
 8007312:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2208      	movs	r2, #8
 800731a:	4013      	ands	r3, r2
 800731c:	d00a      	beq.n	8007334 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	4a1a      	ldr	r2, [pc, #104]	; (800738c <HAL_RCC_ClockConfig+0x280>)
 8007324:	4013      	ands	r3, r2
 8007326:	0019      	movs	r1, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	00da      	lsls	r2, r3, #3
 800732e:	4b15      	ldr	r3, [pc, #84]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 8007330:	430a      	orrs	r2, r1
 8007332:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007334:	f000 f832 	bl	800739c <HAL_RCC_GetSysClockFreq>
 8007338:	0001      	movs	r1, r0
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <HAL_RCC_ClockConfig+0x278>)
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	220f      	movs	r2, #15
 8007342:	4013      	ands	r3, r2
 8007344:	4a12      	ldr	r2, [pc, #72]	; (8007390 <HAL_RCC_ClockConfig+0x284>)
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	000a      	movs	r2, r1
 800734a:	40da      	lsrs	r2, r3
 800734c:	4b11      	ldr	r3, [pc, #68]	; (8007394 <HAL_RCC_ClockConfig+0x288>)
 800734e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007350:	4b11      	ldr	r3, [pc, #68]	; (8007398 <HAL_RCC_ClockConfig+0x28c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	250b      	movs	r5, #11
 8007356:	197c      	adds	r4, r7, r5
 8007358:	0018      	movs	r0, r3
 800735a:	f7fe f81f 	bl	800539c <HAL_InitTick>
 800735e:	0003      	movs	r3, r0
 8007360:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007362:	197b      	adds	r3, r7, r5
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800736a:	197b      	adds	r3, r7, r5
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	e000      	b.n	8007372 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b004      	add	sp, #16
 8007378:	bdb0      	pop	{r4, r5, r7, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	40022000 	.word	0x40022000
 8007380:	00001388 	.word	0x00001388
 8007384:	40021000 	.word	0x40021000
 8007388:	fffff8ff 	.word	0xfffff8ff
 800738c:	ffffc7ff 	.word	0xffffc7ff
 8007390:	0800e62c 	.word	0x0800e62c
 8007394:	20000000 	.word	0x20000000
 8007398:	20000004 	.word	0x20000004

0800739c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800739c:	b5b0      	push	{r4, r5, r7, lr}
 800739e:	b08e      	sub	sp, #56	; 0x38
 80073a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80073a2:	4b4c      	ldr	r3, [pc, #304]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80073a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073aa:	230c      	movs	r3, #12
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b0c      	cmp	r3, #12
 80073b0:	d014      	beq.n	80073dc <HAL_RCC_GetSysClockFreq+0x40>
 80073b2:	d900      	bls.n	80073b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80073b4:	e07b      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x112>
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d002      	beq.n	80073c0 <HAL_RCC_GetSysClockFreq+0x24>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d00b      	beq.n	80073d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80073be:	e076      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80073c0:	4b44      	ldr	r3, [pc, #272]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2210      	movs	r2, #16
 80073c6:	4013      	ands	r3, r2
 80073c8:	d002      	beq.n	80073d0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80073ca:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80073ce:	e07c      	b.n	80074ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80073d0:	4b42      	ldr	r3, [pc, #264]	; (80074dc <HAL_RCC_GetSysClockFreq+0x140>)
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80073d4:	e079      	b.n	80074ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073d6:	4b42      	ldr	r3, [pc, #264]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x144>)
 80073d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80073da:	e076      	b.n	80074ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	0c9a      	lsrs	r2, r3, #18
 80073e0:	230f      	movs	r3, #15
 80073e2:	401a      	ands	r2, r3
 80073e4:	4b3f      	ldr	r3, [pc, #252]	; (80074e4 <HAL_RCC_GetSysClockFreq+0x148>)
 80073e6:	5c9b      	ldrb	r3, [r3, r2]
 80073e8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	0d9a      	lsrs	r2, r3, #22
 80073ee:	2303      	movs	r3, #3
 80073f0:	4013      	ands	r3, r2
 80073f2:	3301      	adds	r3, #1
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073f6:	4b37      	ldr	r3, [pc, #220]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	2380      	movs	r3, #128	; 0x80
 80073fc:	025b      	lsls	r3, r3, #9
 80073fe:	4013      	ands	r3, r2
 8007400:	d01a      	beq.n	8007438 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	4a35      	ldr	r2, [pc, #212]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x144>)
 800740c:	2300      	movs	r3, #0
 800740e:	69b8      	ldr	r0, [r7, #24]
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	f7f9 f869 	bl	80004e8 <__aeabi_lmul>
 8007416:	0002      	movs	r2, r0
 8007418:	000b      	movs	r3, r1
 800741a:	0010      	movs	r0, r2
 800741c:	0019      	movs	r1, r3
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	2300      	movs	r3, #0
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f7f9 f83d 	bl	80004a8 <__aeabi_uldivmod>
 800742e:	0002      	movs	r2, r0
 8007430:	000b      	movs	r3, r1
 8007432:	0013      	movs	r3, r2
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
 8007436:	e037      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007438:	4b26      	ldr	r3, [pc, #152]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2210      	movs	r2, #16
 800743e:	4013      	ands	r3, r2
 8007440:	d01a      	beq.n	8007478 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800744c:	2300      	movs	r3, #0
 800744e:	68b8      	ldr	r0, [r7, #8]
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	f7f9 f849 	bl	80004e8 <__aeabi_lmul>
 8007456:	0002      	movs	r2, r0
 8007458:	000b      	movs	r3, r1
 800745a:	0010      	movs	r0, r2
 800745c:	0019      	movs	r1, r3
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f7f9 f81d 	bl	80004a8 <__aeabi_uldivmod>
 800746e:	0002      	movs	r2, r0
 8007470:	000b      	movs	r3, r1
 8007472:	0013      	movs	r3, r2
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
 8007476:	e017      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	0018      	movs	r0, r3
 800747c:	2300      	movs	r3, #0
 800747e:	0019      	movs	r1, r3
 8007480:	4a16      	ldr	r2, [pc, #88]	; (80074dc <HAL_RCC_GetSysClockFreq+0x140>)
 8007482:	2300      	movs	r3, #0
 8007484:	f7f9 f830 	bl	80004e8 <__aeabi_lmul>
 8007488:	0002      	movs	r2, r0
 800748a:	000b      	movs	r3, r1
 800748c:	0010      	movs	r0, r2
 800748e:	0019      	movs	r1, r3
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	001c      	movs	r4, r3
 8007494:	2300      	movs	r3, #0
 8007496:	001d      	movs	r5, r3
 8007498:	0022      	movs	r2, r4
 800749a:	002b      	movs	r3, r5
 800749c:	f7f9 f804 	bl	80004a8 <__aeabi_uldivmod>
 80074a0:	0002      	movs	r2, r0
 80074a2:	000b      	movs	r3, r1
 80074a4:	0013      	movs	r3, r2
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80074ac:	e00d      	b.n	80074ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80074ae:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	0b5b      	lsrs	r3, r3, #13
 80074b4:	2207      	movs	r2, #7
 80074b6:	4013      	ands	r3, r2
 80074b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	3301      	adds	r3, #1
 80074be:	2280      	movs	r2, #128	; 0x80
 80074c0:	0212      	lsls	r2, r2, #8
 80074c2:	409a      	lsls	r2, r3
 80074c4:	0013      	movs	r3, r2
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80074c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80074cc:	0018      	movs	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b00e      	add	sp, #56	; 0x38
 80074d2:	bdb0      	pop	{r4, r5, r7, pc}
 80074d4:	40021000 	.word	0x40021000
 80074d8:	003d0900 	.word	0x003d0900
 80074dc:	00f42400 	.word	0x00f42400
 80074e0:	007a1200 	.word	0x007a1200
 80074e4:	0800e644 	.word	0x0800e644

080074e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80074ee:	681b      	ldr	r3, [r3, #0]
}
 80074f0:	0018      	movs	r0, r3
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20000000 	.word	0x20000000

080074fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007500:	f7ff fff2 	bl	80074e8 <HAL_RCC_GetHCLKFreq>
 8007504:	0001      	movs	r1, r0
 8007506:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	2207      	movs	r2, #7
 800750e:	4013      	ands	r3, r2
 8007510:	4a04      	ldr	r2, [pc, #16]	; (8007524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007512:	5cd3      	ldrb	r3, [r2, r3]
 8007514:	40d9      	lsrs	r1, r3
 8007516:	000b      	movs	r3, r1
}
 8007518:	0018      	movs	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	40021000 	.word	0x40021000
 8007524:	0800e63c 	.word	0x0800e63c

08007528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800752c:	f7ff ffdc 	bl	80074e8 <HAL_RCC_GetHCLKFreq>
 8007530:	0001      	movs	r1, r0
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	0adb      	lsrs	r3, r3, #11
 8007538:	2207      	movs	r2, #7
 800753a:	4013      	ands	r3, r2
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800753e:	5cd3      	ldrb	r3, [r2, r3]
 8007540:	40d9      	lsrs	r1, r3
 8007542:	000b      	movs	r3, r1
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	40021000 	.word	0x40021000
 8007550:	0800e63c 	.word	0x0800e63c

08007554 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800755c:	2317      	movs	r3, #23
 800755e:	18fb      	adds	r3, r7, r3
 8007560:	2200      	movs	r2, #0
 8007562:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2220      	movs	r2, #32
 800756a:	4013      	ands	r3, r2
 800756c:	d106      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	2380      	movs	r3, #128	; 0x80
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4013      	ands	r3, r2
 8007578:	d100      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800757a:	e104      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800757c:	4bb9      	ldr	r3, [pc, #740]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	055b      	lsls	r3, r3, #21
 8007584:	4013      	ands	r3, r2
 8007586:	d10a      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007588:	4bb6      	ldr	r3, [pc, #728]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800758a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758c:	4bb5      	ldr	r3, [pc, #724]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	0549      	lsls	r1, r1, #21
 8007592:	430a      	orrs	r2, r1
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007596:	2317      	movs	r3, #23
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800759e:	4bb2      	ldr	r3, [pc, #712]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4013      	ands	r3, r2
 80075a8:	d11a      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075aa:	4baf      	ldr	r3, [pc, #700]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4bae      	ldr	r3, [pc, #696]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	0049      	lsls	r1, r1, #1
 80075b4:	430a      	orrs	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075b8:	f7fd ff36 	bl	8005428 <HAL_GetTick>
 80075bc:	0003      	movs	r3, r0
 80075be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075c0:	e008      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075c2:	f7fd ff31 	bl	8005428 <HAL_GetTick>
 80075c6:	0002      	movs	r2, r0
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b64      	cmp	r3, #100	; 0x64
 80075ce:	d901      	bls.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e143      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d4:	4ba4      	ldr	r3, [pc, #656]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	2380      	movs	r3, #128	; 0x80
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	4013      	ands	r3, r2
 80075de:	d0f0      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80075e0:	4ba0      	ldr	r3, [pc, #640]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	23c0      	movs	r3, #192	; 0xc0
 80075e6:	039b      	lsls	r3, r3, #14
 80075e8:	4013      	ands	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	23c0      	movs	r3, #192	; 0xc0
 80075f2:	039b      	lsls	r3, r3, #14
 80075f4:	4013      	ands	r3, r2
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d107      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	23c0      	movs	r3, #192	; 0xc0
 8007602:	039b      	lsls	r3, r3, #14
 8007604:	4013      	ands	r3, r2
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	d013      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	23c0      	movs	r3, #192	; 0xc0
 8007612:	029b      	lsls	r3, r3, #10
 8007614:	401a      	ands	r2, r3
 8007616:	23c0      	movs	r3, #192	; 0xc0
 8007618:	029b      	lsls	r3, r3, #10
 800761a:	429a      	cmp	r2, r3
 800761c:	d10a      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800761e:	4b91      	ldr	r3, [pc, #580]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	2380      	movs	r3, #128	; 0x80
 8007624:	029b      	lsls	r3, r3, #10
 8007626:	401a      	ands	r2, r3
 8007628:	2380      	movs	r3, #128	; 0x80
 800762a:	029b      	lsls	r3, r3, #10
 800762c:	429a      	cmp	r2, r3
 800762e:	d101      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e113      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007634:	4b8b      	ldr	r3, [pc, #556]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007638:	23c0      	movs	r3, #192	; 0xc0
 800763a:	029b      	lsls	r3, r3, #10
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d049      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	23c0      	movs	r3, #192	; 0xc0
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	4013      	ands	r3, r2
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	429a      	cmp	r2, r3
 8007654:	d004      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2220      	movs	r2, #32
 800765c:	4013      	ands	r3, r2
 800765e:	d10d      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	23c0      	movs	r3, #192	; 0xc0
 8007666:	029b      	lsls	r3, r3, #10
 8007668:	4013      	ands	r3, r2
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	429a      	cmp	r2, r3
 800766e:	d034      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	4013      	ands	r3, r2
 800767a:	d02e      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800767c:	4b79      	ldr	r3, [pc, #484]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007680:	4a7a      	ldr	r2, [pc, #488]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007682:	4013      	ands	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007686:	4b77      	ldr	r3, [pc, #476]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800768a:	4b76      	ldr	r3, [pc, #472]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800768c:	2180      	movs	r1, #128	; 0x80
 800768e:	0309      	lsls	r1, r1, #12
 8007690:	430a      	orrs	r2, r1
 8007692:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007694:	4b73      	ldr	r3, [pc, #460]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007698:	4b72      	ldr	r3, [pc, #456]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800769a:	4975      	ldr	r1, [pc, #468]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800769c:	400a      	ands	r2, r1
 800769e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80076a0:	4b70      	ldr	r3, [pc, #448]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	4013      	ands	r3, r2
 80076ae:	d014      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b0:	f7fd feba 	bl	8005428 <HAL_GetTick>
 80076b4:	0003      	movs	r3, r0
 80076b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076b8:	e009      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076ba:	f7fd feb5 	bl	8005428 <HAL_GetTick>
 80076be:	0002      	movs	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	4a6b      	ldr	r2, [pc, #428]	; (8007874 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d901      	bls.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e0c6      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076ce:	4b65      	ldr	r3, [pc, #404]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80076d2:	2380      	movs	r3, #128	; 0x80
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4013      	ands	r3, r2
 80076d8:	d0ef      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4013      	ands	r3, r2
 80076e4:	d01f      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	23c0      	movs	r3, #192	; 0xc0
 80076ec:	029b      	lsls	r3, r3, #10
 80076ee:	401a      	ands	r2, r3
 80076f0:	23c0      	movs	r3, #192	; 0xc0
 80076f2:	029b      	lsls	r3, r3, #10
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d10c      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80076f8:	4b5a      	ldr	r3, [pc, #360]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a5e      	ldr	r2, [pc, #376]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80076fe:	4013      	ands	r3, r2
 8007700:	0019      	movs	r1, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	23c0      	movs	r3, #192	; 0xc0
 8007708:	039b      	lsls	r3, r3, #14
 800770a:	401a      	ands	r2, r3
 800770c:	4b55      	ldr	r3, [pc, #340]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800770e:	430a      	orrs	r2, r1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	4b54      	ldr	r3, [pc, #336]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007714:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	23c0      	movs	r3, #192	; 0xc0
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	401a      	ands	r2, r3
 8007720:	4b50      	ldr	r3, [pc, #320]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007722:	430a      	orrs	r2, r1
 8007724:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2220      	movs	r2, #32
 800772c:	4013      	ands	r3, r2
 800772e:	d01f      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	23c0      	movs	r3, #192	; 0xc0
 8007736:	029b      	lsls	r3, r3, #10
 8007738:	401a      	ands	r2, r3
 800773a:	23c0      	movs	r3, #192	; 0xc0
 800773c:	029b      	lsls	r3, r3, #10
 800773e:	429a      	cmp	r2, r3
 8007740:	d10c      	bne.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8007742:	4b48      	ldr	r3, [pc, #288]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4c      	ldr	r2, [pc, #304]	; (8007878 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007748:	4013      	ands	r3, r2
 800774a:	0019      	movs	r1, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	23c0      	movs	r3, #192	; 0xc0
 8007752:	039b      	lsls	r3, r3, #14
 8007754:	401a      	ands	r2, r3
 8007756:	4b43      	ldr	r3, [pc, #268]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007758:	430a      	orrs	r2, r1
 800775a:	601a      	str	r2, [r3, #0]
 800775c:	4b41      	ldr	r3, [pc, #260]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800775e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	23c0      	movs	r3, #192	; 0xc0
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	401a      	ands	r2, r3
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800776c:	430a      	orrs	r2, r1
 800776e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007770:	2317      	movs	r3, #23
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d105      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800777a:	4b3a      	ldr	r3, [pc, #232]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800777c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800777e:	4b39      	ldr	r3, [pc, #228]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007780:	493e      	ldr	r1, [pc, #248]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007782:	400a      	ands	r2, r1
 8007784:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2201      	movs	r2, #1
 800778c:	4013      	ands	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007794:	2203      	movs	r2, #3
 8007796:	4393      	bics	r3, r2
 8007798:	0019      	movs	r1, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	4b31      	ldr	r3, [pc, #196]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077a0:	430a      	orrs	r2, r1
 80077a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2202      	movs	r2, #2
 80077aa:	4013      	ands	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077ae:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b2:	220c      	movs	r2, #12
 80077b4:	4393      	bics	r3, r2
 80077b6:	0019      	movs	r1, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	4b29      	ldr	r3, [pc, #164]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077be:	430a      	orrs	r2, r1
 80077c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2204      	movs	r2, #4
 80077c8:	4013      	ands	r3, r2
 80077ca:	d009      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077cc:	4b25      	ldr	r3, [pc, #148]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d0:	4a2b      	ldr	r2, [pc, #172]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80077d2:	4013      	ands	r3, r2
 80077d4:	0019      	movs	r1, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	695a      	ldr	r2, [r3, #20]
 80077da:	4b22      	ldr	r3, [pc, #136]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077dc:	430a      	orrs	r2, r1
 80077de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2208      	movs	r2, #8
 80077e6:	4013      	ands	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ee:	4a25      	ldr	r2, [pc, #148]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	0019      	movs	r1, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077fa:	430a      	orrs	r2, r1
 80077fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	2380      	movs	r3, #128	; 0x80
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	4013      	ands	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800780a:	4b16      	ldr	r3, [pc, #88]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800780c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780e:	4a17      	ldr	r2, [pc, #92]	; (800786c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007810:	4013      	ands	r3, r2
 8007812:	0019      	movs	r1, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	4b12      	ldr	r3, [pc, #72]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800781a:	430a      	orrs	r2, r1
 800781c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2240      	movs	r2, #64	; 0x40
 8007824:	4013      	ands	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007828:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800782a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800782e:	4013      	ands	r3, r2
 8007830:	0019      	movs	r1, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007838:	430a      	orrs	r2, r1
 800783a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2280      	movs	r2, #128	; 0x80
 8007842:	4013      	ands	r3, r2
 8007844:	d009      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	4a10      	ldr	r2, [pc, #64]	; (800788c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800784c:	4013      	ands	r3, r2
 800784e:	0019      	movs	r1, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	4b03      	ldr	r3, [pc, #12]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007856:	430a      	orrs	r2, r1
 8007858:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	0018      	movs	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	b006      	add	sp, #24
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40021000 	.word	0x40021000
 8007868:	40007000 	.word	0x40007000
 800786c:	fffcffff 	.word	0xfffcffff
 8007870:	fff7ffff 	.word	0xfff7ffff
 8007874:	00001388 	.word	0x00001388
 8007878:	ffcfffff 	.word	0xffcfffff
 800787c:	efffffff 	.word	0xefffffff
 8007880:	fffff3ff 	.word	0xfffff3ff
 8007884:	ffffcfff 	.word	0xffffcfff
 8007888:	fbffffff 	.word	0xfbffffff
 800788c:	fff3ffff 	.word	0xfff3ffff

08007890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e032      	b.n	8007908 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2239      	movs	r2, #57	; 0x39
 80078a6:	5c9b      	ldrb	r3, [r3, r2]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d107      	bne.n	80078be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2238      	movs	r2, #56	; 0x38
 80078b2:	2100      	movs	r1, #0
 80078b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7fd fc7d 	bl	80051b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2239      	movs	r2, #57	; 0x39
 80078c2:	2102      	movs	r1, #2
 80078c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	0019      	movs	r1, r3
 80078d0:	0010      	movs	r0, r2
 80078d2:	f000 fa95 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	223e      	movs	r2, #62	; 0x3e
 80078da:	2101      	movs	r1, #1
 80078dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	223a      	movs	r2, #58	; 0x3a
 80078e2:	2101      	movs	r1, #1
 80078e4:	5499      	strb	r1, [r3, r2]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	223b      	movs	r2, #59	; 0x3b
 80078ea:	2101      	movs	r1, #1
 80078ec:	5499      	strb	r1, [r3, r2]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	223c      	movs	r2, #60	; 0x3c
 80078f2:	2101      	movs	r1, #1
 80078f4:	5499      	strb	r1, [r3, r2]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	223d      	movs	r2, #61	; 0x3d
 80078fa:	2101      	movs	r1, #1
 80078fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2239      	movs	r2, #57	; 0x39
 8007902:	2101      	movs	r1, #1
 8007904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	0018      	movs	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2239      	movs	r2, #57	; 0x39
 800791c:	5c9b      	ldrb	r3, [r3, r2]
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d001      	beq.n	8007928 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e033      	b.n	8007990 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2239      	movs	r2, #57	; 0x39
 800792c:	2102      	movs	r1, #2
 800792e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	2380      	movs	r3, #128	; 0x80
 8007936:	05db      	lsls	r3, r3, #23
 8007938:	429a      	cmp	r2, r3
 800793a:	d00e      	beq.n	800795a <HAL_TIM_Base_Start+0x4a>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a15      	ldr	r2, [pc, #84]	; (8007998 <HAL_TIM_Base_Start+0x88>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d009      	beq.n	800795a <HAL_TIM_Base_Start+0x4a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a14      	ldr	r2, [pc, #80]	; (800799c <HAL_TIM_Base_Start+0x8c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIM_Base_Start+0x4a>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <HAL_TIM_Base_Start+0x90>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d111      	bne.n	800797e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2207      	movs	r2, #7
 8007962:	4013      	ands	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d010      	beq.n	800798e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797c:	e007      	b.n	800798e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	430a      	orrs	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40000400 	.word	0x40000400
 800799c:	40010800 	.word	0x40010800
 80079a0:	40011400 	.word	0x40011400

080079a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2239      	movs	r2, #57	; 0x39
 80079b0:	5c9b      	ldrb	r3, [r3, r2]
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d001      	beq.n	80079bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e03b      	b.n	8007a34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2239      	movs	r2, #57	; 0x39
 80079c0:	2102      	movs	r1, #2
 80079c2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2101      	movs	r1, #1
 80079d0:	430a      	orrs	r2, r1
 80079d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	05db      	lsls	r3, r3, #23
 80079dc:	429a      	cmp	r2, r3
 80079de:	d00e      	beq.n	80079fe <HAL_TIM_Base_Start_IT+0x5a>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <HAL_TIM_Base_Start_IT+0x98>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d009      	beq.n	80079fe <HAL_TIM_Base_Start_IT+0x5a>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a14      	ldr	r2, [pc, #80]	; (8007a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_TIM_Base_Start_IT+0x5a>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a12      	ldr	r2, [pc, #72]	; (8007a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d111      	bne.n	8007a22 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2207      	movs	r2, #7
 8007a06:	4013      	ands	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b06      	cmp	r3, #6
 8007a0e:	d010      	beq.n	8007a32 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a20:	e007      	b.n	8007a32 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	0018      	movs	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b004      	add	sp, #16
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40000400 	.word	0x40000400
 8007a40:	40010800 	.word	0x40010800
 8007a44:	40011400 	.word	0x40011400

08007a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2202      	movs	r2, #2
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d124      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2202      	movs	r2, #2
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d11d      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2203      	movs	r2, #3
 8007a72:	4252      	negs	r2, r2
 8007a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	2203      	movs	r2, #3
 8007a84:	4013      	ands	r3, r2
 8007a86:	d004      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 f9a0 	bl	8007dd0 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e007      	b.n	8007aa2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 f993 	bl	8007dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f000 f99f 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2204      	movs	r2, #4
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b04      	cmp	r3, #4
 8007ab4:	d125      	bne.n	8007b02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2204      	movs	r2, #4
 8007abe:	4013      	ands	r3, r2
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d11e      	bne.n	8007b02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2205      	movs	r2, #5
 8007aca:	4252      	negs	r2, r2
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	23c0      	movs	r3, #192	; 0xc0
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d004      	beq.n	8007aec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 f973 	bl	8007dd0 <HAL_TIM_IC_CaptureCallback>
 8007aea:	e007      	b.n	8007afc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0018      	movs	r0, r3
 8007af0:	f000 f966 	bl	8007dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 f972 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2208      	movs	r2, #8
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d124      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2208      	movs	r2, #8
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d11d      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2209      	movs	r2, #9
 8007b24:	4252      	negs	r2, r2
 8007b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2204      	movs	r2, #4
 8007b2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	2203      	movs	r2, #3
 8007b36:	4013      	ands	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 f947 	bl	8007dd0 <HAL_TIM_IC_CaptureCallback>
 8007b42:	e007      	b.n	8007b54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	0018      	movs	r0, r3
 8007b48:	f000 f93a 	bl	8007dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f000 f946 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2210      	movs	r2, #16
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	d125      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2210      	movs	r2, #16
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b10      	cmp	r3, #16
 8007b74:	d11e      	bne.n	8007bb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2211      	movs	r2, #17
 8007b7c:	4252      	negs	r2, r2
 8007b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2208      	movs	r2, #8
 8007b84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	23c0      	movs	r3, #192	; 0xc0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4013      	ands	r3, r2
 8007b92:	d004      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 f91a 	bl	8007dd0 <HAL_TIM_IC_CaptureCallback>
 8007b9c:	e007      	b.n	8007bae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f000 f90d 	bl	8007dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	0018      	movs	r0, r3
 8007baa:	f000 f919 	bl	8007de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d10f      	bne.n	8007be2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	4252      	negs	r2, r2
 8007bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f7fd f8ed 	bl	8004dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2240      	movs	r2, #64	; 0x40
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b40      	cmp	r3, #64	; 0x40
 8007bee:	d10f      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2240      	movs	r2, #64	; 0x40
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b40      	cmp	r3, #64	; 0x40
 8007bfc:	d108      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2241      	movs	r2, #65	; 0x41
 8007c04:	4252      	negs	r2, r2
 8007c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f000 f8f0 	bl	8007df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b002      	add	sp, #8
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c22:	230f      	movs	r3, #15
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2238      	movs	r2, #56	; 0x38
 8007c2e:	5c9b      	ldrb	r3, [r3, r2]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIM_ConfigClockSource+0x20>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e0bc      	b.n	8007db2 <HAL_TIM_ConfigClockSource+0x19a>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2238      	movs	r2, #56	; 0x38
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2239      	movs	r2, #57	; 0x39
 8007c44:	2102      	movs	r1, #2
 8007c46:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2277      	movs	r2, #119	; 0x77
 8007c54:	4393      	bics	r3, r2
 8007c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a58      	ldr	r2, [pc, #352]	; (8007dbc <HAL_TIM_ConfigClockSource+0x1a4>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2280      	movs	r2, #128	; 0x80
 8007c6e:	0192      	lsls	r2, r2, #6
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d040      	beq.n	8007cf6 <HAL_TIM_ConfigClockSource+0xde>
 8007c74:	2280      	movs	r2, #128	; 0x80
 8007c76:	0192      	lsls	r2, r2, #6
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d900      	bls.n	8007c7e <HAL_TIM_ConfigClockSource+0x66>
 8007c7c:	e088      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007c7e:	2280      	movs	r2, #128	; 0x80
 8007c80:	0152      	lsls	r2, r2, #5
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d100      	bne.n	8007c88 <HAL_TIM_ConfigClockSource+0x70>
 8007c86:	e088      	b.n	8007d9a <HAL_TIM_ConfigClockSource+0x182>
 8007c88:	2280      	movs	r2, #128	; 0x80
 8007c8a:	0152      	lsls	r2, r2, #5
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d900      	bls.n	8007c92 <HAL_TIM_ConfigClockSource+0x7a>
 8007c90:	e07e      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007c92:	2b70      	cmp	r3, #112	; 0x70
 8007c94:	d018      	beq.n	8007cc8 <HAL_TIM_ConfigClockSource+0xb0>
 8007c96:	d900      	bls.n	8007c9a <HAL_TIM_ConfigClockSource+0x82>
 8007c98:	e07a      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007c9a:	2b60      	cmp	r3, #96	; 0x60
 8007c9c:	d04f      	beq.n	8007d3e <HAL_TIM_ConfigClockSource+0x126>
 8007c9e:	d900      	bls.n	8007ca2 <HAL_TIM_ConfigClockSource+0x8a>
 8007ca0:	e076      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007ca2:	2b50      	cmp	r3, #80	; 0x50
 8007ca4:	d03b      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x106>
 8007ca6:	d900      	bls.n	8007caa <HAL_TIM_ConfigClockSource+0x92>
 8007ca8:	e072      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d057      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0x146>
 8007cae:	d900      	bls.n	8007cb2 <HAL_TIM_ConfigClockSource+0x9a>
 8007cb0:	e06e      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007cb2:	2b30      	cmp	r3, #48	; 0x30
 8007cb4:	d063      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x166>
 8007cb6:	d86b      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d060      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x166>
 8007cbc:	d868      	bhi.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d05d      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x166>
 8007cc2:	2b10      	cmp	r3, #16
 8007cc4:	d05b      	beq.n	8007d7e <HAL_TIM_ConfigClockSource+0x166>
 8007cc6:	e063      	b.n	8007d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	6899      	ldr	r1, [r3, #8]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f000 f96a 	bl	8007fb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2277      	movs	r2, #119	; 0x77
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	609a      	str	r2, [r3, #8]
      break;
 8007cf4:	e052      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6899      	ldr	r1, [r3, #8]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f000 f953 	bl	8007fb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	01c9      	lsls	r1, r1, #7
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
      break;
 8007d1c:	e03e      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6859      	ldr	r1, [r3, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	001a      	movs	r2, r3
 8007d2c:	f000 f8c6 	bl	8007ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2150      	movs	r1, #80	; 0x50
 8007d36:	0018      	movs	r0, r3
 8007d38:	f000 f920 	bl	8007f7c <TIM_ITRx_SetConfig>
      break;
 8007d3c:	e02e      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6818      	ldr	r0, [r3, #0]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6859      	ldr	r1, [r3, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	001a      	movs	r2, r3
 8007d4c:	f000 f8e4 	bl	8007f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2160      	movs	r1, #96	; 0x60
 8007d56:	0018      	movs	r0, r3
 8007d58:	f000 f910 	bl	8007f7c <TIM_ITRx_SetConfig>
      break;
 8007d5c:	e01e      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6859      	ldr	r1, [r3, #4]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	001a      	movs	r2, r3
 8007d6c:	f000 f8a6 	bl	8007ebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2140      	movs	r1, #64	; 0x40
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 f900 	bl	8007f7c <TIM_ITRx_SetConfig>
      break;
 8007d7c:	e00e      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	0019      	movs	r1, r3
 8007d88:	0010      	movs	r0, r2
 8007d8a:	f000 f8f7 	bl	8007f7c <TIM_ITRx_SetConfig>
      break;
 8007d8e:	e005      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8007d90:	230f      	movs	r3, #15
 8007d92:	18fb      	adds	r3, r7, r3
 8007d94:	2201      	movs	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
      break;
 8007d98:	e000      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007d9a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2239      	movs	r2, #57	; 0x39
 8007da0:	2101      	movs	r1, #1
 8007da2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2238      	movs	r2, #56	; 0x38
 8007da8:	2100      	movs	r1, #0
 8007daa:	5499      	strb	r1, [r3, r2]

  return status;
 8007dac:	230f      	movs	r3, #15
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	781b      	ldrb	r3, [r3, #0]
}
 8007db2:	0018      	movs	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b004      	add	sp, #16
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	ffff00ff 	.word	0xffff00ff

08007dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dc8:	46c0      	nop			; (mov r8, r8)
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b002      	add	sp, #8
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b002      	add	sp, #8
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007de8:	46c0      	nop			; (mov r8, r8)
 8007dea:	46bd      	mov	sp, r7
 8007dec:	b002      	add	sp, #8
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007df8:	46c0      	nop			; (mov r8, r8)
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	05db      	lsls	r3, r3, #23
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d00b      	beq.n	8007e32 <TIM_Base_SetConfig+0x32>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a23      	ldr	r2, [pc, #140]	; (8007eac <TIM_Base_SetConfig+0xac>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <TIM_Base_SetConfig+0x32>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a22      	ldr	r2, [pc, #136]	; (8007eb0 <TIM_Base_SetConfig+0xb0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d003      	beq.n	8007e32 <TIM_Base_SetConfig+0x32>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a21      	ldr	r2, [pc, #132]	; (8007eb4 <TIM_Base_SetConfig+0xb4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d108      	bne.n	8007e44 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2270      	movs	r2, #112	; 0x70
 8007e36:	4393      	bics	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	05db      	lsls	r3, r3, #23
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d00b      	beq.n	8007e66 <TIM_Base_SetConfig+0x66>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a16      	ldr	r2, [pc, #88]	; (8007eac <TIM_Base_SetConfig+0xac>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d007      	beq.n	8007e66 <TIM_Base_SetConfig+0x66>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <TIM_Base_SetConfig+0xb0>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_Base_SetConfig+0x66>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <TIM_Base_SetConfig+0xb4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d108      	bne.n	8007e78 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4a13      	ldr	r2, [pc, #76]	; (8007eb8 <TIM_Base_SetConfig+0xb8>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2280      	movs	r2, #128	; 0x80
 8007e7c:	4393      	bics	r3, r2
 8007e7e:	001a      	movs	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	615a      	str	r2, [r3, #20]
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b004      	add	sp, #16
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40010800 	.word	0x40010800
 8007eb4:	40011400 	.word	0x40011400
 8007eb8:	fffffcff 	.word	0xfffffcff

08007ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	4393      	bics	r3, r2
 8007ed6:	001a      	movs	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	22f0      	movs	r2, #240	; 0xf0
 8007ee6:	4393      	bics	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	4393      	bics	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	621a      	str	r2, [r3, #32]
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	46bd      	mov	sp, r7
 8007f14:	b006      	add	sp, #24
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	2210      	movs	r2, #16
 8007f2a:	4393      	bics	r3, r2
 8007f2c:	001a      	movs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	4a0d      	ldr	r2, [pc, #52]	; (8007f78 <TIM_TI2_ConfigInputStage+0x60>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	031b      	lsls	r3, r3, #12
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	22a0      	movs	r2, #160	; 0xa0
 8007f54:	4393      	bics	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b006      	add	sp, #24
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	ffff0fff 	.word	0xffff0fff

08007f7c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2270      	movs	r2, #112	; 0x70
 8007f90:	4393      	bics	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	2207      	movs	r2, #7
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	609a      	str	r2, [r3, #8]
}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b004      	add	sp, #16
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
 8007fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	4a09      	ldr	r2, [pc, #36]	; (8007fec <TIM_ETR_SetConfig+0x3c>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	021a      	lsls	r2, r3, #8
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	46c0      	nop			; (mov r8, r8)
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b006      	add	sp, #24
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	ffff00ff 	.word	0xffff00ff

08007ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2238      	movs	r2, #56	; 0x38
 8007ffe:	5c9b      	ldrb	r3, [r3, r2]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e047      	b.n	8008098 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2238      	movs	r2, #56	; 0x38
 800800c:	2101      	movs	r1, #1
 800800e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2239      	movs	r2, #57	; 0x39
 8008014:	2102      	movs	r1, #2
 8008016:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2270      	movs	r2, #112	; 0x70
 800802c:	4393      	bics	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	2380      	movs	r3, #128	; 0x80
 8008048:	05db      	lsls	r3, r3, #23
 800804a:	429a      	cmp	r2, r3
 800804c:	d00e      	beq.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a11      	ldr	r2, [pc, #68]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d10c      	bne.n	8008086 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2280      	movs	r2, #128	; 0x80
 8008070:	4393      	bics	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	4313      	orrs	r3, r2
 800807c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2239      	movs	r2, #57	; 0x39
 800808a:	2101      	movs	r1, #1
 800808c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2238      	movs	r2, #56	; 0x38
 8008092:	2100      	movs	r1, #0
 8008094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	0018      	movs	r0, r3
 800809a:	46bd      	mov	sp, r7
 800809c:	b004      	add	sp, #16
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40010800 	.word	0x40010800
 80080a8:	40011400 	.word	0x40011400

080080ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e044      	b.n	8008148 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2278      	movs	r2, #120	; 0x78
 80080ca:	2100      	movs	r1, #0
 80080cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7fd f8cd 	bl	8005270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2224      	movs	r2, #36	; 0x24
 80080da:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2101      	movs	r1, #1
 80080e8:	438a      	bics	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 fc2c 	bl	800894c <UART_SetConfig>
 80080f4:	0003      	movs	r3, r0
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d101      	bne.n	80080fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e024      	b.n	8008148 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	0018      	movs	r0, r3
 800810a:	f000 febd 	bl	8008e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	490d      	ldr	r1, [pc, #52]	; (8008150 <HAL_UART_Init+0xa4>)
 800811a:	400a      	ands	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	212a      	movs	r1, #42	; 0x2a
 800812a:	438a      	bics	r2, r1
 800812c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2101      	movs	r1, #1
 800813a:	430a      	orrs	r2, r1
 800813c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	0018      	movs	r0, r3
 8008142:	f000 ff55 	bl	8008ff0 <UART_CheckIdleState>
 8008146:	0003      	movs	r3, r0
}
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}
 8008150:	ffffb7ff 	.word	0xffffb7ff

08008154 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08a      	sub	sp, #40	; 0x28
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	603b      	str	r3, [r7, #0]
 8008160:	1dbb      	adds	r3, r7, #6
 8008162:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008168:	2b20      	cmp	r3, #32
 800816a:	d000      	beq.n	800816e <HAL_UART_Transmit+0x1a>
 800816c:	e08c      	b.n	8008288 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_UART_Transmit+0x28>
 8008174:	1dbb      	adds	r3, r7, #6
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e084      	b.n	800828a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	2380      	movs	r3, #128	; 0x80
 8008186:	015b      	lsls	r3, r3, #5
 8008188:	429a      	cmp	r2, r3
 800818a:	d109      	bne.n	80081a0 <HAL_UART_Transmit+0x4c>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2201      	movs	r2, #1
 8008198:	4013      	ands	r3, r2
 800819a:	d001      	beq.n	80081a0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e074      	b.n	800828a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2284      	movs	r2, #132	; 0x84
 80081a4:	2100      	movs	r1, #0
 80081a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2221      	movs	r2, #33	; 0x21
 80081ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ae:	f7fd f93b 	bl	8005428 <HAL_GetTick>
 80081b2:	0003      	movs	r3, r0
 80081b4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1dba      	adds	r2, r7, #6
 80081ba:	2150      	movs	r1, #80	; 0x50
 80081bc:	8812      	ldrh	r2, [r2, #0]
 80081be:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1dba      	adds	r2, r7, #6
 80081c4:	2152      	movs	r1, #82	; 0x52
 80081c6:	8812      	ldrh	r2, [r2, #0]
 80081c8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	2380      	movs	r3, #128	; 0x80
 80081d0:	015b      	lsls	r3, r3, #5
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d108      	bne.n	80081e8 <HAL_UART_Transmit+0x94>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d104      	bne.n	80081e8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	e003      	b.n	80081f0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081f0:	e02f      	b.n	8008252 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	0013      	movs	r3, r2
 80081fc:	2200      	movs	r2, #0
 80081fe:	2180      	movs	r1, #128	; 0x80
 8008200:	f000 ff9e 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8008204:	1e03      	subs	r3, r0, #0
 8008206:	d004      	beq.n	8008212 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e03b      	b.n	800828a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	001a      	movs	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	05d2      	lsls	r2, r2, #23
 8008224:	0dd2      	lsrs	r2, r2, #23
 8008226:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	3302      	adds	r3, #2
 800822c:	61bb      	str	r3, [r7, #24]
 800822e:	e007      	b.n	8008240 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	781a      	ldrb	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	3301      	adds	r3, #1
 800823e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2252      	movs	r2, #82	; 0x52
 8008244:	5a9b      	ldrh	r3, [r3, r2]
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b299      	uxth	r1, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2252      	movs	r2, #82	; 0x52
 8008250:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2252      	movs	r2, #82	; 0x52
 8008256:	5a9b      	ldrh	r3, [r3, r2]
 8008258:	b29b      	uxth	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1c9      	bne.n	80081f2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	0013      	movs	r3, r2
 8008268:	2200      	movs	r2, #0
 800826a:	2140      	movs	r1, #64	; 0x40
 800826c:	f000 ff68 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8008270:	1e03      	subs	r3, r0, #0
 8008272:	d004      	beq.n	800827e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e005      	b.n	800828a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e000      	b.n	800828a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008288:	2302      	movs	r3, #2
  }
}
 800828a:	0018      	movs	r0, r3
 800828c:	46bd      	mov	sp, r7
 800828e:	b008      	add	sp, #32
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	1dbb      	adds	r3, r7, #6
 80082a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2280      	movs	r2, #128	; 0x80
 80082a6:	589b      	ldr	r3, [r3, r2]
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d14a      	bne.n	8008342 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_UART_Receive_IT+0x26>
 80082b2:	1dbb      	adds	r3, r7, #6
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e042      	b.n	8008344 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	2380      	movs	r3, #128	; 0x80
 80082c4:	015b      	lsls	r3, r3, #5
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d109      	bne.n	80082de <HAL_UART_Receive_IT+0x4a>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2201      	movs	r2, #1
 80082d6:	4013      	ands	r3, r2
 80082d8:	d001      	beq.n	80082de <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e032      	b.n	8008344 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a18      	ldr	r2, [pc, #96]	; (800834c <HAL_UART_Receive_IT+0xb8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d020      	beq.n	8008330 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	2380      	movs	r3, #128	; 0x80
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	4013      	ands	r3, r2
 80082fa:	d019      	beq.n	8008330 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008300:	613b      	str	r3, [r7, #16]
  return(result);
 8008302:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	2301      	movs	r3, #1
 8008308:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f383 8810 	msr	PRIMASK, r3
}
 8008310:	46c0      	nop			; (mov r8, r8)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2180      	movs	r1, #128	; 0x80
 800831e:	04c9      	lsls	r1, r1, #19
 8008320:	430a      	orrs	r2, r1
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008330:	1dbb      	adds	r3, r7, #6
 8008332:	881a      	ldrh	r2, [r3, #0]
 8008334:	68b9      	ldr	r1, [r7, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	0018      	movs	r0, r3
 800833a:	f000 ff6b 	bl	8009214 <UART_Start_Receive_IT>
 800833e:	0003      	movs	r3, r0
 8008340:	e000      	b.n	8008344 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8008342:	2302      	movs	r3, #2
  }
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b008      	add	sp, #32
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40004800 	.word	0x40004800

08008350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008350:	b590      	push	{r4, r7, lr}
 8008352:	b0ab      	sub	sp, #172	; 0xac
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	22a4      	movs	r2, #164	; 0xa4
 8008360:	18b9      	adds	r1, r7, r2
 8008362:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	20a0      	movs	r0, #160	; 0xa0
 800836c:	1839      	adds	r1, r7, r0
 800836e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	219c      	movs	r1, #156	; 0x9c
 8008378:	1879      	adds	r1, r7, r1
 800837a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800837c:	0011      	movs	r1, r2
 800837e:	18bb      	adds	r3, r7, r2
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a99      	ldr	r2, [pc, #612]	; (80085e8 <HAL_UART_IRQHandler+0x298>)
 8008384:	4013      	ands	r3, r2
 8008386:	2298      	movs	r2, #152	; 0x98
 8008388:	18bc      	adds	r4, r7, r2
 800838a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800838c:	18bb      	adds	r3, r7, r2
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d114      	bne.n	80083be <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008394:	187b      	adds	r3, r7, r1
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2220      	movs	r2, #32
 800839a:	4013      	ands	r3, r2
 800839c:	d00f      	beq.n	80083be <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800839e:	183b      	adds	r3, r7, r0
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2220      	movs	r2, #32
 80083a4:	4013      	ands	r3, r2
 80083a6:	d00a      	beq.n	80083be <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d100      	bne.n	80083b2 <HAL_UART_IRQHandler+0x62>
 80083b0:	e2a0      	b.n	80088f4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	0010      	movs	r0, r2
 80083ba:	4798      	blx	r3
      }
      return;
 80083bc:	e29a      	b.n	80088f4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083be:	2398      	movs	r3, #152	; 0x98
 80083c0:	18fb      	adds	r3, r7, r3
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d100      	bne.n	80083ca <HAL_UART_IRQHandler+0x7a>
 80083c8:	e114      	b.n	80085f4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80083ca:	239c      	movs	r3, #156	; 0x9c
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2201      	movs	r2, #1
 80083d2:	4013      	ands	r3, r2
 80083d4:	d106      	bne.n	80083e4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80083d6:	23a0      	movs	r3, #160	; 0xa0
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a83      	ldr	r2, [pc, #524]	; (80085ec <HAL_UART_IRQHandler+0x29c>)
 80083de:	4013      	ands	r3, r2
 80083e0:	d100      	bne.n	80083e4 <HAL_UART_IRQHandler+0x94>
 80083e2:	e107      	b.n	80085f4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083e4:	23a4      	movs	r3, #164	; 0xa4
 80083e6:	18fb      	adds	r3, r7, r3
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2201      	movs	r2, #1
 80083ec:	4013      	ands	r3, r2
 80083ee:	d012      	beq.n	8008416 <HAL_UART_IRQHandler+0xc6>
 80083f0:	23a0      	movs	r3, #160	; 0xa0
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4013      	ands	r3, r2
 80083fc:	d00b      	beq.n	8008416 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2201      	movs	r2, #1
 8008404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2284      	movs	r2, #132	; 0x84
 800840a:	589b      	ldr	r3, [r3, r2]
 800840c:	2201      	movs	r2, #1
 800840e:	431a      	orrs	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2184      	movs	r1, #132	; 0x84
 8008414:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008416:	23a4      	movs	r3, #164	; 0xa4
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2202      	movs	r2, #2
 800841e:	4013      	ands	r3, r2
 8008420:	d011      	beq.n	8008446 <HAL_UART_IRQHandler+0xf6>
 8008422:	239c      	movs	r3, #156	; 0x9c
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2201      	movs	r2, #1
 800842a:	4013      	ands	r3, r2
 800842c:	d00b      	beq.n	8008446 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2202      	movs	r2, #2
 8008434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2284      	movs	r2, #132	; 0x84
 800843a:	589b      	ldr	r3, [r3, r2]
 800843c:	2204      	movs	r2, #4
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2184      	movs	r1, #132	; 0x84
 8008444:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008446:	23a4      	movs	r3, #164	; 0xa4
 8008448:	18fb      	adds	r3, r7, r3
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2204      	movs	r2, #4
 800844e:	4013      	ands	r3, r2
 8008450:	d011      	beq.n	8008476 <HAL_UART_IRQHandler+0x126>
 8008452:	239c      	movs	r3, #156	; 0x9c
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2201      	movs	r2, #1
 800845a:	4013      	ands	r3, r2
 800845c:	d00b      	beq.n	8008476 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2204      	movs	r2, #4
 8008464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2284      	movs	r2, #132	; 0x84
 800846a:	589b      	ldr	r3, [r3, r2]
 800846c:	2202      	movs	r2, #2
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2184      	movs	r1, #132	; 0x84
 8008474:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008476:	23a4      	movs	r3, #164	; 0xa4
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2208      	movs	r2, #8
 800847e:	4013      	ands	r3, r2
 8008480:	d017      	beq.n	80084b2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008482:	23a0      	movs	r3, #160	; 0xa0
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2220      	movs	r2, #32
 800848a:	4013      	ands	r3, r2
 800848c:	d105      	bne.n	800849a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800848e:	239c      	movs	r3, #156	; 0x9c
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2201      	movs	r2, #1
 8008496:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008498:	d00b      	beq.n	80084b2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2208      	movs	r2, #8
 80084a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2284      	movs	r2, #132	; 0x84
 80084a6:	589b      	ldr	r3, [r3, r2]
 80084a8:	2208      	movs	r2, #8
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2184      	movs	r1, #132	; 0x84
 80084b0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084b2:	23a4      	movs	r3, #164	; 0xa4
 80084b4:	18fb      	adds	r3, r7, r3
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	2380      	movs	r3, #128	; 0x80
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	4013      	ands	r3, r2
 80084be:	d013      	beq.n	80084e8 <HAL_UART_IRQHandler+0x198>
 80084c0:	23a0      	movs	r3, #160	; 0xa0
 80084c2:	18fb      	adds	r3, r7, r3
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	04db      	lsls	r3, r3, #19
 80084ca:	4013      	ands	r3, r2
 80084cc:	d00c      	beq.n	80084e8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2280      	movs	r2, #128	; 0x80
 80084d4:	0112      	lsls	r2, r2, #4
 80084d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2284      	movs	r2, #132	; 0x84
 80084dc:	589b      	ldr	r3, [r3, r2]
 80084de:	2220      	movs	r2, #32
 80084e0:	431a      	orrs	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2184      	movs	r1, #132	; 0x84
 80084e6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2284      	movs	r2, #132	; 0x84
 80084ec:	589b      	ldr	r3, [r3, r2]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d100      	bne.n	80084f4 <HAL_UART_IRQHandler+0x1a4>
 80084f2:	e201      	b.n	80088f8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084f4:	23a4      	movs	r3, #164	; 0xa4
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2220      	movs	r2, #32
 80084fc:	4013      	ands	r3, r2
 80084fe:	d00e      	beq.n	800851e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008500:	23a0      	movs	r3, #160	; 0xa0
 8008502:	18fb      	adds	r3, r7, r3
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2220      	movs	r2, #32
 8008508:	4013      	ands	r3, r2
 800850a:	d008      	beq.n	800851e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	0010      	movs	r0, r2
 800851c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2284      	movs	r2, #132	; 0x84
 8008522:	589b      	ldr	r3, [r3, r2]
 8008524:	2194      	movs	r1, #148	; 0x94
 8008526:	187a      	adds	r2, r7, r1
 8008528:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2240      	movs	r2, #64	; 0x40
 8008532:	4013      	ands	r3, r2
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d004      	beq.n	8008542 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008538:	187b      	adds	r3, r7, r1
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2228      	movs	r2, #40	; 0x28
 800853e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008540:	d047      	beq.n	80085d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	0018      	movs	r0, r3
 8008546:	f000 ff2f 	bl	80093a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	2240      	movs	r2, #64	; 0x40
 8008552:	4013      	ands	r3, r2
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d137      	bne.n	80085c8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008558:	f3ef 8310 	mrs	r3, PRIMASK
 800855c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800855e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008560:	2090      	movs	r0, #144	; 0x90
 8008562:	183a      	adds	r2, r7, r0
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	2301      	movs	r3, #1
 8008568:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800856c:	f383 8810 	msr	PRIMASK, r3
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2140      	movs	r1, #64	; 0x40
 800857e:	438a      	bics	r2, r1
 8008580:	609a      	str	r2, [r3, #8]
 8008582:	183b      	adds	r3, r7, r0
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800858a:	f383 8810 	msr	PRIMASK, r3
}
 800858e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008594:	2b00      	cmp	r3, #0
 8008596:	d012      	beq.n	80085be <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859c:	4a14      	ldr	r2, [pc, #80]	; (80085f0 <HAL_UART_IRQHandler+0x2a0>)
 800859e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085a4:	0018      	movs	r0, r3
 80085a6:	f7fd f867 	bl	8005678 <HAL_DMA_Abort_IT>
 80085aa:	1e03      	subs	r3, r0, #0
 80085ac:	d01a      	beq.n	80085e4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b8:	0018      	movs	r0, r3
 80085ba:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085bc:	e012      	b.n	80085e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0018      	movs	r0, r3
 80085c2:	f000 f9af 	bl	8008924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c6:	e00d      	b.n	80085e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	0018      	movs	r0, r3
 80085cc:	f000 f9aa 	bl	8008924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d0:	e008      	b.n	80085e4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 f9a5 	bl	8008924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2284      	movs	r2, #132	; 0x84
 80085de:	2100      	movs	r1, #0
 80085e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80085e2:	e189      	b.n	80088f8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	46c0      	nop			; (mov r8, r8)
    return;
 80085e6:	e187      	b.n	80088f8 <HAL_UART_IRQHandler+0x5a8>
 80085e8:	0000080f 	.word	0x0000080f
 80085ec:	04000120 	.word	0x04000120
 80085f0:	08009471 	.word	0x08009471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d000      	beq.n	80085fe <HAL_UART_IRQHandler+0x2ae>
 80085fc:	e13b      	b.n	8008876 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085fe:	23a4      	movs	r3, #164	; 0xa4
 8008600:	18fb      	adds	r3, r7, r3
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2210      	movs	r2, #16
 8008606:	4013      	ands	r3, r2
 8008608:	d100      	bne.n	800860c <HAL_UART_IRQHandler+0x2bc>
 800860a:	e134      	b.n	8008876 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800860c:	23a0      	movs	r3, #160	; 0xa0
 800860e:	18fb      	adds	r3, r7, r3
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2210      	movs	r2, #16
 8008614:	4013      	ands	r3, r2
 8008616:	d100      	bne.n	800861a <HAL_UART_IRQHandler+0x2ca>
 8008618:	e12d      	b.n	8008876 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2210      	movs	r2, #16
 8008620:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2240      	movs	r2, #64	; 0x40
 800862a:	4013      	ands	r3, r2
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d000      	beq.n	8008632 <HAL_UART_IRQHandler+0x2e2>
 8008630:	e0a1      	b.n	8008776 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	217e      	movs	r1, #126	; 0x7e
 800863c:	187b      	adds	r3, r7, r1
 800863e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008640:	187b      	adds	r3, r7, r1
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d100      	bne.n	800864a <HAL_UART_IRQHandler+0x2fa>
 8008648:	e158      	b.n	80088fc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2258      	movs	r2, #88	; 0x58
 800864e:	5a9b      	ldrh	r3, [r3, r2]
 8008650:	187a      	adds	r2, r7, r1
 8008652:	8812      	ldrh	r2, [r2, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d300      	bcc.n	800865a <HAL_UART_IRQHandler+0x30a>
 8008658:	e150      	b.n	80088fc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	187a      	adds	r2, r7, r1
 800865e:	215a      	movs	r1, #90	; 0x5a
 8008660:	8812      	ldrh	r2, [r2, #0]
 8008662:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2220      	movs	r2, #32
 800866e:	4013      	ands	r3, r2
 8008670:	d16f      	bne.n	8008752 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008672:	f3ef 8310 	mrs	r3, PRIMASK
 8008676:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	67bb      	str	r3, [r7, #120]	; 0x78
 800867c:	2301      	movs	r3, #1
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	f383 8810 	msr	PRIMASK, r3
}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	499e      	ldr	r1, [pc, #632]	; (800890c <HAL_UART_IRQHandler+0x5bc>)
 8008694:	400a      	ands	r2, r1
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869e:	f383 8810 	msr	PRIMASK, r3
}
 80086a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a4:	f3ef 8310 	mrs	r3, PRIMASK
 80086a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80086aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ac:	677b      	str	r3, [r7, #116]	; 0x74
 80086ae:	2301      	movs	r3, #1
 80086b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086b4:	f383 8810 	msr	PRIMASK, r3
}
 80086b8:	46c0      	nop			; (mov r8, r8)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2101      	movs	r1, #1
 80086c6:	438a      	bics	r2, r1
 80086c8:	609a      	str	r2, [r3, #8]
 80086ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d0:	f383 8810 	msr	PRIMASK, r3
}
 80086d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d6:	f3ef 8310 	mrs	r3, PRIMASK
 80086da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80086dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086de:	673b      	str	r3, [r7, #112]	; 0x70
 80086e0:	2301      	movs	r3, #1
 80086e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e6:	f383 8810 	msr	PRIMASK, r3
}
 80086ea:	46c0      	nop			; (mov r8, r8)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2140      	movs	r1, #64	; 0x40
 80086f8:	438a      	bics	r2, r1
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008702:	f383 8810 	msr	PRIMASK, r3
}
 8008706:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2280      	movs	r2, #128	; 0x80
 800870c:	2120      	movs	r1, #32
 800870e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008716:	f3ef 8310 	mrs	r3, PRIMASK
 800871a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800871c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008720:	2301      	movs	r3, #1
 8008722:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008726:	f383 8810 	msr	PRIMASK, r3
}
 800872a:	46c0      	nop			; (mov r8, r8)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2110      	movs	r1, #16
 8008738:	438a      	bics	r2, r1
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008742:	f383 8810 	msr	PRIMASK, r3
}
 8008746:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800874c:	0018      	movs	r0, r3
 800874e:	f7fc ff53 	bl	80055f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2258      	movs	r2, #88	; 0x58
 800875c:	5a9a      	ldrh	r2, [r3, r2]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	215a      	movs	r1, #90	; 0x5a
 8008762:	5a5b      	ldrh	r3, [r3, r1]
 8008764:	b29b      	uxth	r3, r3
 8008766:	1ad3      	subs	r3, r2, r3
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	0011      	movs	r1, r2
 800876e:	0018      	movs	r0, r3
 8008770:	f000 f8e0 	bl	8008934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008774:	e0c2      	b.n	80088fc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2258      	movs	r2, #88	; 0x58
 800877a:	5a99      	ldrh	r1, [r3, r2]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	225a      	movs	r2, #90	; 0x5a
 8008780:	5a9b      	ldrh	r3, [r3, r2]
 8008782:	b29a      	uxth	r2, r3
 8008784:	208e      	movs	r0, #142	; 0x8e
 8008786:	183b      	adds	r3, r7, r0
 8008788:	1a8a      	subs	r2, r1, r2
 800878a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	225a      	movs	r2, #90	; 0x5a
 8008790:	5a9b      	ldrh	r3, [r3, r2]
 8008792:	b29b      	uxth	r3, r3
 8008794:	2b00      	cmp	r3, #0
 8008796:	d100      	bne.n	800879a <HAL_UART_IRQHandler+0x44a>
 8008798:	e0b2      	b.n	8008900 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800879a:	183b      	adds	r3, r7, r0
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d100      	bne.n	80087a4 <HAL_UART_IRQHandler+0x454>
 80087a2:	e0ad      	b.n	8008900 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a4:	f3ef 8310 	mrs	r3, PRIMASK
 80087a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80087aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087ac:	2488      	movs	r4, #136	; 0x88
 80087ae:	193a      	adds	r2, r7, r4
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	2301      	movs	r3, #1
 80087b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	f383 8810 	msr	PRIMASK, r3
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4951      	ldr	r1, [pc, #324]	; (8008910 <HAL_UART_IRQHandler+0x5c0>)
 80087ca:	400a      	ands	r2, r1
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	193b      	adds	r3, r7, r4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	f383 8810 	msr	PRIMASK, r3
}
 80087da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087dc:	f3ef 8310 	mrs	r3, PRIMASK
 80087e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80087e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e4:	2484      	movs	r4, #132	; 0x84
 80087e6:	193a      	adds	r2, r7, r4
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	2301      	movs	r3, #1
 80087ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f383 8810 	msr	PRIMASK, r3
}
 80087f4:	46c0      	nop			; (mov r8, r8)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2101      	movs	r1, #1
 8008802:	438a      	bics	r2, r1
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	193b      	adds	r3, r7, r4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f383 8810 	msr	PRIMASK, r3
}
 8008812:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2280      	movs	r2, #128	; 0x80
 8008818:	2120      	movs	r1, #32
 800881a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008828:	f3ef 8310 	mrs	r3, PRIMASK
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008830:	2480      	movs	r4, #128	; 0x80
 8008832:	193a      	adds	r2, r7, r4
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	2301      	movs	r3, #1
 8008838:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	f383 8810 	msr	PRIMASK, r3
}
 8008840:	46c0      	nop			; (mov r8, r8)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2110      	movs	r1, #16
 800884e:	438a      	bics	r2, r1
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	193b      	adds	r3, r7, r4
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885a:	f383 8810 	msr	PRIMASK, r3
}
 800885e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008866:	183b      	adds	r3, r7, r0
 8008868:	881a      	ldrh	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	0011      	movs	r1, r2
 800886e:	0018      	movs	r0, r3
 8008870:	f000 f860 	bl	8008934 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008874:	e044      	b.n	8008900 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008876:	23a4      	movs	r3, #164	; 0xa4
 8008878:	18fb      	adds	r3, r7, r3
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	2380      	movs	r3, #128	; 0x80
 800887e:	035b      	lsls	r3, r3, #13
 8008880:	4013      	ands	r3, r2
 8008882:	d010      	beq.n	80088a6 <HAL_UART_IRQHandler+0x556>
 8008884:	239c      	movs	r3, #156	; 0x9c
 8008886:	18fb      	adds	r3, r7, r3
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	03db      	lsls	r3, r3, #15
 800888e:	4013      	ands	r3, r2
 8008890:	d009      	beq.n	80088a6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	0352      	lsls	r2, r2, #13
 800889a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	0018      	movs	r0, r3
 80088a0:	f000 ffec 	bl	800987c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088a4:	e02f      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088a6:	23a4      	movs	r3, #164	; 0xa4
 80088a8:	18fb      	adds	r3, r7, r3
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2280      	movs	r2, #128	; 0x80
 80088ae:	4013      	ands	r3, r2
 80088b0:	d00f      	beq.n	80088d2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80088b2:	23a0      	movs	r3, #160	; 0xa0
 80088b4:	18fb      	adds	r3, r7, r3
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2280      	movs	r2, #128	; 0x80
 80088ba:	4013      	ands	r3, r2
 80088bc:	d009      	beq.n	80088d2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01e      	beq.n	8008904 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	0010      	movs	r0, r2
 80088ce:	4798      	blx	r3
    }
    return;
 80088d0:	e018      	b.n	8008904 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088d2:	23a4      	movs	r3, #164	; 0xa4
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2240      	movs	r2, #64	; 0x40
 80088da:	4013      	ands	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_UART_IRQHandler+0x5b6>
 80088de:	23a0      	movs	r3, #160	; 0xa0
 80088e0:	18fb      	adds	r3, r7, r3
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2240      	movs	r2, #64	; 0x40
 80088e6:	4013      	ands	r3, r2
 80088e8:	d00d      	beq.n	8008906 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 fdd6 	bl	800949e <UART_EndTransmit_IT>
    return;
 80088f2:	e008      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
      return;
 80088f4:	46c0      	nop			; (mov r8, r8)
 80088f6:	e006      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
    return;
 80088f8:	46c0      	nop			; (mov r8, r8)
 80088fa:	e004      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
      return;
 80088fc:	46c0      	nop			; (mov r8, r8)
 80088fe:	e002      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
      return;
 8008900:	46c0      	nop			; (mov r8, r8)
 8008902:	e000      	b.n	8008906 <HAL_UART_IRQHandler+0x5b6>
    return;
 8008904:	46c0      	nop			; (mov r8, r8)
  }

}
 8008906:	46bd      	mov	sp, r7
 8008908:	b02b      	add	sp, #172	; 0xac
 800890a:	bd90      	pop	{r4, r7, pc}
 800890c:	fffffeff 	.word	0xfffffeff
 8008910:	fffffedf 	.word	0xfffffedf

08008914 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800891c:	46c0      	nop			; (mov r8, r8)
 800891e:	46bd      	mov	sp, r7
 8008920:	b002      	add	sp, #8
 8008922:	bd80      	pop	{r7, pc}

08008924 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800892c:	46c0      	nop			; (mov r8, r8)
 800892e:	46bd      	mov	sp, r7
 8008930:	b002      	add	sp, #8
 8008932:	bd80      	pop	{r7, pc}

08008934 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	000a      	movs	r2, r1
 800893e:	1cbb      	adds	r3, r7, #2
 8008940:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008942:	46c0      	nop			; (mov r8, r8)
 8008944:	46bd      	mov	sp, r7
 8008946:	b002      	add	sp, #8
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b08e      	sub	sp, #56	; 0x38
 8008950:	af00      	add	r7, sp, #0
 8008952:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008954:	231a      	movs	r3, #26
 8008956:	2218      	movs	r2, #24
 8008958:	189b      	adds	r3, r3, r2
 800895a:	19db      	adds	r3, r3, r7
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	4313      	orrs	r3, r2
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4ac3      	ldr	r2, [pc, #780]	; (8008c8c <UART_SetConfig+0x340>)
 8008980:	4013      	ands	r3, r2
 8008982:	0019      	movs	r1, r3
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800898a:	430a      	orrs	r2, r1
 800898c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4abe      	ldr	r2, [pc, #760]	; (8008c90 <UART_SetConfig+0x344>)
 8008996:	4013      	ands	r3, r2
 8008998:	0019      	movs	r1, r3
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4ab8      	ldr	r2, [pc, #736]	; (8008c94 <UART_SetConfig+0x348>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d004      	beq.n	80089c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089bc:	4313      	orrs	r3, r2
 80089be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	4ab4      	ldr	r2, [pc, #720]	; (8008c98 <UART_SetConfig+0x34c>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	0019      	movs	r1, r3
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d2:	430a      	orrs	r2, r1
 80089d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4ab0      	ldr	r2, [pc, #704]	; (8008c9c <UART_SetConfig+0x350>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d131      	bne.n	8008a44 <UART_SetConfig+0xf8>
 80089e0:	4baf      	ldr	r3, [pc, #700]	; (8008ca0 <UART_SetConfig+0x354>)
 80089e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e4:	2203      	movs	r2, #3
 80089e6:	4013      	ands	r3, r2
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d01d      	beq.n	8008a28 <UART_SetConfig+0xdc>
 80089ec:	d823      	bhi.n	8008a36 <UART_SetConfig+0xea>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d00c      	beq.n	8008a0c <UART_SetConfig+0xc0>
 80089f2:	d820      	bhi.n	8008a36 <UART_SetConfig+0xea>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <UART_SetConfig+0xb2>
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d00e      	beq.n	8008a1a <UART_SetConfig+0xce>
 80089fc:	e01b      	b.n	8008a36 <UART_SetConfig+0xea>
 80089fe:	231b      	movs	r3, #27
 8008a00:	2218      	movs	r2, #24
 8008a02:	189b      	adds	r3, r3, r2
 8008a04:	19db      	adds	r3, r3, r7
 8008a06:	2201      	movs	r2, #1
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e0b4      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a0c:	231b      	movs	r3, #27
 8008a0e:	2218      	movs	r2, #24
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	19db      	adds	r3, r3, r7
 8008a14:	2202      	movs	r2, #2
 8008a16:	701a      	strb	r2, [r3, #0]
 8008a18:	e0ad      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a1a:	231b      	movs	r3, #27
 8008a1c:	2218      	movs	r2, #24
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	19db      	adds	r3, r3, r7
 8008a22:	2204      	movs	r2, #4
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	e0a6      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a28:	231b      	movs	r3, #27
 8008a2a:	2218      	movs	r2, #24
 8008a2c:	189b      	adds	r3, r3, r2
 8008a2e:	19db      	adds	r3, r3, r7
 8008a30:	2208      	movs	r2, #8
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e09f      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a36:	231b      	movs	r3, #27
 8008a38:	2218      	movs	r2, #24
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	19db      	adds	r3, r3, r7
 8008a3e:	2210      	movs	r2, #16
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e098      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a96      	ldr	r2, [pc, #600]	; (8008ca4 <UART_SetConfig+0x358>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d131      	bne.n	8008ab2 <UART_SetConfig+0x166>
 8008a4e:	4b94      	ldr	r3, [pc, #592]	; (8008ca0 <UART_SetConfig+0x354>)
 8008a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a52:	220c      	movs	r2, #12
 8008a54:	4013      	ands	r3, r2
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	d01d      	beq.n	8008a96 <UART_SetConfig+0x14a>
 8008a5a:	d823      	bhi.n	8008aa4 <UART_SetConfig+0x158>
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d00c      	beq.n	8008a7a <UART_SetConfig+0x12e>
 8008a60:	d820      	bhi.n	8008aa4 <UART_SetConfig+0x158>
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d002      	beq.n	8008a6c <UART_SetConfig+0x120>
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d00e      	beq.n	8008a88 <UART_SetConfig+0x13c>
 8008a6a:	e01b      	b.n	8008aa4 <UART_SetConfig+0x158>
 8008a6c:	231b      	movs	r3, #27
 8008a6e:	2218      	movs	r2, #24
 8008a70:	189b      	adds	r3, r3, r2
 8008a72:	19db      	adds	r3, r3, r7
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e07d      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a7a:	231b      	movs	r3, #27
 8008a7c:	2218      	movs	r2, #24
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	19db      	adds	r3, r3, r7
 8008a82:	2202      	movs	r2, #2
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e076      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a88:	231b      	movs	r3, #27
 8008a8a:	2218      	movs	r2, #24
 8008a8c:	189b      	adds	r3, r3, r2
 8008a8e:	19db      	adds	r3, r3, r7
 8008a90:	2204      	movs	r2, #4
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e06f      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008a96:	231b      	movs	r3, #27
 8008a98:	2218      	movs	r2, #24
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	19db      	adds	r3, r3, r7
 8008a9e:	2208      	movs	r2, #8
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e068      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008aa4:	231b      	movs	r3, #27
 8008aa6:	2218      	movs	r2, #24
 8008aa8:	189b      	adds	r3, r3, r2
 8008aaa:	19db      	adds	r3, r3, r7
 8008aac:	2210      	movs	r2, #16
 8008aae:	701a      	strb	r2, [r3, #0]
 8008ab0:	e061      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a7c      	ldr	r2, [pc, #496]	; (8008ca8 <UART_SetConfig+0x35c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d106      	bne.n	8008aca <UART_SetConfig+0x17e>
 8008abc:	231b      	movs	r3, #27
 8008abe:	2218      	movs	r2, #24
 8008ac0:	189b      	adds	r3, r3, r2
 8008ac2:	19db      	adds	r3, r3, r7
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	e055      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a77      	ldr	r2, [pc, #476]	; (8008cac <UART_SetConfig+0x360>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d106      	bne.n	8008ae2 <UART_SetConfig+0x196>
 8008ad4:	231b      	movs	r3, #27
 8008ad6:	2218      	movs	r2, #24
 8008ad8:	189b      	adds	r3, r3, r2
 8008ada:	19db      	adds	r3, r3, r7
 8008adc:	2200      	movs	r2, #0
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e049      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a6b      	ldr	r2, [pc, #428]	; (8008c94 <UART_SetConfig+0x348>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d13e      	bne.n	8008b6a <UART_SetConfig+0x21e>
 8008aec:	4b6c      	ldr	r3, [pc, #432]	; (8008ca0 <UART_SetConfig+0x354>)
 8008aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008af0:	23c0      	movs	r3, #192	; 0xc0
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	4013      	ands	r3, r2
 8008af6:	22c0      	movs	r2, #192	; 0xc0
 8008af8:	0112      	lsls	r2, r2, #4
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d027      	beq.n	8008b4e <UART_SetConfig+0x202>
 8008afe:	22c0      	movs	r2, #192	; 0xc0
 8008b00:	0112      	lsls	r2, r2, #4
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d82a      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b06:	2280      	movs	r2, #128	; 0x80
 8008b08:	0112      	lsls	r2, r2, #4
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d011      	beq.n	8008b32 <UART_SetConfig+0x1e6>
 8008b0e:	2280      	movs	r2, #128	; 0x80
 8008b10:	0112      	lsls	r2, r2, #4
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d822      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <UART_SetConfig+0x1d8>
 8008b1a:	2280      	movs	r2, #128	; 0x80
 8008b1c:	00d2      	lsls	r2, r2, #3
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00e      	beq.n	8008b40 <UART_SetConfig+0x1f4>
 8008b22:	e01b      	b.n	8008b5c <UART_SetConfig+0x210>
 8008b24:	231b      	movs	r3, #27
 8008b26:	2218      	movs	r2, #24
 8008b28:	189b      	adds	r3, r3, r2
 8008b2a:	19db      	adds	r3, r3, r7
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e021      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008b32:	231b      	movs	r3, #27
 8008b34:	2218      	movs	r2, #24
 8008b36:	189b      	adds	r3, r3, r2
 8008b38:	19db      	adds	r3, r3, r7
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e01a      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008b40:	231b      	movs	r3, #27
 8008b42:	2218      	movs	r2, #24
 8008b44:	189b      	adds	r3, r3, r2
 8008b46:	19db      	adds	r3, r3, r7
 8008b48:	2204      	movs	r2, #4
 8008b4a:	701a      	strb	r2, [r3, #0]
 8008b4c:	e013      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008b4e:	231b      	movs	r3, #27
 8008b50:	2218      	movs	r2, #24
 8008b52:	189b      	adds	r3, r3, r2
 8008b54:	19db      	adds	r3, r3, r7
 8008b56:	2208      	movs	r2, #8
 8008b58:	701a      	strb	r2, [r3, #0]
 8008b5a:	e00c      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008b5c:	231b      	movs	r3, #27
 8008b5e:	2218      	movs	r2, #24
 8008b60:	189b      	adds	r3, r3, r2
 8008b62:	19db      	adds	r3, r3, r7
 8008b64:	2210      	movs	r2, #16
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e005      	b.n	8008b76 <UART_SetConfig+0x22a>
 8008b6a:	231b      	movs	r3, #27
 8008b6c:	2218      	movs	r2, #24
 8008b6e:	189b      	adds	r3, r3, r2
 8008b70:	19db      	adds	r3, r3, r7
 8008b72:	2210      	movs	r2, #16
 8008b74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a46      	ldr	r2, [pc, #280]	; (8008c94 <UART_SetConfig+0x348>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d000      	beq.n	8008b82 <UART_SetConfig+0x236>
 8008b80:	e09a      	b.n	8008cb8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b82:	231b      	movs	r3, #27
 8008b84:	2218      	movs	r2, #24
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	19db      	adds	r3, r3, r7
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d01d      	beq.n	8008bcc <UART_SetConfig+0x280>
 8008b90:	dc20      	bgt.n	8008bd4 <UART_SetConfig+0x288>
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d015      	beq.n	8008bc2 <UART_SetConfig+0x276>
 8008b96:	dc1d      	bgt.n	8008bd4 <UART_SetConfig+0x288>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <UART_SetConfig+0x256>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d005      	beq.n	8008bac <UART_SetConfig+0x260>
 8008ba0:	e018      	b.n	8008bd4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba2:	f7fe fcab 	bl	80074fc <HAL_RCC_GetPCLK1Freq>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008baa:	e01c      	b.n	8008be6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bac:	4b3c      	ldr	r3, [pc, #240]	; (8008ca0 <UART_SetConfig+0x354>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2210      	movs	r2, #16
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	d002      	beq.n	8008bbc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008bb6:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <UART_SetConfig+0x364>)
 8008bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bba:	e014      	b.n	8008be6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008bbc:	4b3d      	ldr	r3, [pc, #244]	; (8008cb4 <UART_SetConfig+0x368>)
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bc0:	e011      	b.n	8008be6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bc2:	f7fe fbeb 	bl	800739c <HAL_RCC_GetSysClockFreq>
 8008bc6:	0003      	movs	r3, r0
 8008bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bca:	e00c      	b.n	8008be6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bcc:	2380      	movs	r3, #128	; 0x80
 8008bce:	021b      	lsls	r3, r3, #8
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008bd2:	e008      	b.n	8008be6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008bd8:	231a      	movs	r3, #26
 8008bda:	2218      	movs	r2, #24
 8008bdc:	189b      	adds	r3, r3, r2
 8008bde:	19db      	adds	r3, r3, r7
 8008be0:	2201      	movs	r2, #1
 8008be2:	701a      	strb	r2, [r3, #0]
        break;
 8008be4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d100      	bne.n	8008bee <UART_SetConfig+0x2a2>
 8008bec:	e133      	b.n	8008e56 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	0013      	movs	r3, r2
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	189b      	adds	r3, r3, r2
 8008bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d305      	bcc.n	8008c0a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d906      	bls.n	8008c18 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008c0a:	231a      	movs	r3, #26
 8008c0c:	2218      	movs	r2, #24
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	19db      	adds	r3, r3, r7
 8008c12:	2201      	movs	r2, #1
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	e11e      	b.n	8008e56 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	6939      	ldr	r1, [r7, #16]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	000b      	movs	r3, r1
 8008c26:	0e1b      	lsrs	r3, r3, #24
 8008c28:	0010      	movs	r0, r2
 8008c2a:	0205      	lsls	r5, r0, #8
 8008c2c:	431d      	orrs	r5, r3
 8008c2e:	000b      	movs	r3, r1
 8008c30:	021c      	lsls	r4, r3, #8
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	60bb      	str	r3, [r7, #8]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	68b8      	ldr	r0, [r7, #8]
 8008c40:	68f9      	ldr	r1, [r7, #12]
 8008c42:	1900      	adds	r0, r0, r4
 8008c44:	4169      	adcs	r1, r5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f7f7 fc28 	bl	80004a8 <__aeabi_uldivmod>
 8008c58:	0002      	movs	r2, r0
 8008c5a:	000b      	movs	r3, r1
 8008c5c:	0013      	movs	r3, r2
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c62:	23c0      	movs	r3, #192	; 0xc0
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d309      	bcc.n	8008c7e <UART_SetConfig+0x332>
 8008c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6c:	2380      	movs	r3, #128	; 0x80
 8008c6e:	035b      	lsls	r3, r3, #13
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d204      	bcs.n	8008c7e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c7a:	60da      	str	r2, [r3, #12]
 8008c7c:	e0eb      	b.n	8008e56 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8008c7e:	231a      	movs	r3, #26
 8008c80:	2218      	movs	r2, #24
 8008c82:	189b      	adds	r3, r3, r2
 8008c84:	19db      	adds	r3, r3, r7
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
 8008c8a:	e0e4      	b.n	8008e56 <UART_SetConfig+0x50a>
 8008c8c:	efff69f3 	.word	0xefff69f3
 8008c90:	ffffcfff 	.word	0xffffcfff
 8008c94:	40004800 	.word	0x40004800
 8008c98:	fffff4ff 	.word	0xfffff4ff
 8008c9c:	40013800 	.word	0x40013800
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	40004400 	.word	0x40004400
 8008ca8:	40004c00 	.word	0x40004c00
 8008cac:	40005000 	.word	0x40005000
 8008cb0:	003d0900 	.word	0x003d0900
 8008cb4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	69da      	ldr	r2, [r3, #28]
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d000      	beq.n	8008cc6 <UART_SetConfig+0x37a>
 8008cc4:	e070      	b.n	8008da8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8008cc6:	231b      	movs	r3, #27
 8008cc8:	2218      	movs	r2, #24
 8008cca:	189b      	adds	r3, r3, r2
 8008ccc:	19db      	adds	r3, r3, r7
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d822      	bhi.n	8008d1a <UART_SetConfig+0x3ce>
 8008cd4:	009a      	lsls	r2, r3, #2
 8008cd6:	4b67      	ldr	r3, [pc, #412]	; (8008e74 <UART_SetConfig+0x528>)
 8008cd8:	18d3      	adds	r3, r2, r3
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cde:	f7fe fc0d 	bl	80074fc <HAL_RCC_GetPCLK1Freq>
 8008ce2:	0003      	movs	r3, r0
 8008ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008ce6:	e021      	b.n	8008d2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ce8:	f7fe fc1e 	bl	8007528 <HAL_RCC_GetPCLK2Freq>
 8008cec:	0003      	movs	r3, r0
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008cf0:	e01c      	b.n	8008d2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf2:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <UART_SetConfig+0x52c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	d002      	beq.n	8008d02 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008cfc:	4b5f      	ldr	r3, [pc, #380]	; (8008e7c <UART_SetConfig+0x530>)
 8008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d00:	e014      	b.n	8008d2c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8008d02:	4b5f      	ldr	r3, [pc, #380]	; (8008e80 <UART_SetConfig+0x534>)
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d06:	e011      	b.n	8008d2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d08:	f7fe fb48 	bl	800739c <HAL_RCC_GetSysClockFreq>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d10:	e00c      	b.n	8008d2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d12:	2380      	movs	r3, #128	; 0x80
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008d18:	e008      	b.n	8008d2c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008d1e:	231a      	movs	r3, #26
 8008d20:	2218      	movs	r2, #24
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	19db      	adds	r3, r3, r7
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
        break;
 8008d2a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d100      	bne.n	8008d34 <UART_SetConfig+0x3e8>
 8008d32:	e090      	b.n	8008e56 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	005a      	lsls	r2, r3, #1
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	085b      	lsrs	r3, r3, #1
 8008d3e:	18d2      	adds	r2, r2, r3
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	0019      	movs	r1, r3
 8008d46:	0010      	movs	r0, r2
 8008d48:	f7f7 f9fa 	bl	8000140 <__udivsi3>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	d921      	bls.n	8008d9a <UART_SetConfig+0x44e>
 8008d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d58:	2380      	movs	r3, #128	; 0x80
 8008d5a:	025b      	lsls	r3, r3, #9
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d21c      	bcs.n	8008d9a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	200e      	movs	r0, #14
 8008d66:	2418      	movs	r4, #24
 8008d68:	1903      	adds	r3, r0, r4
 8008d6a:	19db      	adds	r3, r3, r7
 8008d6c:	210f      	movs	r1, #15
 8008d6e:	438a      	bics	r2, r1
 8008d70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d74:	085b      	lsrs	r3, r3, #1
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2207      	movs	r2, #7
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	b299      	uxth	r1, r3
 8008d7e:	1903      	adds	r3, r0, r4
 8008d80:	19db      	adds	r3, r3, r7
 8008d82:	1902      	adds	r2, r0, r4
 8008d84:	19d2      	adds	r2, r2, r7
 8008d86:	8812      	ldrh	r2, [r2, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	1902      	adds	r2, r0, r4
 8008d92:	19d2      	adds	r2, r2, r7
 8008d94:	8812      	ldrh	r2, [r2, #0]
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	e05d      	b.n	8008e56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008d9a:	231a      	movs	r3, #26
 8008d9c:	2218      	movs	r2, #24
 8008d9e:	189b      	adds	r3, r3, r2
 8008da0:	19db      	adds	r3, r3, r7
 8008da2:	2201      	movs	r2, #1
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	e056      	b.n	8008e56 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008da8:	231b      	movs	r3, #27
 8008daa:	2218      	movs	r2, #24
 8008dac:	189b      	adds	r3, r3, r2
 8008dae:	19db      	adds	r3, r3, r7
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d822      	bhi.n	8008dfc <UART_SetConfig+0x4b0>
 8008db6:	009a      	lsls	r2, r3, #2
 8008db8:	4b32      	ldr	r3, [pc, #200]	; (8008e84 <UART_SetConfig+0x538>)
 8008dba:	18d3      	adds	r3, r2, r3
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fe fb9c 	bl	80074fc <HAL_RCC_GetPCLK1Freq>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dc8:	e021      	b.n	8008e0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dca:	f7fe fbad 	bl	8007528 <HAL_RCC_GetPCLK2Freq>
 8008dce:	0003      	movs	r3, r0
 8008dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dd2:	e01c      	b.n	8008e0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd4:	4b28      	ldr	r3, [pc, #160]	; (8008e78 <UART_SetConfig+0x52c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2210      	movs	r2, #16
 8008dda:	4013      	ands	r3, r2
 8008ddc:	d002      	beq.n	8008de4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008dde:	4b27      	ldr	r3, [pc, #156]	; (8008e7c <UART_SetConfig+0x530>)
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008de2:	e014      	b.n	8008e0e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8008de4:	4b26      	ldr	r3, [pc, #152]	; (8008e80 <UART_SetConfig+0x534>)
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008de8:	e011      	b.n	8008e0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dea:	f7fe fad7 	bl	800739c <HAL_RCC_GetSysClockFreq>
 8008dee:	0003      	movs	r3, r0
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008df2:	e00c      	b.n	8008e0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008dfa:	e008      	b.n	8008e0e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008e00:	231a      	movs	r3, #26
 8008e02:	2218      	movs	r2, #24
 8008e04:	189b      	adds	r3, r3, r2
 8008e06:	19db      	adds	r3, r3, r7
 8008e08:	2201      	movs	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]
        break;
 8008e0c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d020      	beq.n	8008e56 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	085a      	lsrs	r2, r3, #1
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	18d2      	adds	r2, r2, r3
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	0019      	movs	r1, r3
 8008e24:	0010      	movs	r0, r2
 8008e26:	f7f7 f98b 	bl	8000140 <__udivsi3>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	2b0f      	cmp	r3, #15
 8008e32:	d90a      	bls.n	8008e4a <UART_SetConfig+0x4fe>
 8008e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e36:	2380      	movs	r3, #128	; 0x80
 8008e38:	025b      	lsls	r3, r3, #9
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d205      	bcs.n	8008e4a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60da      	str	r2, [r3, #12]
 8008e48:	e005      	b.n	8008e56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008e4a:	231a      	movs	r3, #26
 8008e4c:	2218      	movs	r2, #24
 8008e4e:	189b      	adds	r3, r3, r2
 8008e50:	19db      	adds	r3, r3, r7
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008e62:	231a      	movs	r3, #26
 8008e64:	2218      	movs	r2, #24
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	19db      	adds	r3, r3, r7
 8008e6a:	781b      	ldrb	r3, [r3, #0]
}
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	b00e      	add	sp, #56	; 0x38
 8008e72:	bdb0      	pop	{r4, r5, r7, pc}
 8008e74:	0800e650 	.word	0x0800e650
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	003d0900 	.word	0x003d0900
 8008e80:	00f42400 	.word	0x00f42400
 8008e84:	0800e674 	.word	0x0800e674

08008e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2201      	movs	r2, #1
 8008e96:	4013      	ands	r3, r2
 8008e98:	d00b      	beq.n	8008eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	4a4a      	ldr	r2, [pc, #296]	; (8008fcc <UART_AdvFeatureConfig+0x144>)
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	4013      	ands	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	4a43      	ldr	r2, [pc, #268]	; (8008fd0 <UART_AdvFeatureConfig+0x148>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	0019      	movs	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2204      	movs	r2, #4
 8008eda:	4013      	ands	r3, r2
 8008edc:	d00b      	beq.n	8008ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4a3b      	ldr	r2, [pc, #236]	; (8008fd4 <UART_AdvFeatureConfig+0x14c>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	0019      	movs	r1, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2208      	movs	r2, #8
 8008efc:	4013      	ands	r3, r2
 8008efe:	d00b      	beq.n	8008f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	4a34      	ldr	r2, [pc, #208]	; (8008fd8 <UART_AdvFeatureConfig+0x150>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	0019      	movs	r1, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2210      	movs	r2, #16
 8008f1e:	4013      	ands	r3, r2
 8008f20:	d00b      	beq.n	8008f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	4a2c      	ldr	r2, [pc, #176]	; (8008fdc <UART_AdvFeatureConfig+0x154>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	0019      	movs	r1, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	2220      	movs	r2, #32
 8008f40:	4013      	ands	r3, r2
 8008f42:	d00b      	beq.n	8008f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	4a25      	ldr	r2, [pc, #148]	; (8008fe0 <UART_AdvFeatureConfig+0x158>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	0019      	movs	r1, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	2240      	movs	r2, #64	; 0x40
 8008f62:	4013      	ands	r3, r2
 8008f64:	d01d      	beq.n	8008fa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <UART_AdvFeatureConfig+0x15c>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	0019      	movs	r1, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f82:	2380      	movs	r3, #128	; 0x80
 8008f84:	035b      	lsls	r3, r3, #13
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d10b      	bne.n	8008fa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <UART_AdvFeatureConfig+0x160>)
 8008f92:	4013      	ands	r3, r2
 8008f94:	0019      	movs	r1, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2280      	movs	r2, #128	; 0x80
 8008fa8:	4013      	ands	r3, r2
 8008faa:	d00b      	beq.n	8008fc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	4a0e      	ldr	r2, [pc, #56]	; (8008fec <UART_AdvFeatureConfig+0x164>)
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	430a      	orrs	r2, r1
 8008fc2:	605a      	str	r2, [r3, #4]
  }
}
 8008fc4:	46c0      	nop			; (mov r8, r8)
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	fffdffff 	.word	0xfffdffff
 8008fd0:	fffeffff 	.word	0xfffeffff
 8008fd4:	fffbffff 	.word	0xfffbffff
 8008fd8:	ffff7fff 	.word	0xffff7fff
 8008fdc:	ffffefff 	.word	0xffffefff
 8008fe0:	ffffdfff 	.word	0xffffdfff
 8008fe4:	ffefffff 	.word	0xffefffff
 8008fe8:	ff9fffff 	.word	0xff9fffff
 8008fec:	fff7ffff 	.word	0xfff7ffff

08008ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b092      	sub	sp, #72	; 0x48
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2284      	movs	r2, #132	; 0x84
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009000:	f7fc fa12 	bl	8005428 <HAL_GetTick>
 8009004:	0003      	movs	r3, r0
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2208      	movs	r2, #8
 8009010:	4013      	ands	r3, r2
 8009012:	2b08      	cmp	r3, #8
 8009014:	d12c      	bne.n	8009070 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009018:	2280      	movs	r2, #128	; 0x80
 800901a:	0391      	lsls	r1, r2, #14
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4a46      	ldr	r2, [pc, #280]	; (8009138 <UART_CheckIdleState+0x148>)
 8009020:	9200      	str	r2, [sp, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	f000 f88c 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8009028:	1e03      	subs	r3, r0, #0
 800902a:	d021      	beq.n	8009070 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902c:	f3ef 8310 	mrs	r3, PRIMASK
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009034:	63bb      	str	r3, [r7, #56]	; 0x38
 8009036:	2301      	movs	r3, #1
 8009038:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	f383 8810 	msr	PRIMASK, r3
}
 8009040:	46c0      	nop			; (mov r8, r8)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2180      	movs	r1, #128	; 0x80
 800904e:	438a      	bics	r2, r1
 8009050:	601a      	str	r2, [r3, #0]
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	f383 8810 	msr	PRIMASK, r3
}
 800905c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2220      	movs	r2, #32
 8009062:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2278      	movs	r2, #120	; 0x78
 8009068:	2100      	movs	r1, #0
 800906a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e05f      	b.n	8009130 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2204      	movs	r2, #4
 8009078:	4013      	ands	r3, r2
 800907a:	2b04      	cmp	r3, #4
 800907c:	d146      	bne.n	800910c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	2280      	movs	r2, #128	; 0x80
 8009082:	03d1      	lsls	r1, r2, #15
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4a2c      	ldr	r2, [pc, #176]	; (8009138 <UART_CheckIdleState+0x148>)
 8009088:	9200      	str	r2, [sp, #0]
 800908a:	2200      	movs	r2, #0
 800908c:	f000 f858 	bl	8009140 <UART_WaitOnFlagUntilTimeout>
 8009090:	1e03      	subs	r3, r0, #0
 8009092:	d03b      	beq.n	800910c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009094:	f3ef 8310 	mrs	r3, PRIMASK
 8009098:	60fb      	str	r3, [r7, #12]
  return(result);
 800909a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800909c:	637b      	str	r3, [r7, #52]	; 0x34
 800909e:	2301      	movs	r3, #1
 80090a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f383 8810 	msr	PRIMASK, r3
}
 80090a8:	46c0      	nop			; (mov r8, r8)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4921      	ldr	r1, [pc, #132]	; (800913c <UART_CheckIdleState+0x14c>)
 80090b6:	400a      	ands	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f383 8810 	msr	PRIMASK, r3
}
 80090c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090c6:	f3ef 8310 	mrs	r3, PRIMASK
 80090ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80090cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ce:	633b      	str	r3, [r7, #48]	; 0x30
 80090d0:	2301      	movs	r3, #1
 80090d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f383 8810 	msr	PRIMASK, r3
}
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2101      	movs	r1, #1
 80090e8:	438a      	bics	r2, r1
 80090ea:	609a      	str	r2, [r3, #8]
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	f383 8810 	msr	PRIMASK, r3
}
 80090f6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2280      	movs	r2, #128	; 0x80
 80090fc:	2120      	movs	r1, #32
 80090fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2278      	movs	r2, #120	; 0x78
 8009104:	2100      	movs	r1, #0
 8009106:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e011      	b.n	8009130 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2280      	movs	r2, #128	; 0x80
 8009116:	2120      	movs	r1, #32
 8009118:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2278      	movs	r2, #120	; 0x78
 800912a:	2100      	movs	r1, #0
 800912c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	0018      	movs	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	b010      	add	sp, #64	; 0x40
 8009136:	bd80      	pop	{r7, pc}
 8009138:	01ffffff 	.word	0x01ffffff
 800913c:	fffffedf 	.word	0xfffffedf

08009140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	1dfb      	adds	r3, r7, #7
 800914e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009150:	e04b      	b.n	80091ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3301      	adds	r3, #1
 8009156:	d048      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009158:	f7fc f966 	bl	8005428 <HAL_GetTick>
 800915c:	0002      	movs	r2, r0
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d302      	bcc.n	800916e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800916e:	2303      	movs	r3, #3
 8009170:	e04b      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2204      	movs	r2, #4
 800917a:	4013      	ands	r3, r2
 800917c:	d035      	beq.n	80091ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	2208      	movs	r2, #8
 8009186:	4013      	ands	r3, r2
 8009188:	2b08      	cmp	r3, #8
 800918a:	d111      	bne.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2208      	movs	r2, #8
 8009192:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	0018      	movs	r0, r3
 8009198:	f000 f906 	bl	80093a8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2284      	movs	r2, #132	; 0x84
 80091a0:	2108      	movs	r1, #8
 80091a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2278      	movs	r2, #120	; 0x78
 80091a8:	2100      	movs	r1, #0
 80091aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e02c      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69da      	ldr	r2, [r3, #28]
 80091b6:	2380      	movs	r3, #128	; 0x80
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	401a      	ands	r2, r3
 80091bc:	2380      	movs	r3, #128	; 0x80
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d112      	bne.n	80091ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2280      	movs	r2, #128	; 0x80
 80091ca:	0112      	lsls	r2, r2, #4
 80091cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 f8e9 	bl	80093a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2284      	movs	r2, #132	; 0x84
 80091da:	2120      	movs	r1, #32
 80091dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2278      	movs	r2, #120	; 0x78
 80091e2:	2100      	movs	r1, #0
 80091e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e00f      	b.n	800920a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	4013      	ands	r3, r2
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	425a      	negs	r2, r3
 80091fa:	4153      	adcs	r3, r2
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	001a      	movs	r2, r3
 8009200:	1dfb      	adds	r3, r7, #7
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	d0a4      	beq.n	8009152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	0018      	movs	r0, r3
 800920c:	46bd      	mov	sp, r7
 800920e:	b004      	add	sp, #16
 8009210:	bd80      	pop	{r7, pc}
	...

08009214 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b090      	sub	sp, #64	; 0x40
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	1dbb      	adds	r3, r7, #6
 8009220:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	1dba      	adds	r2, r7, #6
 800922c:	2158      	movs	r1, #88	; 0x58
 800922e:	8812      	ldrh	r2, [r2, #0]
 8009230:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	1dba      	adds	r2, r7, #6
 8009236:	215a      	movs	r1, #90	; 0x5a
 8009238:	8812      	ldrh	r2, [r2, #0]
 800923a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	689a      	ldr	r2, [r3, #8]
 8009246:	2380      	movs	r3, #128	; 0x80
 8009248:	015b      	lsls	r3, r3, #5
 800924a:	429a      	cmp	r2, r3
 800924c:	d10d      	bne.n	800926a <UART_Start_Receive_IT+0x56>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <UART_Start_Receive_IT+0x4c>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	225c      	movs	r2, #92	; 0x5c
 800925a:	4950      	ldr	r1, [pc, #320]	; (800939c <UART_Start_Receive_IT+0x188>)
 800925c:	5299      	strh	r1, [r3, r2]
 800925e:	e02e      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	225c      	movs	r2, #92	; 0x5c
 8009264:	21ff      	movs	r1, #255	; 0xff
 8009266:	5299      	strh	r1, [r3, r2]
 8009268:	e029      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <UART_Start_Receive_IT+0x7a>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <UART_Start_Receive_IT+0x70>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	225c      	movs	r2, #92	; 0x5c
 800927e:	21ff      	movs	r1, #255	; 0xff
 8009280:	5299      	strh	r1, [r3, r2]
 8009282:	e01c      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	225c      	movs	r2, #92	; 0x5c
 8009288:	217f      	movs	r1, #127	; 0x7f
 800928a:	5299      	strh	r1, [r3, r2]
 800928c:	e017      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	2380      	movs	r3, #128	; 0x80
 8009294:	055b      	lsls	r3, r3, #21
 8009296:	429a      	cmp	r2, r3
 8009298:	d10d      	bne.n	80092b6 <UART_Start_Receive_IT+0xa2>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d104      	bne.n	80092ac <UART_Start_Receive_IT+0x98>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	225c      	movs	r2, #92	; 0x5c
 80092a6:	217f      	movs	r1, #127	; 0x7f
 80092a8:	5299      	strh	r1, [r3, r2]
 80092aa:	e008      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	225c      	movs	r2, #92	; 0x5c
 80092b0:	213f      	movs	r1, #63	; 0x3f
 80092b2:	5299      	strh	r1, [r3, r2]
 80092b4:	e003      	b.n	80092be <UART_Start_Receive_IT+0xaa>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	225c      	movs	r2, #92	; 0x5c
 80092ba:	2100      	movs	r1, #0
 80092bc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2284      	movs	r2, #132	; 0x84
 80092c2:	2100      	movs	r1, #0
 80092c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2280      	movs	r2, #128	; 0x80
 80092ca:	2122      	movs	r1, #34	; 0x22
 80092cc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ce:	f3ef 8310 	mrs	r3, PRIMASK
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d8:	2301      	movs	r3, #1
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	f383 8810 	msr	PRIMASK, r3
}
 80092e2:	46c0      	nop			; (mov r8, r8)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2101      	movs	r1, #1
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	f383 8810 	msr	PRIMASK, r3
}
 80092fe:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	015b      	lsls	r3, r3, #5
 8009308:	429a      	cmp	r2, r3
 800930a:	d107      	bne.n	800931c <UART_Start_Receive_IT+0x108>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4a22      	ldr	r2, [pc, #136]	; (80093a0 <UART_Start_Receive_IT+0x18c>)
 8009318:	669a      	str	r2, [r3, #104]	; 0x68
 800931a:	e002      	b.n	8009322 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4a21      	ldr	r2, [pc, #132]	; (80093a4 <UART_Start_Receive_IT+0x190>)
 8009320:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d019      	beq.n	800935e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800932a:	f3ef 8310 	mrs	r3, PRIMASK
 800932e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009330:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	2301      	movs	r3, #1
 8009336:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	f383 8810 	msr	PRIMASK, r3
}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2190      	movs	r1, #144	; 0x90
 800934c:	0049      	lsls	r1, r1, #1
 800934e:	430a      	orrs	r2, r1
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	f383 8810 	msr	PRIMASK, r3
}
 800935c:	e018      	b.n	8009390 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800935e:	f3ef 8310 	mrs	r3, PRIMASK
 8009362:	613b      	str	r3, [r7, #16]
  return(result);
 8009364:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009366:	63bb      	str	r3, [r7, #56]	; 0x38
 8009368:	2301      	movs	r3, #1
 800936a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	f383 8810 	msr	PRIMASK, r3
}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2120      	movs	r1, #32
 8009380:	430a      	orrs	r2, r1
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	f383 8810 	msr	PRIMASK, r3
}
 800938e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	b010      	add	sp, #64	; 0x40
 8009398:	bd80      	pop	{r7, pc}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	000001ff 	.word	0x000001ff
 80093a0:	080096b9 	.word	0x080096b9
 80093a4:	080094f5 	.word	0x080094f5

080093a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08e      	sub	sp, #56	; 0x38
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093b0:	f3ef 8310 	mrs	r3, PRIMASK
 80093b4:	617b      	str	r3, [r7, #20]
  return(result);
 80093b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ba:	2301      	movs	r3, #1
 80093bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	f383 8810 	msr	PRIMASK, r3
}
 80093c4:	46c0      	nop			; (mov r8, r8)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4926      	ldr	r1, [pc, #152]	; (800946c <UART_EndRxTransfer+0xc4>)
 80093d2:	400a      	ands	r2, r1
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	f383 8810 	msr	PRIMASK, r3
}
 80093e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e2:	f3ef 8310 	mrs	r3, PRIMASK
 80093e6:	623b      	str	r3, [r7, #32]
  return(result);
 80093e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ea:	633b      	str	r3, [r7, #48]	; 0x30
 80093ec:	2301      	movs	r3, #1
 80093ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	f383 8810 	msr	PRIMASK, r3
}
 80093f6:	46c0      	nop			; (mov r8, r8)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2101      	movs	r1, #1
 8009404:	438a      	bics	r2, r1
 8009406:	609a      	str	r2, [r3, #8]
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	f383 8810 	msr	PRIMASK, r3
}
 8009412:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009418:	2b01      	cmp	r3, #1
 800941a:	d118      	bne.n	800944e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800941c:	f3ef 8310 	mrs	r3, PRIMASK
 8009420:	60bb      	str	r3, [r7, #8]
  return(result);
 8009422:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009426:	2301      	movs	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f383 8810 	msr	PRIMASK, r3
}
 8009430:	46c0      	nop			; (mov r8, r8)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2110      	movs	r1, #16
 800943e:	438a      	bics	r2, r1
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f383 8810 	msr	PRIMASK, r3
}
 800944c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2280      	movs	r2, #128	; 0x80
 8009452:	2120      	movs	r1, #32
 8009454:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	46bd      	mov	sp, r7
 8009466:	b00e      	add	sp, #56	; 0x38
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	fffffedf 	.word	0xfffffedf

08009470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	225a      	movs	r2, #90	; 0x5a
 8009482:	2100      	movs	r1, #0
 8009484:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2252      	movs	r2, #82	; 0x52
 800948a:	2100      	movs	r1, #0
 800948c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	0018      	movs	r0, r3
 8009492:	f7ff fa47 	bl	8008924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009496:	46c0      	nop			; (mov r8, r8)
 8009498:	46bd      	mov	sp, r7
 800949a:	b004      	add	sp, #16
 800949c:	bd80      	pop	{r7, pc}

0800949e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a6:	f3ef 8310 	mrs	r3, PRIMASK
 80094aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80094ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ae:	617b      	str	r3, [r7, #20]
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f383 8810 	msr	PRIMASK, r3
}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2140      	movs	r1, #64	; 0x40
 80094c8:	438a      	bics	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f383 8810 	msr	PRIMASK, r3
}
 80094d6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2220      	movs	r2, #32
 80094dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	0018      	movs	r0, r3
 80094e8:	f7ff fa14 	bl	8008914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ec:	46c0      	nop			; (mov r8, r8)
 80094ee:	46bd      	mov	sp, r7
 80094f0:	b006      	add	sp, #24
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b094      	sub	sp, #80	; 0x50
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094fc:	204e      	movs	r0, #78	; 0x4e
 80094fe:	183b      	adds	r3, r7, r0
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	215c      	movs	r1, #92	; 0x5c
 8009504:	5a52      	ldrh	r2, [r2, r1]
 8009506:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2280      	movs	r2, #128	; 0x80
 800950c:	589b      	ldr	r3, [r3, r2]
 800950e:	2b22      	cmp	r3, #34	; 0x22
 8009510:	d000      	beq.n	8009514 <UART_RxISR_8BIT+0x20>
 8009512:	e0bf      	b.n	8009694 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800951a:	214c      	movs	r1, #76	; 0x4c
 800951c:	187b      	adds	r3, r7, r1
 800951e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009520:	187b      	adds	r3, r7, r1
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b2da      	uxtb	r2, r3
 8009526:	183b      	adds	r3, r7, r0
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b2d9      	uxtb	r1, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009530:	400a      	ands	r2, r1
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	225a      	movs	r2, #90	; 0x5a
 8009544:	5a9b      	ldrh	r3, [r3, r2]
 8009546:	b29b      	uxth	r3, r3
 8009548:	3b01      	subs	r3, #1
 800954a:	b299      	uxth	r1, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	225a      	movs	r2, #90	; 0x5a
 8009550:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	225a      	movs	r2, #90	; 0x5a
 8009556:	5a9b      	ldrh	r3, [r3, r2]
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d000      	beq.n	8009560 <UART_RxISR_8BIT+0x6c>
 800955e:	e0a1      	b.n	80096a4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009560:	f3ef 8310 	mrs	r3, PRIMASK
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009568:	64bb      	str	r3, [r7, #72]	; 0x48
 800956a:	2301      	movs	r3, #1
 800956c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	f383 8810 	msr	PRIMASK, r3
}
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	494a      	ldr	r1, [pc, #296]	; (80096ac <UART_RxISR_8BIT+0x1b8>)
 8009582:	400a      	ands	r2, r1
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009588:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	f383 8810 	msr	PRIMASK, r3
}
 8009590:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009592:	f3ef 8310 	mrs	r3, PRIMASK
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959a:	647b      	str	r3, [r7, #68]	; 0x44
 800959c:	2301      	movs	r3, #1
 800959e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a2:	f383 8810 	msr	PRIMASK, r3
}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689a      	ldr	r2, [r3, #8]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2101      	movs	r1, #1
 80095b4:	438a      	bics	r2, r1
 80095b6:	609a      	str	r2, [r3, #8]
 80095b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	f383 8810 	msr	PRIMASK, r3
}
 80095c2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2280      	movs	r2, #128	; 0x80
 80095c8:	2120      	movs	r1, #32
 80095ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a34      	ldr	r2, [pc, #208]	; (80096b0 <UART_RxISR_8BIT+0x1bc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d01f      	beq.n	8009622 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	4013      	ands	r3, r2
 80095ee:	d018      	beq.n	8009622 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095f0:	f3ef 8310 	mrs	r3, PRIMASK
 80095f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80095f6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095f8:	643b      	str	r3, [r7, #64]	; 0x40
 80095fa:	2301      	movs	r3, #1
 80095fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f383 8810 	msr	PRIMASK, r3
}
 8009604:	46c0      	nop			; (mov r8, r8)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4928      	ldr	r1, [pc, #160]	; (80096b4 <UART_RxISR_8BIT+0x1c0>)
 8009612:	400a      	ands	r2, r1
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009618:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	f383 8810 	msr	PRIMASK, r3
}
 8009620:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009626:	2b01      	cmp	r3, #1
 8009628:	d12f      	bne.n	800968a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009630:	f3ef 8310 	mrs	r3, PRIMASK
 8009634:	60fb      	str	r3, [r7, #12]
  return(result);
 8009636:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800963a:	2301      	movs	r3, #1
 800963c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f383 8810 	msr	PRIMASK, r3
}
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2110      	movs	r1, #16
 8009652:	438a      	bics	r2, r1
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f383 8810 	msr	PRIMASK, r3
}
 8009660:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	2210      	movs	r2, #16
 800966a:	4013      	ands	r3, r2
 800966c:	2b10      	cmp	r3, #16
 800966e:	d103      	bne.n	8009678 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2210      	movs	r2, #16
 8009676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2258      	movs	r2, #88	; 0x58
 800967c:	5a9a      	ldrh	r2, [r3, r2]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0011      	movs	r1, r2
 8009682:	0018      	movs	r0, r3
 8009684:	f7ff f956 	bl	8008934 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009688:	e00c      	b.n	80096a4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	0018      	movs	r0, r3
 800968e:	f7fb fbab 	bl	8004de8 <HAL_UART_RxCpltCallback>
}
 8009692:	e007      	b.n	80096a4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2108      	movs	r1, #8
 80096a0:	430a      	orrs	r2, r1
 80096a2:	619a      	str	r2, [r3, #24]
}
 80096a4:	46c0      	nop			; (mov r8, r8)
 80096a6:	46bd      	mov	sp, r7
 80096a8:	b014      	add	sp, #80	; 0x50
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	fffffedf 	.word	0xfffffedf
 80096b0:	40004800 	.word	0x40004800
 80096b4:	fbffffff 	.word	0xfbffffff

080096b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b094      	sub	sp, #80	; 0x50
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096c0:	204e      	movs	r0, #78	; 0x4e
 80096c2:	183b      	adds	r3, r7, r0
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	215c      	movs	r1, #92	; 0x5c
 80096c8:	5a52      	ldrh	r2, [r2, r1]
 80096ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2280      	movs	r2, #128	; 0x80
 80096d0:	589b      	ldr	r3, [r3, r2]
 80096d2:	2b22      	cmp	r3, #34	; 0x22
 80096d4:	d000      	beq.n	80096d8 <UART_RxISR_16BIT+0x20>
 80096d6:	e0bf      	b.n	8009858 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096de:	214c      	movs	r1, #76	; 0x4c
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80096ea:	187b      	adds	r3, r7, r1
 80096ec:	183a      	adds	r2, r7, r0
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	8812      	ldrh	r2, [r2, #0]
 80096f2:	4013      	ands	r3, r2
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fe:	1c9a      	adds	r2, r3, #2
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	225a      	movs	r2, #90	; 0x5a
 8009708:	5a9b      	ldrh	r3, [r3, r2]
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b299      	uxth	r1, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	225a      	movs	r2, #90	; 0x5a
 8009714:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	225a      	movs	r2, #90	; 0x5a
 800971a:	5a9b      	ldrh	r3, [r3, r2]
 800971c:	b29b      	uxth	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d000      	beq.n	8009724 <UART_RxISR_16BIT+0x6c>
 8009722:	e0a1      	b.n	8009868 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009724:	f3ef 8310 	mrs	r3, PRIMASK
 8009728:	623b      	str	r3, [r7, #32]
  return(result);
 800972a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800972c:	647b      	str	r3, [r7, #68]	; 0x44
 800972e:	2301      	movs	r3, #1
 8009730:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009734:	f383 8810 	msr	PRIMASK, r3
}
 8009738:	46c0      	nop			; (mov r8, r8)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	494a      	ldr	r1, [pc, #296]	; (8009870 <UART_RxISR_16BIT+0x1b8>)
 8009746:	400a      	ands	r2, r1
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800974c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	f383 8810 	msr	PRIMASK, r3
}
 8009754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009756:	f3ef 8310 	mrs	r3, PRIMASK
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	643b      	str	r3, [r7, #64]	; 0x40
 8009760:	2301      	movs	r3, #1
 8009762:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f383 8810 	msr	PRIMASK, r3
}
 800976a:	46c0      	nop			; (mov r8, r8)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2101      	movs	r1, #1
 8009778:	438a      	bics	r2, r1
 800977a:	609a      	str	r2, [r3, #8]
 800977c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009782:	f383 8810 	msr	PRIMASK, r3
}
 8009786:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2280      	movs	r2, #128	; 0x80
 800978c:	2120      	movs	r1, #32
 800978e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a34      	ldr	r2, [pc, #208]	; (8009874 <UART_RxISR_16BIT+0x1bc>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d01f      	beq.n	80097e6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685a      	ldr	r2, [r3, #4]
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	041b      	lsls	r3, r3, #16
 80097b0:	4013      	ands	r3, r2
 80097b2:	d018      	beq.n	80097e6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097b4:	f3ef 8310 	mrs	r3, PRIMASK
 80097b8:	617b      	str	r3, [r7, #20]
  return(result);
 80097ba:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80097bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097be:	2301      	movs	r3, #1
 80097c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f383 8810 	msr	PRIMASK, r3
}
 80097c8:	46c0      	nop			; (mov r8, r8)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4928      	ldr	r1, [pc, #160]	; (8009878 <UART_RxISR_16BIT+0x1c0>)
 80097d6:	400a      	ands	r2, r1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	f383 8810 	msr	PRIMASK, r3
}
 80097e4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d12f      	bne.n	800984e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f4:	f3ef 8310 	mrs	r3, PRIMASK
 80097f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80097fa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80097fe:	2301      	movs	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f383 8810 	msr	PRIMASK, r3
}
 8009808:	46c0      	nop			; (mov r8, r8)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2110      	movs	r1, #16
 8009816:	438a      	bics	r2, r1
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	f383 8810 	msr	PRIMASK, r3
}
 8009824:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	2210      	movs	r2, #16
 800982e:	4013      	ands	r3, r2
 8009830:	2b10      	cmp	r3, #16
 8009832:	d103      	bne.n	800983c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2258      	movs	r2, #88	; 0x58
 8009840:	5a9a      	ldrh	r2, [r3, r2]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	0011      	movs	r1, r2
 8009846:	0018      	movs	r0, r3
 8009848:	f7ff f874 	bl	8008934 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800984c:	e00c      	b.n	8009868 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	0018      	movs	r0, r3
 8009852:	f7fb fac9 	bl	8004de8 <HAL_UART_RxCpltCallback>
}
 8009856:	e007      	b.n	8009868 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	699a      	ldr	r2, [r3, #24]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2108      	movs	r1, #8
 8009864:	430a      	orrs	r2, r1
 8009866:	619a      	str	r2, [r3, #24]
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	46bd      	mov	sp, r7
 800986c:	b014      	add	sp, #80	; 0x50
 800986e:	bd80      	pop	{r7, pc}
 8009870:	fffffedf 	.word	0xfffffedf
 8009874:	40004800 	.word	0x40004800
 8009878:	fbffffff 	.word	0xfbffffff

0800987c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009884:	46c0      	nop			; (mov r8, r8)
 8009886:	46bd      	mov	sp, r7
 8009888:	b002      	add	sp, #8
 800988a:	bd80      	pop	{r7, pc}

0800988c <__errno>:
 800988c:	4b01      	ldr	r3, [pc, #4]	; (8009894 <__errno+0x8>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	2000000c 	.word	0x2000000c

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	2600      	movs	r6, #0
 800989c:	4d0c      	ldr	r5, [pc, #48]	; (80098d0 <__libc_init_array+0x38>)
 800989e:	4c0d      	ldr	r4, [pc, #52]	; (80098d4 <__libc_init_array+0x3c>)
 80098a0:	1b64      	subs	r4, r4, r5
 80098a2:	10a4      	asrs	r4, r4, #2
 80098a4:	42a6      	cmp	r6, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	2600      	movs	r6, #0
 80098aa:	f004 fddf 	bl	800e46c <_init>
 80098ae:	4d0a      	ldr	r5, [pc, #40]	; (80098d8 <__libc_init_array+0x40>)
 80098b0:	4c0a      	ldr	r4, [pc, #40]	; (80098dc <__libc_init_array+0x44>)
 80098b2:	1b64      	subs	r4, r4, r5
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	42a6      	cmp	r6, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	00b3      	lsls	r3, r6, #2
 80098be:	58eb      	ldr	r3, [r5, r3]
 80098c0:	4798      	blx	r3
 80098c2:	3601      	adds	r6, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	00b3      	lsls	r3, r6, #2
 80098c8:	58eb      	ldr	r3, [r5, r3]
 80098ca:	4798      	blx	r3
 80098cc:	3601      	adds	r6, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	0800eb4c 	.word	0x0800eb4c
 80098d4:	0800eb4c 	.word	0x0800eb4c
 80098d8:	0800eb4c 	.word	0x0800eb4c
 80098dc:	0800eb50 	.word	0x0800eb50

080098e0 <memset>:
 80098e0:	0003      	movs	r3, r0
 80098e2:	1882      	adds	r2, r0, r2
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	7019      	strb	r1, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <__cvt>:
 80098f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f2:	001e      	movs	r6, r3
 80098f4:	2300      	movs	r3, #0
 80098f6:	0014      	movs	r4, r2
 80098f8:	b08b      	sub	sp, #44	; 0x2c
 80098fa:	429e      	cmp	r6, r3
 80098fc:	da04      	bge.n	8009908 <__cvt+0x18>
 80098fe:	2180      	movs	r1, #128	; 0x80
 8009900:	0609      	lsls	r1, r1, #24
 8009902:	1873      	adds	r3, r6, r1
 8009904:	001e      	movs	r6, r3
 8009906:	232d      	movs	r3, #45	; 0x2d
 8009908:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800990a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800990c:	7013      	strb	r3, [r2, #0]
 800990e:	2320      	movs	r3, #32
 8009910:	2203      	movs	r2, #3
 8009912:	439f      	bics	r7, r3
 8009914:	2f46      	cmp	r7, #70	; 0x46
 8009916:	d007      	beq.n	8009928 <__cvt+0x38>
 8009918:	003b      	movs	r3, r7
 800991a:	3b45      	subs	r3, #69	; 0x45
 800991c:	4259      	negs	r1, r3
 800991e:	414b      	adcs	r3, r1
 8009920:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009922:	3a01      	subs	r2, #1
 8009924:	18cb      	adds	r3, r1, r3
 8009926:	9310      	str	r3, [sp, #64]	; 0x40
 8009928:	ab09      	add	r3, sp, #36	; 0x24
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	ab08      	add	r3, sp, #32
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009932:	9200      	str	r2, [sp, #0]
 8009934:	9302      	str	r3, [sp, #8]
 8009936:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009938:	0022      	movs	r2, r4
 800993a:	9301      	str	r3, [sp, #4]
 800993c:	0033      	movs	r3, r6
 800993e:	f001 ff27 	bl	800b790 <_dtoa_r>
 8009942:	0005      	movs	r5, r0
 8009944:	2f47      	cmp	r7, #71	; 0x47
 8009946:	d102      	bne.n	800994e <__cvt+0x5e>
 8009948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800994a:	07db      	lsls	r3, r3, #31
 800994c:	d528      	bpl.n	80099a0 <__cvt+0xb0>
 800994e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009950:	18eb      	adds	r3, r5, r3
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	2f46      	cmp	r7, #70	; 0x46
 8009956:	d114      	bne.n	8009982 <__cvt+0x92>
 8009958:	782b      	ldrb	r3, [r5, #0]
 800995a:	2b30      	cmp	r3, #48	; 0x30
 800995c:	d10c      	bne.n	8009978 <__cvt+0x88>
 800995e:	2200      	movs	r2, #0
 8009960:	2300      	movs	r3, #0
 8009962:	0020      	movs	r0, r4
 8009964:	0031      	movs	r1, r6
 8009966:	f7f6 fd71 	bl	800044c <__aeabi_dcmpeq>
 800996a:	2800      	cmp	r0, #0
 800996c:	d104      	bne.n	8009978 <__cvt+0x88>
 800996e:	2301      	movs	r3, #1
 8009970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800997a:	9a07      	ldr	r2, [sp, #28]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	18d3      	adds	r3, r2, r3
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	2200      	movs	r2, #0
 8009984:	2300      	movs	r3, #0
 8009986:	0020      	movs	r0, r4
 8009988:	0031      	movs	r1, r6
 800998a:	f7f6 fd5f 	bl	800044c <__aeabi_dcmpeq>
 800998e:	2800      	cmp	r0, #0
 8009990:	d001      	beq.n	8009996 <__cvt+0xa6>
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	2230      	movs	r2, #48	; 0x30
 8009998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999a:	9907      	ldr	r1, [sp, #28]
 800999c:	428b      	cmp	r3, r1
 800999e:	d306      	bcc.n	80099ae <__cvt+0xbe>
 80099a0:	0028      	movs	r0, r5
 80099a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099a6:	1b5b      	subs	r3, r3, r5
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	b00b      	add	sp, #44	; 0x2c
 80099ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ae:	1c59      	adds	r1, r3, #1
 80099b0:	9109      	str	r1, [sp, #36]	; 0x24
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	e7f0      	b.n	8009998 <__cvt+0xa8>

080099b6 <__exponent>:
 80099b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b8:	1c83      	adds	r3, r0, #2
 80099ba:	b087      	sub	sp, #28
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	0005      	movs	r5, r0
 80099c0:	000c      	movs	r4, r1
 80099c2:	232b      	movs	r3, #43	; 0x2b
 80099c4:	7002      	strb	r2, [r0, #0]
 80099c6:	2900      	cmp	r1, #0
 80099c8:	da01      	bge.n	80099ce <__exponent+0x18>
 80099ca:	424c      	negs	r4, r1
 80099cc:	3302      	adds	r3, #2
 80099ce:	706b      	strb	r3, [r5, #1]
 80099d0:	2c09      	cmp	r4, #9
 80099d2:	dd31      	ble.n	8009a38 <__exponent+0x82>
 80099d4:	270a      	movs	r7, #10
 80099d6:	ab04      	add	r3, sp, #16
 80099d8:	1dde      	adds	r6, r3, #7
 80099da:	0020      	movs	r0, r4
 80099dc:	0039      	movs	r1, r7
 80099de:	9601      	str	r6, [sp, #4]
 80099e0:	f7f6 fd1e 	bl	8000420 <__aeabi_idivmod>
 80099e4:	3e01      	subs	r6, #1
 80099e6:	3130      	adds	r1, #48	; 0x30
 80099e8:	0020      	movs	r0, r4
 80099ea:	7031      	strb	r1, [r6, #0]
 80099ec:	0039      	movs	r1, r7
 80099ee:	9402      	str	r4, [sp, #8]
 80099f0:	f7f6 fc30 	bl	8000254 <__divsi3>
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	0004      	movs	r4, r0
 80099f8:	2b63      	cmp	r3, #99	; 0x63
 80099fa:	dcee      	bgt.n	80099da <__exponent+0x24>
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	3430      	adds	r4, #48	; 0x30
 8009a00:	1e9a      	subs	r2, r3, #2
 8009a02:	0013      	movs	r3, r2
 8009a04:	9903      	ldr	r1, [sp, #12]
 8009a06:	7014      	strb	r4, [r2, #0]
 8009a08:	a804      	add	r0, sp, #16
 8009a0a:	3007      	adds	r0, #7
 8009a0c:	4298      	cmp	r0, r3
 8009a0e:	d80e      	bhi.n	8009a2e <__exponent+0x78>
 8009a10:	ab04      	add	r3, sp, #16
 8009a12:	3307      	adds	r3, #7
 8009a14:	2000      	movs	r0, #0
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d804      	bhi.n	8009a24 <__exponent+0x6e>
 8009a1a:	ab04      	add	r3, sp, #16
 8009a1c:	3009      	adds	r0, #9
 8009a1e:	18c0      	adds	r0, r0, r3
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	1ac0      	subs	r0, r0, r3
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	1818      	adds	r0, r3, r0
 8009a28:	1b40      	subs	r0, r0, r5
 8009a2a:	b007      	add	sp, #28
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2e:	7818      	ldrb	r0, [r3, #0]
 8009a30:	3301      	adds	r3, #1
 8009a32:	7008      	strb	r0, [r1, #0]
 8009a34:	3101      	adds	r1, #1
 8009a36:	e7e7      	b.n	8009a08 <__exponent+0x52>
 8009a38:	2330      	movs	r3, #48	; 0x30
 8009a3a:	18e4      	adds	r4, r4, r3
 8009a3c:	70ab      	strb	r3, [r5, #2]
 8009a3e:	1d28      	adds	r0, r5, #4
 8009a40:	70ec      	strb	r4, [r5, #3]
 8009a42:	e7f1      	b.n	8009a28 <__exponent+0x72>

08009a44 <_printf_float>:
 8009a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a46:	b095      	sub	sp, #84	; 0x54
 8009a48:	000c      	movs	r4, r1
 8009a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4c:	001e      	movs	r6, r3
 8009a4e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009a50:	0007      	movs	r7, r0
 8009a52:	f003 f9f9 	bl	800ce48 <_localeconv_r>
 8009a56:	6803      	ldr	r3, [r0, #0]
 8009a58:	0018      	movs	r0, r3
 8009a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a5c:	f7f6 fb54 	bl	8000108 <strlen>
 8009a60:	2300      	movs	r3, #0
 8009a62:	9312      	str	r3, [sp, #72]	; 0x48
 8009a64:	7e23      	ldrb	r3, [r4, #24]
 8009a66:	2207      	movs	r2, #7
 8009a68:	930a      	str	r3, [sp, #40]	; 0x28
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	900e      	str	r0, [sp, #56]	; 0x38
 8009a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	05c9      	lsls	r1, r1, #23
 8009a76:	d547      	bpl.n	8009b08 <_printf_float+0xc4>
 8009a78:	189b      	adds	r3, r3, r2
 8009a7a:	4393      	bics	r3, r2
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	3208      	adds	r2, #8
 8009a80:	602a      	str	r2, [r5, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	64a2      	str	r2, [r4, #72]	; 0x48
 8009a88:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009a8e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a92:	006b      	lsls	r3, r5, #1
 8009a94:	085b      	lsrs	r3, r3, #1
 8009a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a9a:	4ba7      	ldr	r3, [pc, #668]	; (8009d38 <_printf_float+0x2f4>)
 8009a9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a9e:	4252      	negs	r2, r2
 8009aa0:	f7f8 fe7e 	bl	80027a0 <__aeabi_dcmpun>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d131      	bne.n	8009b0c <_printf_float+0xc8>
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	4ba3      	ldr	r3, [pc, #652]	; (8009d38 <_printf_float+0x2f4>)
 8009aac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ab0:	4252      	negs	r2, r2
 8009ab2:	f7f6 fcdb 	bl	800046c <__aeabi_dcmple>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d128      	bne.n	8009b0c <_printf_float+0xc8>
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	0029      	movs	r1, r5
 8009ac0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009ac2:	f7f6 fcc9 	bl	8000458 <__aeabi_dcmplt>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d003      	beq.n	8009ad2 <_printf_float+0x8e>
 8009aca:	0023      	movs	r3, r4
 8009acc:	222d      	movs	r2, #45	; 0x2d
 8009ace:	3343      	adds	r3, #67	; 0x43
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad4:	4d99      	ldr	r5, [pc, #612]	; (8009d3c <_printf_float+0x2f8>)
 8009ad6:	2b47      	cmp	r3, #71	; 0x47
 8009ad8:	d900      	bls.n	8009adc <_printf_float+0x98>
 8009ada:	4d99      	ldr	r5, [pc, #612]	; (8009d40 <_printf_float+0x2fc>)
 8009adc:	2303      	movs	r3, #3
 8009ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	439a      	bics	r2, r3
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8009aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aee:	0021      	movs	r1, r4
 8009af0:	0038      	movs	r0, r7
 8009af2:	9600      	str	r6, [sp, #0]
 8009af4:	aa13      	add	r2, sp, #76	; 0x4c
 8009af6:	f000 f9e7 	bl	8009ec8 <_printf_common>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	d000      	beq.n	8009b00 <_printf_float+0xbc>
 8009afe:	e0a2      	b.n	8009c46 <_printf_float+0x202>
 8009b00:	2001      	movs	r0, #1
 8009b02:	4240      	negs	r0, r0
 8009b04:	b015      	add	sp, #84	; 0x54
 8009b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b08:	3307      	adds	r3, #7
 8009b0a:	e7b6      	b.n	8009a7a <_printf_float+0x36>
 8009b0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b0e:	002b      	movs	r3, r5
 8009b10:	0010      	movs	r0, r2
 8009b12:	0029      	movs	r1, r5
 8009b14:	f7f8 fe44 	bl	80027a0 <__aeabi_dcmpun>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d00b      	beq.n	8009b34 <_printf_float+0xf0>
 8009b1c:	2d00      	cmp	r5, #0
 8009b1e:	da03      	bge.n	8009b28 <_printf_float+0xe4>
 8009b20:	0023      	movs	r3, r4
 8009b22:	222d      	movs	r2, #45	; 0x2d
 8009b24:	3343      	adds	r3, #67	; 0x43
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2a:	4d86      	ldr	r5, [pc, #536]	; (8009d44 <_printf_float+0x300>)
 8009b2c:	2b47      	cmp	r3, #71	; 0x47
 8009b2e:	d9d5      	bls.n	8009adc <_printf_float+0x98>
 8009b30:	4d85      	ldr	r5, [pc, #532]	; (8009d48 <_printf_float+0x304>)
 8009b32:	e7d3      	b.n	8009adc <_printf_float+0x98>
 8009b34:	2220      	movs	r2, #32
 8009b36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b38:	6863      	ldr	r3, [r4, #4]
 8009b3a:	4391      	bics	r1, r2
 8009b3c:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	d149      	bne.n	8009bd6 <_printf_float+0x192>
 8009b42:	3307      	adds	r3, #7
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	2380      	movs	r3, #128	; 0x80
 8009b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	9206      	str	r2, [sp, #24]
 8009b52:	aa12      	add	r2, sp, #72	; 0x48
 8009b54:	9205      	str	r2, [sp, #20]
 8009b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b58:	a908      	add	r1, sp, #32
 8009b5a:	9204      	str	r2, [sp, #16]
 8009b5c:	aa11      	add	r2, sp, #68	; 0x44
 8009b5e:	9203      	str	r2, [sp, #12]
 8009b60:	2223      	movs	r2, #35	; 0x23
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	1852      	adds	r2, r2, r1
 8009b6a:	9202      	str	r2, [sp, #8]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	0038      	movs	r0, r7
 8009b70:	002b      	movs	r3, r5
 8009b72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b74:	f7ff febc 	bl	80098f0 <__cvt>
 8009b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b7a:	0005      	movs	r5, r0
 8009b7c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b7e:	2b47      	cmp	r3, #71	; 0x47
 8009b80:	d108      	bne.n	8009b94 <_printf_float+0x150>
 8009b82:	1ccb      	adds	r3, r1, #3
 8009b84:	db02      	blt.n	8009b8c <_printf_float+0x148>
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	dd48      	ble.n	8009c1e <_printf_float+0x1da>
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8e:	3b02      	subs	r3, #2
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	930a      	str	r3, [sp, #40]	; 0x28
 8009b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b96:	2b65      	cmp	r3, #101	; 0x65
 8009b98:	d824      	bhi.n	8009be4 <_printf_float+0x1a0>
 8009b9a:	0020      	movs	r0, r4
 8009b9c:	001a      	movs	r2, r3
 8009b9e:	3901      	subs	r1, #1
 8009ba0:	3050      	adds	r0, #80	; 0x50
 8009ba2:	9111      	str	r1, [sp, #68]	; 0x44
 8009ba4:	f7ff ff07 	bl	80099b6 <__exponent>
 8009ba8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009baa:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bac:	1813      	adds	r3, r2, r0
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	2a01      	cmp	r2, #1
 8009bb2:	dc02      	bgt.n	8009bba <_printf_float+0x176>
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	07d2      	lsls	r2, r2, #31
 8009bb8:	d501      	bpl.n	8009bbe <_printf_float+0x17a>
 8009bba:	3301      	adds	r3, #1
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	2323      	movs	r3, #35	; 0x23
 8009bc0:	aa08      	add	r2, sp, #32
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d100      	bne.n	8009bcc <_printf_float+0x188>
 8009bca:	e78f      	b.n	8009aec <_printf_float+0xa8>
 8009bcc:	0023      	movs	r3, r4
 8009bce:	222d      	movs	r2, #45	; 0x2d
 8009bd0:	3343      	adds	r3, #67	; 0x43
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	e78a      	b.n	8009aec <_printf_float+0xa8>
 8009bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bd8:	2a47      	cmp	r2, #71	; 0x47
 8009bda:	d1b4      	bne.n	8009b46 <_printf_float+0x102>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1b2      	bne.n	8009b46 <_printf_float+0x102>
 8009be0:	3301      	adds	r3, #1
 8009be2:	e7af      	b.n	8009b44 <_printf_float+0x100>
 8009be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009be6:	2b66      	cmp	r3, #102	; 0x66
 8009be8:	d11b      	bne.n	8009c22 <_printf_float+0x1de>
 8009bea:	6863      	ldr	r3, [r4, #4]
 8009bec:	2900      	cmp	r1, #0
 8009bee:	dd0d      	ble.n	8009c0c <_printf_float+0x1c8>
 8009bf0:	6121      	str	r1, [r4, #16]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d102      	bne.n	8009bfc <_printf_float+0x1b8>
 8009bf6:	6822      	ldr	r2, [r4, #0]
 8009bf8:	07d2      	lsls	r2, r2, #31
 8009bfa:	d502      	bpl.n	8009c02 <_printf_float+0x1be>
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	1859      	adds	r1, r3, r1
 8009c00:	6121      	str	r1, [r4, #16]
 8009c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c04:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c06:	2300      	movs	r3, #0
 8009c08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c0a:	e7d8      	b.n	8009bbe <_printf_float+0x17a>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d103      	bne.n	8009c18 <_printf_float+0x1d4>
 8009c10:	2201      	movs	r2, #1
 8009c12:	6821      	ldr	r1, [r4, #0]
 8009c14:	4211      	tst	r1, r2
 8009c16:	d000      	beq.n	8009c1a <_printf_float+0x1d6>
 8009c18:	1c9a      	adds	r2, r3, #2
 8009c1a:	6122      	str	r2, [r4, #16]
 8009c1c:	e7f1      	b.n	8009c02 <_printf_float+0x1be>
 8009c1e:	2367      	movs	r3, #103	; 0x67
 8009c20:	930a      	str	r3, [sp, #40]	; 0x28
 8009c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c26:	4293      	cmp	r3, r2
 8009c28:	db06      	blt.n	8009c38 <_printf_float+0x1f4>
 8009c2a:	6822      	ldr	r2, [r4, #0]
 8009c2c:	6123      	str	r3, [r4, #16]
 8009c2e:	07d2      	lsls	r2, r2, #31
 8009c30:	d5e7      	bpl.n	8009c02 <_printf_float+0x1be>
 8009c32:	3301      	adds	r3, #1
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	e7e4      	b.n	8009c02 <_printf_float+0x1be>
 8009c38:	2101      	movs	r1, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dc01      	bgt.n	8009c42 <_printf_float+0x1fe>
 8009c3e:	1849      	adds	r1, r1, r1
 8009c40:	1ac9      	subs	r1, r1, r3
 8009c42:	1852      	adds	r2, r2, r1
 8009c44:	e7e9      	b.n	8009c1a <_printf_float+0x1d6>
 8009c46:	6822      	ldr	r2, [r4, #0]
 8009c48:	0553      	lsls	r3, r2, #21
 8009c4a:	d407      	bmi.n	8009c5c <_printf_float+0x218>
 8009c4c:	6923      	ldr	r3, [r4, #16]
 8009c4e:	002a      	movs	r2, r5
 8009c50:	0038      	movs	r0, r7
 8009c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c54:	47b0      	blx	r6
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d128      	bne.n	8009cac <_printf_float+0x268>
 8009c5a:	e751      	b.n	8009b00 <_printf_float+0xbc>
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5e:	2b65      	cmp	r3, #101	; 0x65
 8009c60:	d800      	bhi.n	8009c64 <_printf_float+0x220>
 8009c62:	e0e1      	b.n	8009e28 <_printf_float+0x3e4>
 8009c64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009c66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f7f6 fbee 	bl	800044c <__aeabi_dcmpeq>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d031      	beq.n	8009cd8 <_printf_float+0x294>
 8009c74:	2301      	movs	r3, #1
 8009c76:	0038      	movs	r0, r7
 8009c78:	4a34      	ldr	r2, [pc, #208]	; (8009d4c <_printf_float+0x308>)
 8009c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c7c:	47b0      	blx	r6
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d100      	bne.n	8009c84 <_printf_float+0x240>
 8009c82:	e73d      	b.n	8009b00 <_printf_float+0xbc>
 8009c84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	db02      	blt.n	8009c92 <_printf_float+0x24e>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	07db      	lsls	r3, r3, #31
 8009c90:	d50c      	bpl.n	8009cac <_printf_float+0x268>
 8009c92:	0038      	movs	r0, r7
 8009c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c9a:	47b0      	blx	r6
 8009c9c:	2500      	movs	r5, #0
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	d100      	bne.n	8009ca4 <_printf_float+0x260>
 8009ca2:	e72d      	b.n	8009b00 <_printf_float+0xbc>
 8009ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	42ab      	cmp	r3, r5
 8009caa:	dc0a      	bgt.n	8009cc2 <_printf_float+0x27e>
 8009cac:	6823      	ldr	r3, [r4, #0]
 8009cae:	079b      	lsls	r3, r3, #30
 8009cb0:	d500      	bpl.n	8009cb4 <_printf_float+0x270>
 8009cb2:	e106      	b.n	8009ec2 <_printf_float+0x47e>
 8009cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cb6:	68e0      	ldr	r0, [r4, #12]
 8009cb8:	4298      	cmp	r0, r3
 8009cba:	db00      	blt.n	8009cbe <_printf_float+0x27a>
 8009cbc:	e722      	b.n	8009b04 <_printf_float+0xc0>
 8009cbe:	0018      	movs	r0, r3
 8009cc0:	e720      	b.n	8009b04 <_printf_float+0xc0>
 8009cc2:	0022      	movs	r2, r4
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	0038      	movs	r0, r7
 8009cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cca:	321a      	adds	r2, #26
 8009ccc:	47b0      	blx	r6
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d100      	bne.n	8009cd4 <_printf_float+0x290>
 8009cd2:	e715      	b.n	8009b00 <_printf_float+0xbc>
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	e7e5      	b.n	8009ca4 <_printf_float+0x260>
 8009cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dc38      	bgt.n	8009d50 <_printf_float+0x30c>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	0038      	movs	r0, r7
 8009ce2:	4a1a      	ldr	r2, [pc, #104]	; (8009d4c <_printf_float+0x308>)
 8009ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ce6:	47b0      	blx	r6
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d100      	bne.n	8009cee <_printf_float+0x2aa>
 8009cec:	e708      	b.n	8009b00 <_printf_float+0xbc>
 8009cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	d102      	bne.n	8009cfc <_printf_float+0x2b8>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	07db      	lsls	r3, r3, #31
 8009cfa:	d5d7      	bpl.n	8009cac <_printf_float+0x268>
 8009cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cfe:	0038      	movs	r0, r7
 8009d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d04:	47b0      	blx	r6
 8009d06:	1c43      	adds	r3, r0, #1
 8009d08:	d100      	bne.n	8009d0c <_printf_float+0x2c8>
 8009d0a:	e6f9      	b.n	8009b00 <_printf_float+0xbc>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d14:	425b      	negs	r3, r3
 8009d16:	4293      	cmp	r3, r2
 8009d18:	dc01      	bgt.n	8009d1e <_printf_float+0x2da>
 8009d1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d1c:	e797      	b.n	8009c4e <_printf_float+0x20a>
 8009d1e:	0022      	movs	r2, r4
 8009d20:	2301      	movs	r3, #1
 8009d22:	0038      	movs	r0, r7
 8009d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d26:	321a      	adds	r2, #26
 8009d28:	47b0      	blx	r6
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d100      	bne.n	8009d30 <_printf_float+0x2ec>
 8009d2e:	e6e7      	b.n	8009b00 <_printf_float+0xbc>
 8009d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d32:	3301      	adds	r3, #1
 8009d34:	e7eb      	b.n	8009d0e <_printf_float+0x2ca>
 8009d36:	46c0      	nop			; (mov r8, r8)
 8009d38:	7fefffff 	.word	0x7fefffff
 8009d3c:	0800e69c 	.word	0x0800e69c
 8009d40:	0800e6a0 	.word	0x0800e6a0
 8009d44:	0800e6a4 	.word	0x0800e6a4
 8009d48:	0800e6a8 	.word	0x0800e6a8
 8009d4c:	0800e6ac 	.word	0x0800e6ac
 8009d50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d54:	920a      	str	r2, [sp, #40]	; 0x28
 8009d56:	429a      	cmp	r2, r3
 8009d58:	dd00      	ble.n	8009d5c <_printf_float+0x318>
 8009d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dc3c      	bgt.n	8009ddc <_printf_float+0x398>
 8009d62:	2300      	movs	r3, #0
 8009d64:	930d      	str	r3, [sp, #52]	; 0x34
 8009d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	17db      	asrs	r3, r3, #31
 8009d6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d76:	4013      	ands	r3, r2
 8009d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	dc34      	bgt.n	8009dec <_printf_float+0x3a8>
 8009d82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d86:	4293      	cmp	r3, r2
 8009d88:	db3d      	blt.n	8009e06 <_printf_float+0x3c2>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	07db      	lsls	r3, r3, #31
 8009d8e:	d43a      	bmi.n	8009e06 <_printf_float+0x3c2>
 8009d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	1a52      	subs	r2, r2, r1
 8009d9a:	920a      	str	r2, [sp, #40]	; 0x28
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	dd00      	ble.n	8009da2 <_printf_float+0x35e>
 8009da0:	930a      	str	r3, [sp, #40]	; 0x28
 8009da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dc36      	bgt.n	8009e16 <_printf_float+0x3d2>
 8009da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009daa:	2500      	movs	r5, #0
 8009dac:	43db      	mvns	r3, r3
 8009dae:	17db      	asrs	r3, r3, #31
 8009db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009db2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009db8:	1a9b      	subs	r3, r3, r2
 8009dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dbc:	400a      	ands	r2, r1
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dc00      	bgt.n	8009dc6 <_printf_float+0x382>
 8009dc4:	e772      	b.n	8009cac <_printf_float+0x268>
 8009dc6:	0022      	movs	r2, r4
 8009dc8:	2301      	movs	r3, #1
 8009dca:	0038      	movs	r0, r7
 8009dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dce:	321a      	adds	r2, #26
 8009dd0:	47b0      	blx	r6
 8009dd2:	1c43      	adds	r3, r0, #1
 8009dd4:	d100      	bne.n	8009dd8 <_printf_float+0x394>
 8009dd6:	e693      	b.n	8009b00 <_printf_float+0xbc>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	e7ea      	b.n	8009db2 <_printf_float+0x36e>
 8009ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dde:	002a      	movs	r2, r5
 8009de0:	0038      	movs	r0, r7
 8009de2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de4:	47b0      	blx	r6
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	d1bb      	bne.n	8009d62 <_printf_float+0x31e>
 8009dea:	e689      	b.n	8009b00 <_printf_float+0xbc>
 8009dec:	0022      	movs	r2, r4
 8009dee:	2301      	movs	r3, #1
 8009df0:	0038      	movs	r0, r7
 8009df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009df4:	321a      	adds	r2, #26
 8009df6:	47b0      	blx	r6
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	d100      	bne.n	8009dfe <_printf_float+0x3ba>
 8009dfc:	e680      	b.n	8009b00 <_printf_float+0xbc>
 8009dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e00:	3301      	adds	r3, #1
 8009e02:	930d      	str	r3, [sp, #52]	; 0x34
 8009e04:	e7b3      	b.n	8009d6e <_printf_float+0x32a>
 8009e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e08:	0038      	movs	r0, r7
 8009e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e0e:	47b0      	blx	r6
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d1bd      	bne.n	8009d90 <_printf_float+0x34c>
 8009e14:	e674      	b.n	8009b00 <_printf_float+0xbc>
 8009e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e18:	0038      	movs	r0, r7
 8009e1a:	18ea      	adds	r2, r5, r3
 8009e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e20:	47b0      	blx	r6
 8009e22:	1c43      	adds	r3, r0, #1
 8009e24:	d1c0      	bne.n	8009da8 <_printf_float+0x364>
 8009e26:	e66b      	b.n	8009b00 <_printf_float+0xbc>
 8009e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	dc02      	bgt.n	8009e34 <_printf_float+0x3f0>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	421a      	tst	r2, r3
 8009e32:	d034      	beq.n	8009e9e <_printf_float+0x45a>
 8009e34:	2301      	movs	r3, #1
 8009e36:	002a      	movs	r2, r5
 8009e38:	0038      	movs	r0, r7
 8009e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e3c:	47b0      	blx	r6
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d100      	bne.n	8009e44 <_printf_float+0x400>
 8009e42:	e65d      	b.n	8009b00 <_printf_float+0xbc>
 8009e44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e46:	0038      	movs	r0, r7
 8009e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e4c:	47b0      	blx	r6
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	d100      	bne.n	8009e54 <_printf_float+0x410>
 8009e52:	e655      	b.n	8009b00 <_printf_float+0xbc>
 8009e54:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009e56:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f7f6 faf6 	bl	800044c <__aeabi_dcmpeq>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d11a      	bne.n	8009e9a <_printf_float+0x456>
 8009e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e66:	1c6a      	adds	r2, r5, #1
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	0038      	movs	r0, r7
 8009e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e6e:	47b0      	blx	r6
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d10e      	bne.n	8009e92 <_printf_float+0x44e>
 8009e74:	e644      	b.n	8009b00 <_printf_float+0xbc>
 8009e76:	0022      	movs	r2, r4
 8009e78:	2301      	movs	r3, #1
 8009e7a:	0038      	movs	r0, r7
 8009e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e7e:	321a      	adds	r2, #26
 8009e80:	47b0      	blx	r6
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d100      	bne.n	8009e88 <_printf_float+0x444>
 8009e86:	e63b      	b.n	8009b00 <_printf_float+0xbc>
 8009e88:	3501      	adds	r5, #1
 8009e8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	42ab      	cmp	r3, r5
 8009e90:	dcf1      	bgt.n	8009e76 <_printf_float+0x432>
 8009e92:	0022      	movs	r2, r4
 8009e94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e96:	3250      	adds	r2, #80	; 0x50
 8009e98:	e6da      	b.n	8009c50 <_printf_float+0x20c>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	e7f5      	b.n	8009e8a <_printf_float+0x446>
 8009e9e:	002a      	movs	r2, r5
 8009ea0:	e7e3      	b.n	8009e6a <_printf_float+0x426>
 8009ea2:	0022      	movs	r2, r4
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	0038      	movs	r0, r7
 8009ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009eaa:	3219      	adds	r2, #25
 8009eac:	47b0      	blx	r6
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d100      	bne.n	8009eb4 <_printf_float+0x470>
 8009eb2:	e625      	b.n	8009b00 <_printf_float+0xbc>
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	68e3      	ldr	r3, [r4, #12]
 8009eb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	42ab      	cmp	r3, r5
 8009ebe:	dcf0      	bgt.n	8009ea2 <_printf_float+0x45e>
 8009ec0:	e6f8      	b.n	8009cb4 <_printf_float+0x270>
 8009ec2:	2500      	movs	r5, #0
 8009ec4:	e7f7      	b.n	8009eb6 <_printf_float+0x472>
 8009ec6:	46c0      	nop			; (mov r8, r8)

08009ec8 <_printf_common>:
 8009ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eca:	0015      	movs	r5, r2
 8009ecc:	9301      	str	r3, [sp, #4]
 8009ece:	688a      	ldr	r2, [r1, #8]
 8009ed0:	690b      	ldr	r3, [r1, #16]
 8009ed2:	000c      	movs	r4, r1
 8009ed4:	9000      	str	r0, [sp, #0]
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	da00      	bge.n	8009edc <_printf_common+0x14>
 8009eda:	0013      	movs	r3, r2
 8009edc:	0022      	movs	r2, r4
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	3243      	adds	r2, #67	; 0x43
 8009ee2:	7812      	ldrb	r2, [r2, #0]
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	d001      	beq.n	8009eec <_printf_common+0x24>
 8009ee8:	3301      	adds	r3, #1
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	069b      	lsls	r3, r3, #26
 8009ef0:	d502      	bpl.n	8009ef8 <_printf_common+0x30>
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	3302      	adds	r3, #2
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	2306      	movs	r3, #6
 8009efc:	0017      	movs	r7, r2
 8009efe:	401f      	ands	r7, r3
 8009f00:	421a      	tst	r2, r3
 8009f02:	d027      	beq.n	8009f54 <_printf_common+0x8c>
 8009f04:	0023      	movs	r3, r4
 8009f06:	3343      	adds	r3, #67	; 0x43
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	1e5a      	subs	r2, r3, #1
 8009f0c:	4193      	sbcs	r3, r2
 8009f0e:	6822      	ldr	r2, [r4, #0]
 8009f10:	0692      	lsls	r2, r2, #26
 8009f12:	d430      	bmi.n	8009f76 <_printf_common+0xae>
 8009f14:	0022      	movs	r2, r4
 8009f16:	9901      	ldr	r1, [sp, #4]
 8009f18:	9800      	ldr	r0, [sp, #0]
 8009f1a:	9e08      	ldr	r6, [sp, #32]
 8009f1c:	3243      	adds	r2, #67	; 0x43
 8009f1e:	47b0      	blx	r6
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d025      	beq.n	8009f70 <_printf_common+0xa8>
 8009f24:	2306      	movs	r3, #6
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	682a      	ldr	r2, [r5, #0]
 8009f2a:	68e1      	ldr	r1, [r4, #12]
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	4003      	ands	r3, r0
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d103      	bne.n	8009f3c <_printf_common+0x74>
 8009f34:	1a8d      	subs	r5, r1, r2
 8009f36:	43eb      	mvns	r3, r5
 8009f38:	17db      	asrs	r3, r3, #31
 8009f3a:	401d      	ands	r5, r3
 8009f3c:	68a3      	ldr	r3, [r4, #8]
 8009f3e:	6922      	ldr	r2, [r4, #16]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	dd01      	ble.n	8009f48 <_printf_common+0x80>
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	18ed      	adds	r5, r5, r3
 8009f48:	2700      	movs	r7, #0
 8009f4a:	42bd      	cmp	r5, r7
 8009f4c:	d120      	bne.n	8009f90 <_printf_common+0xc8>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e010      	b.n	8009f74 <_printf_common+0xac>
 8009f52:	3701      	adds	r7, #1
 8009f54:	68e3      	ldr	r3, [r4, #12]
 8009f56:	682a      	ldr	r2, [r5, #0]
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	42bb      	cmp	r3, r7
 8009f5c:	ddd2      	ble.n	8009f04 <_printf_common+0x3c>
 8009f5e:	0022      	movs	r2, r4
 8009f60:	2301      	movs	r3, #1
 8009f62:	9901      	ldr	r1, [sp, #4]
 8009f64:	9800      	ldr	r0, [sp, #0]
 8009f66:	9e08      	ldr	r6, [sp, #32]
 8009f68:	3219      	adds	r2, #25
 8009f6a:	47b0      	blx	r6
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d1f0      	bne.n	8009f52 <_printf_common+0x8a>
 8009f70:	2001      	movs	r0, #1
 8009f72:	4240      	negs	r0, r0
 8009f74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f76:	2030      	movs	r0, #48	; 0x30
 8009f78:	18e1      	adds	r1, r4, r3
 8009f7a:	3143      	adds	r1, #67	; 0x43
 8009f7c:	7008      	strb	r0, [r1, #0]
 8009f7e:	0021      	movs	r1, r4
 8009f80:	1c5a      	adds	r2, r3, #1
 8009f82:	3145      	adds	r1, #69	; 0x45
 8009f84:	7809      	ldrb	r1, [r1, #0]
 8009f86:	18a2      	adds	r2, r4, r2
 8009f88:	3243      	adds	r2, #67	; 0x43
 8009f8a:	3302      	adds	r3, #2
 8009f8c:	7011      	strb	r1, [r2, #0]
 8009f8e:	e7c1      	b.n	8009f14 <_printf_common+0x4c>
 8009f90:	0022      	movs	r2, r4
 8009f92:	2301      	movs	r3, #1
 8009f94:	9901      	ldr	r1, [sp, #4]
 8009f96:	9800      	ldr	r0, [sp, #0]
 8009f98:	9e08      	ldr	r6, [sp, #32]
 8009f9a:	321a      	adds	r2, #26
 8009f9c:	47b0      	blx	r6
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	d0e6      	beq.n	8009f70 <_printf_common+0xa8>
 8009fa2:	3701      	adds	r7, #1
 8009fa4:	e7d1      	b.n	8009f4a <_printf_common+0x82>
	...

08009fa8 <_printf_i>:
 8009fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009faa:	b08b      	sub	sp, #44	; 0x2c
 8009fac:	9206      	str	r2, [sp, #24]
 8009fae:	000a      	movs	r2, r1
 8009fb0:	3243      	adds	r2, #67	; 0x43
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	9005      	str	r0, [sp, #20]
 8009fb6:	9204      	str	r2, [sp, #16]
 8009fb8:	7e0a      	ldrb	r2, [r1, #24]
 8009fba:	000c      	movs	r4, r1
 8009fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fbe:	2a78      	cmp	r2, #120	; 0x78
 8009fc0:	d807      	bhi.n	8009fd2 <_printf_i+0x2a>
 8009fc2:	2a62      	cmp	r2, #98	; 0x62
 8009fc4:	d809      	bhi.n	8009fda <_printf_i+0x32>
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d100      	bne.n	8009fcc <_printf_i+0x24>
 8009fca:	e0c1      	b.n	800a150 <_printf_i+0x1a8>
 8009fcc:	2a58      	cmp	r2, #88	; 0x58
 8009fce:	d100      	bne.n	8009fd2 <_printf_i+0x2a>
 8009fd0:	e08c      	b.n	800a0ec <_printf_i+0x144>
 8009fd2:	0026      	movs	r6, r4
 8009fd4:	3642      	adds	r6, #66	; 0x42
 8009fd6:	7032      	strb	r2, [r6, #0]
 8009fd8:	e022      	b.n	800a020 <_printf_i+0x78>
 8009fda:	0010      	movs	r0, r2
 8009fdc:	3863      	subs	r0, #99	; 0x63
 8009fde:	2815      	cmp	r0, #21
 8009fe0:	d8f7      	bhi.n	8009fd2 <_printf_i+0x2a>
 8009fe2:	f7f6 f8a3 	bl	800012c <__gnu_thumb1_case_shi>
 8009fe6:	0016      	.short	0x0016
 8009fe8:	fff6001f 	.word	0xfff6001f
 8009fec:	fff6fff6 	.word	0xfff6fff6
 8009ff0:	001ffff6 	.word	0x001ffff6
 8009ff4:	fff6fff6 	.word	0xfff6fff6
 8009ff8:	fff6fff6 	.word	0xfff6fff6
 8009ffc:	003600a8 	.word	0x003600a8
 800a000:	fff6009a 	.word	0xfff6009a
 800a004:	00b9fff6 	.word	0x00b9fff6
 800a008:	0036fff6 	.word	0x0036fff6
 800a00c:	fff6fff6 	.word	0xfff6fff6
 800a010:	009e      	.short	0x009e
 800a012:	0026      	movs	r6, r4
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	3642      	adds	r6, #66	; 0x42
 800a018:	1d11      	adds	r1, r2, #4
 800a01a:	6019      	str	r1, [r3, #0]
 800a01c:	6813      	ldr	r3, [r2, #0]
 800a01e:	7033      	strb	r3, [r6, #0]
 800a020:	2301      	movs	r3, #1
 800a022:	e0a7      	b.n	800a174 <_printf_i+0x1cc>
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	6819      	ldr	r1, [r3, #0]
 800a028:	1d0a      	adds	r2, r1, #4
 800a02a:	0605      	lsls	r5, r0, #24
 800a02c:	d50b      	bpl.n	800a046 <_printf_i+0x9e>
 800a02e:	680d      	ldr	r5, [r1, #0]
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	2d00      	cmp	r5, #0
 800a034:	da03      	bge.n	800a03e <_printf_i+0x96>
 800a036:	232d      	movs	r3, #45	; 0x2d
 800a038:	9a04      	ldr	r2, [sp, #16]
 800a03a:	426d      	negs	r5, r5
 800a03c:	7013      	strb	r3, [r2, #0]
 800a03e:	4b61      	ldr	r3, [pc, #388]	; (800a1c4 <_printf_i+0x21c>)
 800a040:	270a      	movs	r7, #10
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	e01b      	b.n	800a07e <_printf_i+0xd6>
 800a046:	680d      	ldr	r5, [r1, #0]
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	0641      	lsls	r1, r0, #25
 800a04c:	d5f1      	bpl.n	800a032 <_printf_i+0x8a>
 800a04e:	b22d      	sxth	r5, r5
 800a050:	e7ef      	b.n	800a032 <_printf_i+0x8a>
 800a052:	680d      	ldr	r5, [r1, #0]
 800a054:	6819      	ldr	r1, [r3, #0]
 800a056:	1d08      	adds	r0, r1, #4
 800a058:	6018      	str	r0, [r3, #0]
 800a05a:	062e      	lsls	r6, r5, #24
 800a05c:	d501      	bpl.n	800a062 <_printf_i+0xba>
 800a05e:	680d      	ldr	r5, [r1, #0]
 800a060:	e003      	b.n	800a06a <_printf_i+0xc2>
 800a062:	066d      	lsls	r5, r5, #25
 800a064:	d5fb      	bpl.n	800a05e <_printf_i+0xb6>
 800a066:	680d      	ldr	r5, [r1, #0]
 800a068:	b2ad      	uxth	r5, r5
 800a06a:	4b56      	ldr	r3, [pc, #344]	; (800a1c4 <_printf_i+0x21c>)
 800a06c:	2708      	movs	r7, #8
 800a06e:	9303      	str	r3, [sp, #12]
 800a070:	2a6f      	cmp	r2, #111	; 0x6f
 800a072:	d000      	beq.n	800a076 <_printf_i+0xce>
 800a074:	3702      	adds	r7, #2
 800a076:	0023      	movs	r3, r4
 800a078:	2200      	movs	r2, #0
 800a07a:	3343      	adds	r3, #67	; 0x43
 800a07c:	701a      	strb	r2, [r3, #0]
 800a07e:	6863      	ldr	r3, [r4, #4]
 800a080:	60a3      	str	r3, [r4, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	db03      	blt.n	800a08e <_printf_i+0xe6>
 800a086:	2204      	movs	r2, #4
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	4391      	bics	r1, r2
 800a08c:	6021      	str	r1, [r4, #0]
 800a08e:	2d00      	cmp	r5, #0
 800a090:	d102      	bne.n	800a098 <_printf_i+0xf0>
 800a092:	9e04      	ldr	r6, [sp, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00c      	beq.n	800a0b2 <_printf_i+0x10a>
 800a098:	9e04      	ldr	r6, [sp, #16]
 800a09a:	0028      	movs	r0, r5
 800a09c:	0039      	movs	r1, r7
 800a09e:	f7f6 f8d5 	bl	800024c <__aeabi_uidivmod>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	3e01      	subs	r6, #1
 800a0a6:	5c5b      	ldrb	r3, [r3, r1]
 800a0a8:	7033      	strb	r3, [r6, #0]
 800a0aa:	002b      	movs	r3, r5
 800a0ac:	0005      	movs	r5, r0
 800a0ae:	429f      	cmp	r7, r3
 800a0b0:	d9f3      	bls.n	800a09a <_printf_i+0xf2>
 800a0b2:	2f08      	cmp	r7, #8
 800a0b4:	d109      	bne.n	800a0ca <_printf_i+0x122>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	07db      	lsls	r3, r3, #31
 800a0ba:	d506      	bpl.n	800a0ca <_printf_i+0x122>
 800a0bc:	6863      	ldr	r3, [r4, #4]
 800a0be:	6922      	ldr	r2, [r4, #16]
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	dc02      	bgt.n	800a0ca <_printf_i+0x122>
 800a0c4:	2330      	movs	r3, #48	; 0x30
 800a0c6:	3e01      	subs	r6, #1
 800a0c8:	7033      	strb	r3, [r6, #0]
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	1b9b      	subs	r3, r3, r6
 800a0ce:	6123      	str	r3, [r4, #16]
 800a0d0:	9b07      	ldr	r3, [sp, #28]
 800a0d2:	0021      	movs	r1, r4
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	9805      	ldr	r0, [sp, #20]
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	aa09      	add	r2, sp, #36	; 0x24
 800a0dc:	f7ff fef4 	bl	8009ec8 <_printf_common>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d14c      	bne.n	800a17e <_printf_i+0x1d6>
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	4240      	negs	r0, r0
 800a0e8:	b00b      	add	sp, #44	; 0x2c
 800a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ec:	3145      	adds	r1, #69	; 0x45
 800a0ee:	700a      	strb	r2, [r1, #0]
 800a0f0:	4a34      	ldr	r2, [pc, #208]	; (800a1c4 <_printf_i+0x21c>)
 800a0f2:	9203      	str	r2, [sp, #12]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	6821      	ldr	r1, [r4, #0]
 800a0f8:	ca20      	ldmia	r2!, {r5}
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	0608      	lsls	r0, r1, #24
 800a0fe:	d516      	bpl.n	800a12e <_printf_i+0x186>
 800a100:	07cb      	lsls	r3, r1, #31
 800a102:	d502      	bpl.n	800a10a <_printf_i+0x162>
 800a104:	2320      	movs	r3, #32
 800a106:	4319      	orrs	r1, r3
 800a108:	6021      	str	r1, [r4, #0]
 800a10a:	2710      	movs	r7, #16
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	d1b2      	bne.n	800a076 <_printf_i+0xce>
 800a110:	2320      	movs	r3, #32
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	439a      	bics	r2, r3
 800a116:	6022      	str	r2, [r4, #0]
 800a118:	e7ad      	b.n	800a076 <_printf_i+0xce>
 800a11a:	2220      	movs	r2, #32
 800a11c:	6809      	ldr	r1, [r1, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	0022      	movs	r2, r4
 800a124:	2178      	movs	r1, #120	; 0x78
 800a126:	3245      	adds	r2, #69	; 0x45
 800a128:	7011      	strb	r1, [r2, #0]
 800a12a:	4a27      	ldr	r2, [pc, #156]	; (800a1c8 <_printf_i+0x220>)
 800a12c:	e7e1      	b.n	800a0f2 <_printf_i+0x14a>
 800a12e:	0648      	lsls	r0, r1, #25
 800a130:	d5e6      	bpl.n	800a100 <_printf_i+0x158>
 800a132:	b2ad      	uxth	r5, r5
 800a134:	e7e4      	b.n	800a100 <_printf_i+0x158>
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	680d      	ldr	r5, [r1, #0]
 800a13a:	1d10      	adds	r0, r2, #4
 800a13c:	6949      	ldr	r1, [r1, #20]
 800a13e:	6018      	str	r0, [r3, #0]
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	062e      	lsls	r6, r5, #24
 800a144:	d501      	bpl.n	800a14a <_printf_i+0x1a2>
 800a146:	6019      	str	r1, [r3, #0]
 800a148:	e002      	b.n	800a150 <_printf_i+0x1a8>
 800a14a:	066d      	lsls	r5, r5, #25
 800a14c:	d5fb      	bpl.n	800a146 <_printf_i+0x19e>
 800a14e:	8019      	strh	r1, [r3, #0]
 800a150:	2300      	movs	r3, #0
 800a152:	9e04      	ldr	r6, [sp, #16]
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	e7bb      	b.n	800a0d0 <_printf_i+0x128>
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	1d11      	adds	r1, r2, #4
 800a15c:	6019      	str	r1, [r3, #0]
 800a15e:	6816      	ldr	r6, [r2, #0]
 800a160:	2100      	movs	r1, #0
 800a162:	0030      	movs	r0, r6
 800a164:	6862      	ldr	r2, [r4, #4]
 800a166:	f002 feff 	bl	800cf68 <memchr>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d001      	beq.n	800a172 <_printf_i+0x1ca>
 800a16e:	1b80      	subs	r0, r0, r6
 800a170:	6060      	str	r0, [r4, #4]
 800a172:	6863      	ldr	r3, [r4, #4]
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	2300      	movs	r3, #0
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	7013      	strb	r3, [r2, #0]
 800a17c:	e7a8      	b.n	800a0d0 <_printf_i+0x128>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	0032      	movs	r2, r6
 800a182:	9906      	ldr	r1, [sp, #24]
 800a184:	9805      	ldr	r0, [sp, #20]
 800a186:	9d07      	ldr	r5, [sp, #28]
 800a188:	47a8      	blx	r5
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	d0aa      	beq.n	800a0e4 <_printf_i+0x13c>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	079b      	lsls	r3, r3, #30
 800a192:	d415      	bmi.n	800a1c0 <_printf_i+0x218>
 800a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a196:	68e0      	ldr	r0, [r4, #12]
 800a198:	4298      	cmp	r0, r3
 800a19a:	daa5      	bge.n	800a0e8 <_printf_i+0x140>
 800a19c:	0018      	movs	r0, r3
 800a19e:	e7a3      	b.n	800a0e8 <_printf_i+0x140>
 800a1a0:	0022      	movs	r2, r4
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	9906      	ldr	r1, [sp, #24]
 800a1a6:	9805      	ldr	r0, [sp, #20]
 800a1a8:	9e07      	ldr	r6, [sp, #28]
 800a1aa:	3219      	adds	r2, #25
 800a1ac:	47b0      	blx	r6
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d098      	beq.n	800a0e4 <_printf_i+0x13c>
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	68e3      	ldr	r3, [r4, #12]
 800a1b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	42ab      	cmp	r3, r5
 800a1bc:	dcf0      	bgt.n	800a1a0 <_printf_i+0x1f8>
 800a1be:	e7e9      	b.n	800a194 <_printf_i+0x1ec>
 800a1c0:	2500      	movs	r5, #0
 800a1c2:	e7f7      	b.n	800a1b4 <_printf_i+0x20c>
 800a1c4:	0800e6ae 	.word	0x0800e6ae
 800a1c8:	0800e6bf 	.word	0x0800e6bf

0800a1cc <_scanf_float>:
 800a1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ce:	b08b      	sub	sp, #44	; 0x2c
 800a1d0:	0015      	movs	r5, r2
 800a1d2:	9001      	str	r0, [sp, #4]
 800a1d4:	22ae      	movs	r2, #174	; 0xae
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	9306      	str	r3, [sp, #24]
 800a1da:	688b      	ldr	r3, [r1, #8]
 800a1dc:	000e      	movs	r6, r1
 800a1de:	1e59      	subs	r1, r3, #1
 800a1e0:	0052      	lsls	r2, r2, #1
 800a1e2:	9005      	str	r0, [sp, #20]
 800a1e4:	4291      	cmp	r1, r2
 800a1e6:	d905      	bls.n	800a1f4 <_scanf_float+0x28>
 800a1e8:	3b5e      	subs	r3, #94	; 0x5e
 800a1ea:	3bff      	subs	r3, #255	; 0xff
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	235e      	movs	r3, #94	; 0x5e
 800a1f0:	33ff      	adds	r3, #255	; 0xff
 800a1f2:	60b3      	str	r3, [r6, #8]
 800a1f4:	23f0      	movs	r3, #240	; 0xf0
 800a1f6:	6832      	ldr	r2, [r6, #0]
 800a1f8:	00db      	lsls	r3, r3, #3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	0033      	movs	r3, r6
 800a200:	2400      	movs	r4, #0
 800a202:	331c      	adds	r3, #28
 800a204:	001f      	movs	r7, r3
 800a206:	9303      	str	r3, [sp, #12]
 800a208:	9402      	str	r4, [sp, #8]
 800a20a:	9408      	str	r4, [sp, #32]
 800a20c:	9407      	str	r4, [sp, #28]
 800a20e:	9400      	str	r4, [sp, #0]
 800a210:	9404      	str	r4, [sp, #16]
 800a212:	68b2      	ldr	r2, [r6, #8]
 800a214:	2a00      	cmp	r2, #0
 800a216:	d00a      	beq.n	800a22e <_scanf_float+0x62>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b4e      	cmp	r3, #78	; 0x4e
 800a21e:	d844      	bhi.n	800a2aa <_scanf_float+0xde>
 800a220:	0018      	movs	r0, r3
 800a222:	2b40      	cmp	r3, #64	; 0x40
 800a224:	d82c      	bhi.n	800a280 <_scanf_float+0xb4>
 800a226:	382b      	subs	r0, #43	; 0x2b
 800a228:	b2c1      	uxtb	r1, r0
 800a22a:	290e      	cmp	r1, #14
 800a22c:	d92a      	bls.n	800a284 <_scanf_float+0xb8>
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <_scanf_float+0x70>
 800a234:	6832      	ldr	r2, [r6, #0]
 800a236:	4ba4      	ldr	r3, [pc, #656]	; (800a4c8 <_scanf_float+0x2fc>)
 800a238:	4013      	ands	r3, r2
 800a23a:	6033      	str	r3, [r6, #0]
 800a23c:	9b02      	ldr	r3, [sp, #8]
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b01      	cmp	r3, #1
 800a242:	d900      	bls.n	800a246 <_scanf_float+0x7a>
 800a244:	e0f9      	b.n	800a43a <_scanf_float+0x26e>
 800a246:	24be      	movs	r4, #190	; 0xbe
 800a248:	0064      	lsls	r4, r4, #1
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	429f      	cmp	r7, r3
 800a24e:	d900      	bls.n	800a252 <_scanf_float+0x86>
 800a250:	e0e9      	b.n	800a426 <_scanf_float+0x25a>
 800a252:	2301      	movs	r3, #1
 800a254:	9302      	str	r3, [sp, #8]
 800a256:	e185      	b.n	800a564 <_scanf_float+0x398>
 800a258:	0018      	movs	r0, r3
 800a25a:	3861      	subs	r0, #97	; 0x61
 800a25c:	280d      	cmp	r0, #13
 800a25e:	d8e6      	bhi.n	800a22e <_scanf_float+0x62>
 800a260:	f7f5 ff64 	bl	800012c <__gnu_thumb1_case_shi>
 800a264:	ffe50083 	.word	0xffe50083
 800a268:	ffe5ffe5 	.word	0xffe5ffe5
 800a26c:	00a200b6 	.word	0x00a200b6
 800a270:	ffe5ffe5 	.word	0xffe5ffe5
 800a274:	ffe50089 	.word	0xffe50089
 800a278:	ffe5ffe5 	.word	0xffe5ffe5
 800a27c:	0065ffe5 	.word	0x0065ffe5
 800a280:	3841      	subs	r0, #65	; 0x41
 800a282:	e7eb      	b.n	800a25c <_scanf_float+0x90>
 800a284:	280e      	cmp	r0, #14
 800a286:	d8d2      	bhi.n	800a22e <_scanf_float+0x62>
 800a288:	f7f5 ff50 	bl	800012c <__gnu_thumb1_case_shi>
 800a28c:	ffd1004b 	.word	0xffd1004b
 800a290:	0098004b 	.word	0x0098004b
 800a294:	0020ffd1 	.word	0x0020ffd1
 800a298:	00400040 	.word	0x00400040
 800a29c:	00400040 	.word	0x00400040
 800a2a0:	00400040 	.word	0x00400040
 800a2a4:	00400040 	.word	0x00400040
 800a2a8:	0040      	.short	0x0040
 800a2aa:	2b6e      	cmp	r3, #110	; 0x6e
 800a2ac:	d809      	bhi.n	800a2c2 <_scanf_float+0xf6>
 800a2ae:	2b60      	cmp	r3, #96	; 0x60
 800a2b0:	d8d2      	bhi.n	800a258 <_scanf_float+0x8c>
 800a2b2:	2b54      	cmp	r3, #84	; 0x54
 800a2b4:	d07d      	beq.n	800a3b2 <_scanf_float+0x1e6>
 800a2b6:	2b59      	cmp	r3, #89	; 0x59
 800a2b8:	d1b9      	bne.n	800a22e <_scanf_float+0x62>
 800a2ba:	2c07      	cmp	r4, #7
 800a2bc:	d1b7      	bne.n	800a22e <_scanf_float+0x62>
 800a2be:	2408      	movs	r4, #8
 800a2c0:	e02c      	b.n	800a31c <_scanf_float+0x150>
 800a2c2:	2b74      	cmp	r3, #116	; 0x74
 800a2c4:	d075      	beq.n	800a3b2 <_scanf_float+0x1e6>
 800a2c6:	2b79      	cmp	r3, #121	; 0x79
 800a2c8:	d0f7      	beq.n	800a2ba <_scanf_float+0xee>
 800a2ca:	e7b0      	b.n	800a22e <_scanf_float+0x62>
 800a2cc:	6831      	ldr	r1, [r6, #0]
 800a2ce:	05c8      	lsls	r0, r1, #23
 800a2d0:	d51c      	bpl.n	800a30c <_scanf_float+0x140>
 800a2d2:	2380      	movs	r3, #128	; 0x80
 800a2d4:	4399      	bics	r1, r3
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	6031      	str	r1, [r6, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	9b05      	ldr	r3, [sp, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d003      	beq.n	800a2ec <_scanf_float+0x120>
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	9305      	str	r3, [sp, #20]
 800a2ea:	60b2      	str	r2, [r6, #8]
 800a2ec:	68b3      	ldr	r3, [r6, #8]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	60b3      	str	r3, [r6, #8]
 800a2f2:	6933      	ldr	r3, [r6, #16]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	6133      	str	r3, [r6, #16]
 800a2f8:	686b      	ldr	r3, [r5, #4]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	606b      	str	r3, [r5, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dc00      	bgt.n	800a304 <_scanf_float+0x138>
 800a302:	e086      	b.n	800a412 <_scanf_float+0x246>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	3301      	adds	r3, #1
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	e782      	b.n	800a212 <_scanf_float+0x46>
 800a30c:	9a02      	ldr	r2, [sp, #8]
 800a30e:	1912      	adds	r2, r2, r4
 800a310:	2a00      	cmp	r2, #0
 800a312:	d18c      	bne.n	800a22e <_scanf_float+0x62>
 800a314:	4a6d      	ldr	r2, [pc, #436]	; (800a4cc <_scanf_float+0x300>)
 800a316:	6831      	ldr	r1, [r6, #0]
 800a318:	400a      	ands	r2, r1
 800a31a:	6032      	str	r2, [r6, #0]
 800a31c:	703b      	strb	r3, [r7, #0]
 800a31e:	3701      	adds	r7, #1
 800a320:	e7e4      	b.n	800a2ec <_scanf_float+0x120>
 800a322:	2180      	movs	r1, #128	; 0x80
 800a324:	6832      	ldr	r2, [r6, #0]
 800a326:	420a      	tst	r2, r1
 800a328:	d081      	beq.n	800a22e <_scanf_float+0x62>
 800a32a:	438a      	bics	r2, r1
 800a32c:	e7f5      	b.n	800a31a <_scanf_float+0x14e>
 800a32e:	9a02      	ldr	r2, [sp, #8]
 800a330:	2a00      	cmp	r2, #0
 800a332:	d10f      	bne.n	800a354 <_scanf_float+0x188>
 800a334:	9a00      	ldr	r2, [sp, #0]
 800a336:	2a00      	cmp	r2, #0
 800a338:	d10f      	bne.n	800a35a <_scanf_float+0x18e>
 800a33a:	6832      	ldr	r2, [r6, #0]
 800a33c:	21e0      	movs	r1, #224	; 0xe0
 800a33e:	0010      	movs	r0, r2
 800a340:	00c9      	lsls	r1, r1, #3
 800a342:	4008      	ands	r0, r1
 800a344:	4288      	cmp	r0, r1
 800a346:	d108      	bne.n	800a35a <_scanf_float+0x18e>
 800a348:	4961      	ldr	r1, [pc, #388]	; (800a4d0 <_scanf_float+0x304>)
 800a34a:	400a      	ands	r2, r1
 800a34c:	6032      	str	r2, [r6, #0]
 800a34e:	2201      	movs	r2, #1
 800a350:	9202      	str	r2, [sp, #8]
 800a352:	e7e3      	b.n	800a31c <_scanf_float+0x150>
 800a354:	9a02      	ldr	r2, [sp, #8]
 800a356:	2a02      	cmp	r2, #2
 800a358:	d059      	beq.n	800a40e <_scanf_float+0x242>
 800a35a:	2c01      	cmp	r4, #1
 800a35c:	d002      	beq.n	800a364 <_scanf_float+0x198>
 800a35e:	2c04      	cmp	r4, #4
 800a360:	d000      	beq.n	800a364 <_scanf_float+0x198>
 800a362:	e764      	b.n	800a22e <_scanf_float+0x62>
 800a364:	3401      	adds	r4, #1
 800a366:	b2e4      	uxtb	r4, r4
 800a368:	e7d8      	b.n	800a31c <_scanf_float+0x150>
 800a36a:	9a02      	ldr	r2, [sp, #8]
 800a36c:	2a01      	cmp	r2, #1
 800a36e:	d000      	beq.n	800a372 <_scanf_float+0x1a6>
 800a370:	e75d      	b.n	800a22e <_scanf_float+0x62>
 800a372:	2202      	movs	r2, #2
 800a374:	e7ec      	b.n	800a350 <_scanf_float+0x184>
 800a376:	2c00      	cmp	r4, #0
 800a378:	d110      	bne.n	800a39c <_scanf_float+0x1d0>
 800a37a:	9a00      	ldr	r2, [sp, #0]
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	d000      	beq.n	800a382 <_scanf_float+0x1b6>
 800a380:	e758      	b.n	800a234 <_scanf_float+0x68>
 800a382:	6832      	ldr	r2, [r6, #0]
 800a384:	21e0      	movs	r1, #224	; 0xe0
 800a386:	0010      	movs	r0, r2
 800a388:	00c9      	lsls	r1, r1, #3
 800a38a:	4008      	ands	r0, r1
 800a38c:	4288      	cmp	r0, r1
 800a38e:	d000      	beq.n	800a392 <_scanf_float+0x1c6>
 800a390:	e754      	b.n	800a23c <_scanf_float+0x70>
 800a392:	494f      	ldr	r1, [pc, #316]	; (800a4d0 <_scanf_float+0x304>)
 800a394:	3401      	adds	r4, #1
 800a396:	400a      	ands	r2, r1
 800a398:	6032      	str	r2, [r6, #0]
 800a39a:	e7bf      	b.n	800a31c <_scanf_float+0x150>
 800a39c:	21fd      	movs	r1, #253	; 0xfd
 800a39e:	1ee2      	subs	r2, r4, #3
 800a3a0:	420a      	tst	r2, r1
 800a3a2:	d000      	beq.n	800a3a6 <_scanf_float+0x1da>
 800a3a4:	e743      	b.n	800a22e <_scanf_float+0x62>
 800a3a6:	e7dd      	b.n	800a364 <_scanf_float+0x198>
 800a3a8:	2c02      	cmp	r4, #2
 800a3aa:	d000      	beq.n	800a3ae <_scanf_float+0x1e2>
 800a3ac:	e73f      	b.n	800a22e <_scanf_float+0x62>
 800a3ae:	2403      	movs	r4, #3
 800a3b0:	e7b4      	b.n	800a31c <_scanf_float+0x150>
 800a3b2:	2c06      	cmp	r4, #6
 800a3b4:	d000      	beq.n	800a3b8 <_scanf_float+0x1ec>
 800a3b6:	e73a      	b.n	800a22e <_scanf_float+0x62>
 800a3b8:	2407      	movs	r4, #7
 800a3ba:	e7af      	b.n	800a31c <_scanf_float+0x150>
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	0591      	lsls	r1, r2, #22
 800a3c0:	d400      	bmi.n	800a3c4 <_scanf_float+0x1f8>
 800a3c2:	e734      	b.n	800a22e <_scanf_float+0x62>
 800a3c4:	4943      	ldr	r1, [pc, #268]	; (800a4d4 <_scanf_float+0x308>)
 800a3c6:	400a      	ands	r2, r1
 800a3c8:	6032      	str	r2, [r6, #0]
 800a3ca:	9a00      	ldr	r2, [sp, #0]
 800a3cc:	9204      	str	r2, [sp, #16]
 800a3ce:	e7a5      	b.n	800a31c <_scanf_float+0x150>
 800a3d0:	21a0      	movs	r1, #160	; 0xa0
 800a3d2:	2080      	movs	r0, #128	; 0x80
 800a3d4:	6832      	ldr	r2, [r6, #0]
 800a3d6:	00c9      	lsls	r1, r1, #3
 800a3d8:	4011      	ands	r1, r2
 800a3da:	00c0      	lsls	r0, r0, #3
 800a3dc:	4281      	cmp	r1, r0
 800a3de:	d006      	beq.n	800a3ee <_scanf_float+0x222>
 800a3e0:	4202      	tst	r2, r0
 800a3e2:	d100      	bne.n	800a3e6 <_scanf_float+0x21a>
 800a3e4:	e723      	b.n	800a22e <_scanf_float+0x62>
 800a3e6:	9900      	ldr	r1, [sp, #0]
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	d100      	bne.n	800a3ee <_scanf_float+0x222>
 800a3ec:	e726      	b.n	800a23c <_scanf_float+0x70>
 800a3ee:	0591      	lsls	r1, r2, #22
 800a3f0:	d404      	bmi.n	800a3fc <_scanf_float+0x230>
 800a3f2:	9900      	ldr	r1, [sp, #0]
 800a3f4:	9804      	ldr	r0, [sp, #16]
 800a3f6:	9708      	str	r7, [sp, #32]
 800a3f8:	1a09      	subs	r1, r1, r0
 800a3fa:	9107      	str	r1, [sp, #28]
 800a3fc:	4934      	ldr	r1, [pc, #208]	; (800a4d0 <_scanf_float+0x304>)
 800a3fe:	400a      	ands	r2, r1
 800a400:	21c0      	movs	r1, #192	; 0xc0
 800a402:	0049      	lsls	r1, r1, #1
 800a404:	430a      	orrs	r2, r1
 800a406:	6032      	str	r2, [r6, #0]
 800a408:	2200      	movs	r2, #0
 800a40a:	9200      	str	r2, [sp, #0]
 800a40c:	e786      	b.n	800a31c <_scanf_float+0x150>
 800a40e:	2203      	movs	r2, #3
 800a410:	e79e      	b.n	800a350 <_scanf_float+0x184>
 800a412:	23c0      	movs	r3, #192	; 0xc0
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	0029      	movs	r1, r5
 800a418:	58f3      	ldr	r3, [r6, r3]
 800a41a:	9801      	ldr	r0, [sp, #4]
 800a41c:	4798      	blx	r3
 800a41e:	2800      	cmp	r0, #0
 800a420:	d100      	bne.n	800a424 <_scanf_float+0x258>
 800a422:	e6f6      	b.n	800a212 <_scanf_float+0x46>
 800a424:	e703      	b.n	800a22e <_scanf_float+0x62>
 800a426:	3f01      	subs	r7, #1
 800a428:	5933      	ldr	r3, [r6, r4]
 800a42a:	002a      	movs	r2, r5
 800a42c:	7839      	ldrb	r1, [r7, #0]
 800a42e:	9801      	ldr	r0, [sp, #4]
 800a430:	4798      	blx	r3
 800a432:	6933      	ldr	r3, [r6, #16]
 800a434:	3b01      	subs	r3, #1
 800a436:	6133      	str	r3, [r6, #16]
 800a438:	e707      	b.n	800a24a <_scanf_float+0x7e>
 800a43a:	1e63      	subs	r3, r4, #1
 800a43c:	2b06      	cmp	r3, #6
 800a43e:	d80e      	bhi.n	800a45e <_scanf_float+0x292>
 800a440:	9702      	str	r7, [sp, #8]
 800a442:	2c02      	cmp	r4, #2
 800a444:	d920      	bls.n	800a488 <_scanf_float+0x2bc>
 800a446:	1be3      	subs	r3, r4, r7
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	9305      	str	r3, [sp, #20]
 800a44c:	9b02      	ldr	r3, [sp, #8]
 800a44e:	9a05      	ldr	r2, [sp, #20]
 800a450:	189b      	adds	r3, r3, r2
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b03      	cmp	r3, #3
 800a456:	d827      	bhi.n	800a4a8 <_scanf_float+0x2dc>
 800a458:	3c03      	subs	r4, #3
 800a45a:	b2e4      	uxtb	r4, r4
 800a45c:	1b3f      	subs	r7, r7, r4
 800a45e:	6833      	ldr	r3, [r6, #0]
 800a460:	05da      	lsls	r2, r3, #23
 800a462:	d554      	bpl.n	800a50e <_scanf_float+0x342>
 800a464:	055b      	lsls	r3, r3, #21
 800a466:	d537      	bpl.n	800a4d8 <_scanf_float+0x30c>
 800a468:	24be      	movs	r4, #190	; 0xbe
 800a46a:	0064      	lsls	r4, r4, #1
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	429f      	cmp	r7, r3
 800a470:	d800      	bhi.n	800a474 <_scanf_float+0x2a8>
 800a472:	e6ee      	b.n	800a252 <_scanf_float+0x86>
 800a474:	3f01      	subs	r7, #1
 800a476:	5933      	ldr	r3, [r6, r4]
 800a478:	002a      	movs	r2, r5
 800a47a:	7839      	ldrb	r1, [r7, #0]
 800a47c:	9801      	ldr	r0, [sp, #4]
 800a47e:	4798      	blx	r3
 800a480:	6933      	ldr	r3, [r6, #16]
 800a482:	3b01      	subs	r3, #1
 800a484:	6133      	str	r3, [r6, #16]
 800a486:	e7f1      	b.n	800a46c <_scanf_float+0x2a0>
 800a488:	24be      	movs	r4, #190	; 0xbe
 800a48a:	0064      	lsls	r4, r4, #1
 800a48c:	9b03      	ldr	r3, [sp, #12]
 800a48e:	429f      	cmp	r7, r3
 800a490:	d800      	bhi.n	800a494 <_scanf_float+0x2c8>
 800a492:	e6de      	b.n	800a252 <_scanf_float+0x86>
 800a494:	3f01      	subs	r7, #1
 800a496:	5933      	ldr	r3, [r6, r4]
 800a498:	002a      	movs	r2, r5
 800a49a:	7839      	ldrb	r1, [r7, #0]
 800a49c:	9801      	ldr	r0, [sp, #4]
 800a49e:	4798      	blx	r3
 800a4a0:	6933      	ldr	r3, [r6, #16]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	6133      	str	r3, [r6, #16]
 800a4a6:	e7f1      	b.n	800a48c <_scanf_float+0x2c0>
 800a4a8:	9b02      	ldr	r3, [sp, #8]
 800a4aa:	002a      	movs	r2, r5
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	7819      	ldrb	r1, [r3, #0]
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	23be      	movs	r3, #190	; 0xbe
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	58f3      	ldr	r3, [r6, r3]
 800a4b8:	9801      	ldr	r0, [sp, #4]
 800a4ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a4bc:	4798      	blx	r3
 800a4be:	6933      	ldr	r3, [r6, #16]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	6133      	str	r3, [r6, #16]
 800a4c4:	e7c2      	b.n	800a44c <_scanf_float+0x280>
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	fffffeff 	.word	0xfffffeff
 800a4cc:	fffffe7f 	.word	0xfffffe7f
 800a4d0:	fffff87f 	.word	0xfffff87f
 800a4d4:	fffffd7f 	.word	0xfffffd7f
 800a4d8:	6933      	ldr	r3, [r6, #16]
 800a4da:	1e7c      	subs	r4, r7, #1
 800a4dc:	7821      	ldrb	r1, [r4, #0]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	6133      	str	r3, [r6, #16]
 800a4e2:	2965      	cmp	r1, #101	; 0x65
 800a4e4:	d00c      	beq.n	800a500 <_scanf_float+0x334>
 800a4e6:	2945      	cmp	r1, #69	; 0x45
 800a4e8:	d00a      	beq.n	800a500 <_scanf_float+0x334>
 800a4ea:	23be      	movs	r3, #190	; 0xbe
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	58f3      	ldr	r3, [r6, r3]
 800a4f0:	002a      	movs	r2, r5
 800a4f2:	9801      	ldr	r0, [sp, #4]
 800a4f4:	4798      	blx	r3
 800a4f6:	6933      	ldr	r3, [r6, #16]
 800a4f8:	1ebc      	subs	r4, r7, #2
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	7821      	ldrb	r1, [r4, #0]
 800a4fe:	6133      	str	r3, [r6, #16]
 800a500:	23be      	movs	r3, #190	; 0xbe
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	002a      	movs	r2, r5
 800a506:	58f3      	ldr	r3, [r6, r3]
 800a508:	9801      	ldr	r0, [sp, #4]
 800a50a:	4798      	blx	r3
 800a50c:	0027      	movs	r7, r4
 800a50e:	6832      	ldr	r2, [r6, #0]
 800a510:	2310      	movs	r3, #16
 800a512:	0011      	movs	r1, r2
 800a514:	4019      	ands	r1, r3
 800a516:	9102      	str	r1, [sp, #8]
 800a518:	421a      	tst	r2, r3
 800a51a:	d158      	bne.n	800a5ce <_scanf_float+0x402>
 800a51c:	23c0      	movs	r3, #192	; 0xc0
 800a51e:	7039      	strb	r1, [r7, #0]
 800a520:	6832      	ldr	r2, [r6, #0]
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	4013      	ands	r3, r2
 800a526:	2280      	movs	r2, #128	; 0x80
 800a528:	00d2      	lsls	r2, r2, #3
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d11d      	bne.n	800a56a <_scanf_float+0x39e>
 800a52e:	9b04      	ldr	r3, [sp, #16]
 800a530:	9a00      	ldr	r2, [sp, #0]
 800a532:	9900      	ldr	r1, [sp, #0]
 800a534:	1a9a      	subs	r2, r3, r2
 800a536:	428b      	cmp	r3, r1
 800a538:	d124      	bne.n	800a584 <_scanf_float+0x3b8>
 800a53a:	2200      	movs	r2, #0
 800a53c:	9903      	ldr	r1, [sp, #12]
 800a53e:	9801      	ldr	r0, [sp, #4]
 800a540:	f000 ff32 	bl	800b3a8 <_strtod_r>
 800a544:	9b06      	ldr	r3, [sp, #24]
 800a546:	000d      	movs	r5, r1
 800a548:	6831      	ldr	r1, [r6, #0]
 800a54a:	0004      	movs	r4, r0
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	078a      	lsls	r2, r1, #30
 800a550:	d525      	bpl.n	800a59e <_scanf_float+0x3d2>
 800a552:	1d1a      	adds	r2, r3, #4
 800a554:	9906      	ldr	r1, [sp, #24]
 800a556:	600a      	str	r2, [r1, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	601c      	str	r4, [r3, #0]
 800a55c:	605d      	str	r5, [r3, #4]
 800a55e:	68f3      	ldr	r3, [r6, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	60f3      	str	r3, [r6, #12]
 800a564:	9802      	ldr	r0, [sp, #8]
 800a566:	b00b      	add	sp, #44	; 0x2c
 800a568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56a:	9b07      	ldr	r3, [sp, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0e4      	beq.n	800a53a <_scanf_float+0x36e>
 800a570:	9b08      	ldr	r3, [sp, #32]
 800a572:	9a02      	ldr	r2, [sp, #8]
 800a574:	1c59      	adds	r1, r3, #1
 800a576:	9801      	ldr	r0, [sp, #4]
 800a578:	230a      	movs	r3, #10
 800a57a:	f000 ffab 	bl	800b4d4 <_strtol_r>
 800a57e:	9b07      	ldr	r3, [sp, #28]
 800a580:	9f08      	ldr	r7, [sp, #32]
 800a582:	1ac2      	subs	r2, r0, r3
 800a584:	0033      	movs	r3, r6
 800a586:	3370      	adds	r3, #112	; 0x70
 800a588:	33ff      	adds	r3, #255	; 0xff
 800a58a:	429f      	cmp	r7, r3
 800a58c:	d302      	bcc.n	800a594 <_scanf_float+0x3c8>
 800a58e:	0037      	movs	r7, r6
 800a590:	376f      	adds	r7, #111	; 0x6f
 800a592:	37ff      	adds	r7, #255	; 0xff
 800a594:	0038      	movs	r0, r7
 800a596:	490f      	ldr	r1, [pc, #60]	; (800a5d4 <_scanf_float+0x408>)
 800a598:	f000 f8ba 	bl	800a710 <siprintf>
 800a59c:	e7cd      	b.n	800a53a <_scanf_float+0x36e>
 800a59e:	1d1a      	adds	r2, r3, #4
 800a5a0:	0749      	lsls	r1, r1, #29
 800a5a2:	d4d7      	bmi.n	800a554 <_scanf_float+0x388>
 800a5a4:	9906      	ldr	r1, [sp, #24]
 800a5a6:	0020      	movs	r0, r4
 800a5a8:	600a      	str	r2, [r1, #0]
 800a5aa:	681f      	ldr	r7, [r3, #0]
 800a5ac:	0022      	movs	r2, r4
 800a5ae:	002b      	movs	r3, r5
 800a5b0:	0029      	movs	r1, r5
 800a5b2:	f7f8 f8f5 	bl	80027a0 <__aeabi_dcmpun>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d004      	beq.n	800a5c4 <_scanf_float+0x3f8>
 800a5ba:	4807      	ldr	r0, [pc, #28]	; (800a5d8 <_scanf_float+0x40c>)
 800a5bc:	f000 f8a4 	bl	800a708 <nanf>
 800a5c0:	6038      	str	r0, [r7, #0]
 800a5c2:	e7cc      	b.n	800a55e <_scanf_float+0x392>
 800a5c4:	0020      	movs	r0, r4
 800a5c6:	0029      	movs	r1, r5
 800a5c8:	f7f8 f9dc 	bl	8002984 <__aeabi_d2f>
 800a5cc:	e7f8      	b.n	800a5c0 <_scanf_float+0x3f4>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e640      	b.n	800a254 <_scanf_float+0x88>
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	0800e6d0 	.word	0x0800e6d0
 800a5d8:	0800eb40 	.word	0x0800eb40

0800a5dc <iprintf>:
 800a5dc:	b40f      	push	{r0, r1, r2, r3}
 800a5de:	4b0b      	ldr	r3, [pc, #44]	; (800a60c <iprintf+0x30>)
 800a5e0:	b513      	push	{r0, r1, r4, lr}
 800a5e2:	681c      	ldr	r4, [r3, #0]
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	d005      	beq.n	800a5f4 <iprintf+0x18>
 800a5e8:	69a3      	ldr	r3, [r4, #24]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <iprintf+0x18>
 800a5ee:	0020      	movs	r0, r4
 800a5f0:	f002 f816 	bl	800c620 <__sinit>
 800a5f4:	ab05      	add	r3, sp, #20
 800a5f6:	0020      	movs	r0, r4
 800a5f8:	9a04      	ldr	r2, [sp, #16]
 800a5fa:	68a1      	ldr	r1, [r4, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f003 fc29 	bl	800de54 <_vfiprintf_r>
 800a602:	bc16      	pop	{r1, r2, r4}
 800a604:	bc08      	pop	{r3}
 800a606:	b004      	add	sp, #16
 800a608:	4718      	bx	r3
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	2000000c 	.word	0x2000000c

0800a610 <_puts_r>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	0005      	movs	r5, r0
 800a614:	000e      	movs	r6, r1
 800a616:	2800      	cmp	r0, #0
 800a618:	d004      	beq.n	800a624 <_puts_r+0x14>
 800a61a:	6983      	ldr	r3, [r0, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <_puts_r+0x14>
 800a620:	f001 fffe 	bl	800c620 <__sinit>
 800a624:	69ab      	ldr	r3, [r5, #24]
 800a626:	68ac      	ldr	r4, [r5, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d102      	bne.n	800a632 <_puts_r+0x22>
 800a62c:	0028      	movs	r0, r5
 800a62e:	f001 fff7 	bl	800c620 <__sinit>
 800a632:	4b2d      	ldr	r3, [pc, #180]	; (800a6e8 <_puts_r+0xd8>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d122      	bne.n	800a67e <_puts_r+0x6e>
 800a638:	686c      	ldr	r4, [r5, #4]
 800a63a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a63c:	07db      	lsls	r3, r3, #31
 800a63e:	d405      	bmi.n	800a64c <_puts_r+0x3c>
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	059b      	lsls	r3, r3, #22
 800a644:	d402      	bmi.n	800a64c <_puts_r+0x3c>
 800a646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a648:	f002 fc03 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	071b      	lsls	r3, r3, #28
 800a650:	d502      	bpl.n	800a658 <_puts_r+0x48>
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d129      	bne.n	800a6ac <_puts_r+0x9c>
 800a658:	0021      	movs	r1, r4
 800a65a:	0028      	movs	r0, r5
 800a65c:	f000 ff94 	bl	800b588 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d023      	beq.n	800a6ac <_puts_r+0x9c>
 800a664:	2501      	movs	r5, #1
 800a666:	426d      	negs	r5, r5
 800a668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a66a:	07db      	lsls	r3, r3, #31
 800a66c:	d405      	bmi.n	800a67a <_puts_r+0x6a>
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	059b      	lsls	r3, r3, #22
 800a672:	d402      	bmi.n	800a67a <_puts_r+0x6a>
 800a674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a676:	f002 fbed 	bl	800ce54 <__retarget_lock_release_recursive>
 800a67a:	0028      	movs	r0, r5
 800a67c:	bd70      	pop	{r4, r5, r6, pc}
 800a67e:	4b1b      	ldr	r3, [pc, #108]	; (800a6ec <_puts_r+0xdc>)
 800a680:	429c      	cmp	r4, r3
 800a682:	d101      	bne.n	800a688 <_puts_r+0x78>
 800a684:	68ac      	ldr	r4, [r5, #8]
 800a686:	e7d8      	b.n	800a63a <_puts_r+0x2a>
 800a688:	4b19      	ldr	r3, [pc, #100]	; (800a6f0 <_puts_r+0xe0>)
 800a68a:	429c      	cmp	r4, r3
 800a68c:	d1d5      	bne.n	800a63a <_puts_r+0x2a>
 800a68e:	68ec      	ldr	r4, [r5, #12]
 800a690:	e7d3      	b.n	800a63a <_puts_r+0x2a>
 800a692:	3601      	adds	r6, #1
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	da04      	bge.n	800a6a4 <_puts_r+0x94>
 800a69a:	69a2      	ldr	r2, [r4, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	dc16      	bgt.n	800a6ce <_puts_r+0xbe>
 800a6a0:	290a      	cmp	r1, #10
 800a6a2:	d014      	beq.n	800a6ce <_puts_r+0xbe>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	7019      	strb	r1, [r3, #0]
 800a6ac:	68a3      	ldr	r3, [r4, #8]
 800a6ae:	7831      	ldrb	r1, [r6, #0]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	d1ed      	bne.n	800a692 <_puts_r+0x82>
 800a6b6:	60a3      	str	r3, [r4, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da0f      	bge.n	800a6dc <_puts_r+0xcc>
 800a6bc:	0028      	movs	r0, r5
 800a6be:	0022      	movs	r2, r4
 800a6c0:	310a      	adds	r1, #10
 800a6c2:	f000 ff0b 	bl	800b4dc <__swbuf_r>
 800a6c6:	250a      	movs	r5, #10
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d1cd      	bne.n	800a668 <_puts_r+0x58>
 800a6cc:	e7ca      	b.n	800a664 <_puts_r+0x54>
 800a6ce:	0022      	movs	r2, r4
 800a6d0:	0028      	movs	r0, r5
 800a6d2:	f000 ff03 	bl	800b4dc <__swbuf_r>
 800a6d6:	1c43      	adds	r3, r0, #1
 800a6d8:	d1e8      	bne.n	800a6ac <_puts_r+0x9c>
 800a6da:	e7c3      	b.n	800a664 <_puts_r+0x54>
 800a6dc:	250a      	movs	r5, #10
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	701d      	strb	r5, [r3, #0]
 800a6e6:	e7bf      	b.n	800a668 <_puts_r+0x58>
 800a6e8:	0800e8dc 	.word	0x0800e8dc
 800a6ec:	0800e8fc 	.word	0x0800e8fc
 800a6f0:	0800e8bc 	.word	0x0800e8bc

0800a6f4 <puts>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4b03      	ldr	r3, [pc, #12]	; (800a704 <puts+0x10>)
 800a6f8:	0001      	movs	r1, r0
 800a6fa:	6818      	ldr	r0, [r3, #0]
 800a6fc:	f7ff ff88 	bl	800a610 <_puts_r>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	2000000c 	.word	0x2000000c

0800a708 <nanf>:
 800a708:	4800      	ldr	r0, [pc, #0]	; (800a70c <nanf+0x4>)
 800a70a:	4770      	bx	lr
 800a70c:	7fc00000 	.word	0x7fc00000

0800a710 <siprintf>:
 800a710:	b40e      	push	{r1, r2, r3}
 800a712:	b500      	push	{lr}
 800a714:	490b      	ldr	r1, [pc, #44]	; (800a744 <siprintf+0x34>)
 800a716:	b09c      	sub	sp, #112	; 0x70
 800a718:	ab1d      	add	r3, sp, #116	; 0x74
 800a71a:	9002      	str	r0, [sp, #8]
 800a71c:	9006      	str	r0, [sp, #24]
 800a71e:	9107      	str	r1, [sp, #28]
 800a720:	9104      	str	r1, [sp, #16]
 800a722:	4809      	ldr	r0, [pc, #36]	; (800a748 <siprintf+0x38>)
 800a724:	4909      	ldr	r1, [pc, #36]	; (800a74c <siprintf+0x3c>)
 800a726:	cb04      	ldmia	r3!, {r2}
 800a728:	9105      	str	r1, [sp, #20]
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	a902      	add	r1, sp, #8
 800a72e:	9301      	str	r3, [sp, #4]
 800a730:	f003 fa68 	bl	800dc04 <_svfiprintf_r>
 800a734:	2300      	movs	r3, #0
 800a736:	9a02      	ldr	r2, [sp, #8]
 800a738:	7013      	strb	r3, [r2, #0]
 800a73a:	b01c      	add	sp, #112	; 0x70
 800a73c:	bc08      	pop	{r3}
 800a73e:	b003      	add	sp, #12
 800a740:	4718      	bx	r3
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	7fffffff 	.word	0x7fffffff
 800a748:	2000000c 	.word	0x2000000c
 800a74c:	ffff0208 	.word	0xffff0208

0800a750 <sulp>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	0016      	movs	r6, r2
 800a754:	000d      	movs	r5, r1
 800a756:	f002 ff9f 	bl	800d698 <__ulp>
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	d00d      	beq.n	800a77a <sulp+0x2a>
 800a75e:	236b      	movs	r3, #107	; 0x6b
 800a760:	006a      	lsls	r2, r5, #1
 800a762:	0d52      	lsrs	r2, r2, #21
 800a764:	1a9b      	subs	r3, r3, r2
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd07      	ble.n	800a77a <sulp+0x2a>
 800a76a:	2400      	movs	r4, #0
 800a76c:	4a03      	ldr	r2, [pc, #12]	; (800a77c <sulp+0x2c>)
 800a76e:	051b      	lsls	r3, r3, #20
 800a770:	189d      	adds	r5, r3, r2
 800a772:	002b      	movs	r3, r5
 800a774:	0022      	movs	r2, r4
 800a776:	f7f7 fa15 	bl	8001ba4 <__aeabi_dmul>
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	3ff00000 	.word	0x3ff00000

0800a780 <_strtod_l>:
 800a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a782:	001d      	movs	r5, r3
 800a784:	2300      	movs	r3, #0
 800a786:	b0a5      	sub	sp, #148	; 0x94
 800a788:	9320      	str	r3, [sp, #128]	; 0x80
 800a78a:	4bac      	ldr	r3, [pc, #688]	; (800aa3c <_strtod_l+0x2bc>)
 800a78c:	9005      	str	r0, [sp, #20]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	9108      	str	r1, [sp, #32]
 800a792:	0018      	movs	r0, r3
 800a794:	9307      	str	r3, [sp, #28]
 800a796:	921b      	str	r2, [sp, #108]	; 0x6c
 800a798:	f7f5 fcb6 	bl	8000108 <strlen>
 800a79c:	2600      	movs	r6, #0
 800a79e:	0004      	movs	r4, r0
 800a7a0:	2700      	movs	r7, #0
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	931f      	str	r3, [sp, #124]	; 0x7c
 800a7a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7a8:	7813      	ldrb	r3, [r2, #0]
 800a7aa:	2b2b      	cmp	r3, #43	; 0x2b
 800a7ac:	d058      	beq.n	800a860 <_strtod_l+0xe0>
 800a7ae:	d844      	bhi.n	800a83a <_strtod_l+0xba>
 800a7b0:	2b0d      	cmp	r3, #13
 800a7b2:	d83d      	bhi.n	800a830 <_strtod_l+0xb0>
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	d83d      	bhi.n	800a834 <_strtod_l+0xb4>
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d047      	beq.n	800a84c <_strtod_l+0xcc>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a7c4:	920a      	str	r2, [sp, #40]	; 0x28
 800a7c6:	9306      	str	r3, [sp, #24]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b30      	cmp	r3, #48	; 0x30
 800a7cc:	d000      	beq.n	800a7d0 <_strtod_l+0x50>
 800a7ce:	e07f      	b.n	800a8d0 <_strtod_l+0x150>
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	3220      	adds	r2, #32
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	4393      	bics	r3, r2
 800a7d8:	2b58      	cmp	r3, #88	; 0x58
 800a7da:	d000      	beq.n	800a7de <_strtod_l+0x5e>
 800a7dc:	e06e      	b.n	800a8bc <_strtod_l+0x13c>
 800a7de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e0:	9502      	str	r5, [sp, #8]
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	ab20      	add	r3, sp, #128	; 0x80
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	4a95      	ldr	r2, [pc, #596]	; (800aa40 <_strtod_l+0x2c0>)
 800a7ea:	ab21      	add	r3, sp, #132	; 0x84
 800a7ec:	9805      	ldr	r0, [sp, #20]
 800a7ee:	a91f      	add	r1, sp, #124	; 0x7c
 800a7f0:	f002 f820 	bl	800c834 <__gethex>
 800a7f4:	2307      	movs	r3, #7
 800a7f6:	0005      	movs	r5, r0
 800a7f8:	0004      	movs	r4, r0
 800a7fa:	401d      	ands	r5, r3
 800a7fc:	4218      	tst	r0, r3
 800a7fe:	d006      	beq.n	800a80e <_strtod_l+0x8e>
 800a800:	2d06      	cmp	r5, #6
 800a802:	d12f      	bne.n	800a864 <_strtod_l+0xe4>
 800a804:	9b06      	ldr	r3, [sp, #24]
 800a806:	3301      	adds	r3, #1
 800a808:	931f      	str	r3, [sp, #124]	; 0x7c
 800a80a:	2300      	movs	r3, #0
 800a80c:	930e      	str	r3, [sp, #56]	; 0x38
 800a80e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <_strtod_l+0x9a>
 800a814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a816:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01c      	beq.n	800a85a <_strtod_l+0xda>
 800a820:	2380      	movs	r3, #128	; 0x80
 800a822:	0032      	movs	r2, r6
 800a824:	061b      	lsls	r3, r3, #24
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	0010      	movs	r0, r2
 800a82a:	0019      	movs	r1, r3
 800a82c:	b025      	add	sp, #148	; 0x94
 800a82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a830:	2b20      	cmp	r3, #32
 800a832:	d1c3      	bne.n	800a7bc <_strtod_l+0x3c>
 800a834:	3201      	adds	r2, #1
 800a836:	921f      	str	r2, [sp, #124]	; 0x7c
 800a838:	e7b5      	b.n	800a7a6 <_strtod_l+0x26>
 800a83a:	2b2d      	cmp	r3, #45	; 0x2d
 800a83c:	d1be      	bne.n	800a7bc <_strtod_l+0x3c>
 800a83e:	3b2c      	subs	r3, #44	; 0x2c
 800a840:	930e      	str	r3, [sp, #56]	; 0x38
 800a842:	1c53      	adds	r3, r2, #1
 800a844:	931f      	str	r3, [sp, #124]	; 0x7c
 800a846:	7853      	ldrb	r3, [r2, #1]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1b9      	bne.n	800a7c0 <_strtod_l+0x40>
 800a84c:	9b08      	ldr	r3, [sp, #32]
 800a84e:	931f      	str	r3, [sp, #124]	; 0x7c
 800a850:	2300      	movs	r3, #0
 800a852:	930e      	str	r3, [sp, #56]	; 0x38
 800a854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1dc      	bne.n	800a814 <_strtod_l+0x94>
 800a85a:	0032      	movs	r2, r6
 800a85c:	003b      	movs	r3, r7
 800a85e:	e7e3      	b.n	800a828 <_strtod_l+0xa8>
 800a860:	2300      	movs	r3, #0
 800a862:	e7ed      	b.n	800a840 <_strtod_l+0xc0>
 800a864:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a866:	2a00      	cmp	r2, #0
 800a868:	d007      	beq.n	800a87a <_strtod_l+0xfa>
 800a86a:	2135      	movs	r1, #53	; 0x35
 800a86c:	a822      	add	r0, sp, #136	; 0x88
 800a86e:	f003 f814 	bl	800d89a <__copybits>
 800a872:	9920      	ldr	r1, [sp, #128]	; 0x80
 800a874:	9805      	ldr	r0, [sp, #20]
 800a876:	f002 fbcf 	bl	800d018 <_Bfree>
 800a87a:	1e68      	subs	r0, r5, #1
 800a87c:	2804      	cmp	r0, #4
 800a87e:	d806      	bhi.n	800a88e <_strtod_l+0x10e>
 800a880:	f7f5 fc4a 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a884:	1816030b 	.word	0x1816030b
 800a888:	0b          	.byte	0x0b
 800a889:	00          	.byte	0x00
 800a88a:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a88c:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800a88e:	0723      	lsls	r3, r4, #28
 800a890:	d5bd      	bpl.n	800a80e <_strtod_l+0x8e>
 800a892:	2380      	movs	r3, #128	; 0x80
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	431f      	orrs	r7, r3
 800a898:	e7b9      	b.n	800a80e <_strtod_l+0x8e>
 800a89a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a89c:	4a69      	ldr	r2, [pc, #420]	; (800aa44 <_strtod_l+0x2c4>)
 800a89e:	496a      	ldr	r1, [pc, #424]	; (800aa48 <_strtod_l+0x2c8>)
 800a8a0:	401a      	ands	r2, r3
 800a8a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a4:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800a8a6:	185b      	adds	r3, r3, r1
 800a8a8:	051b      	lsls	r3, r3, #20
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	0017      	movs	r7, r2
 800a8ae:	e7ee      	b.n	800a88e <_strtod_l+0x10e>
 800a8b0:	4f66      	ldr	r7, [pc, #408]	; (800aa4c <_strtod_l+0x2cc>)
 800a8b2:	e7ec      	b.n	800a88e <_strtod_l+0x10e>
 800a8b4:	2601      	movs	r6, #1
 800a8b6:	4f66      	ldr	r7, [pc, #408]	; (800aa50 <_strtod_l+0x2d0>)
 800a8b8:	4276      	negs	r6, r6
 800a8ba:	e7e8      	b.n	800a88e <_strtod_l+0x10e>
 800a8bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	921f      	str	r2, [sp, #124]	; 0x7c
 800a8c2:	785b      	ldrb	r3, [r3, #1]
 800a8c4:	2b30      	cmp	r3, #48	; 0x30
 800a8c6:	d0f9      	beq.n	800a8bc <_strtod_l+0x13c>
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0a0      	beq.n	800a80e <_strtod_l+0x8e>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a8d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8d2:	220a      	movs	r2, #10
 800a8d4:	9310      	str	r3, [sp, #64]	; 0x40
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800a8e0:	7805      	ldrb	r5, [r0, #0]
 800a8e2:	002b      	movs	r3, r5
 800a8e4:	3b30      	subs	r3, #48	; 0x30
 800a8e6:	b2d9      	uxtb	r1, r3
 800a8e8:	2909      	cmp	r1, #9
 800a8ea:	d927      	bls.n	800a93c <_strtod_l+0x1bc>
 800a8ec:	0022      	movs	r2, r4
 800a8ee:	9907      	ldr	r1, [sp, #28]
 800a8f0:	f003 fc4e 	bl	800e190 <strncmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d033      	beq.n	800a960 <_strtod_l+0x1e0>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	002b      	movs	r3, r5
 800a8fc:	4684      	mov	ip, r0
 800a8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a900:	900c      	str	r0, [sp, #48]	; 0x30
 800a902:	9206      	str	r2, [sp, #24]
 800a904:	2220      	movs	r2, #32
 800a906:	0019      	movs	r1, r3
 800a908:	4391      	bics	r1, r2
 800a90a:	000a      	movs	r2, r1
 800a90c:	2100      	movs	r1, #0
 800a90e:	9107      	str	r1, [sp, #28]
 800a910:	2a45      	cmp	r2, #69	; 0x45
 800a912:	d000      	beq.n	800a916 <_strtod_l+0x196>
 800a914:	e0c5      	b.n	800aaa2 <_strtod_l+0x322>
 800a916:	9b06      	ldr	r3, [sp, #24]
 800a918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a91a:	4303      	orrs	r3, r0
 800a91c:	4313      	orrs	r3, r2
 800a91e:	428b      	cmp	r3, r1
 800a920:	d094      	beq.n	800a84c <_strtod_l+0xcc>
 800a922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a924:	9308      	str	r3, [sp, #32]
 800a926:	3301      	adds	r3, #1
 800a928:	931f      	str	r3, [sp, #124]	; 0x7c
 800a92a:	9b08      	ldr	r3, [sp, #32]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b2b      	cmp	r3, #43	; 0x2b
 800a930:	d076      	beq.n	800aa20 <_strtod_l+0x2a0>
 800a932:	000c      	movs	r4, r1
 800a934:	2b2d      	cmp	r3, #45	; 0x2d
 800a936:	d179      	bne.n	800aa2c <_strtod_l+0x2ac>
 800a938:	2401      	movs	r4, #1
 800a93a:	e072      	b.n	800aa22 <_strtod_l+0x2a2>
 800a93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a93e:	2908      	cmp	r1, #8
 800a940:	dc09      	bgt.n	800a956 <_strtod_l+0x1d6>
 800a942:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a944:	4351      	muls	r1, r2
 800a946:	185b      	adds	r3, r3, r1
 800a948:	930b      	str	r3, [sp, #44]	; 0x2c
 800a94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94c:	3001      	adds	r0, #1
 800a94e:	3301      	adds	r3, #1
 800a950:	9309      	str	r3, [sp, #36]	; 0x24
 800a952:	901f      	str	r0, [sp, #124]	; 0x7c
 800a954:	e7c3      	b.n	800a8de <_strtod_l+0x15e>
 800a956:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a958:	4351      	muls	r1, r2
 800a95a:	185b      	adds	r3, r3, r1
 800a95c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a95e:	e7f4      	b.n	800a94a <_strtod_l+0x1ca>
 800a960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a964:	191c      	adds	r4, r3, r4
 800a966:	941f      	str	r4, [sp, #124]	; 0x7c
 800a968:	7823      	ldrb	r3, [r4, #0]
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d039      	beq.n	800a9e2 <_strtod_l+0x262>
 800a96e:	900c      	str	r0, [sp, #48]	; 0x30
 800a970:	9206      	str	r2, [sp, #24]
 800a972:	001a      	movs	r2, r3
 800a974:	3a30      	subs	r2, #48	; 0x30
 800a976:	2a09      	cmp	r2, #9
 800a978:	d912      	bls.n	800a9a0 <_strtod_l+0x220>
 800a97a:	2201      	movs	r2, #1
 800a97c:	4694      	mov	ip, r2
 800a97e:	e7c1      	b.n	800a904 <_strtod_l+0x184>
 800a980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a982:	3001      	adds	r0, #1
 800a984:	1c5a      	adds	r2, r3, #1
 800a986:	921f      	str	r2, [sp, #124]	; 0x7c
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	2b30      	cmp	r3, #48	; 0x30
 800a98c:	d0f8      	beq.n	800a980 <_strtod_l+0x200>
 800a98e:	001a      	movs	r2, r3
 800a990:	3a31      	subs	r2, #49	; 0x31
 800a992:	2a08      	cmp	r2, #8
 800a994:	d83f      	bhi.n	800aa16 <_strtod_l+0x296>
 800a996:	900c      	str	r0, [sp, #48]	; 0x30
 800a998:	2000      	movs	r0, #0
 800a99a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a99c:	9006      	str	r0, [sp, #24]
 800a99e:	9210      	str	r2, [sp, #64]	; 0x40
 800a9a0:	001a      	movs	r2, r3
 800a9a2:	1c41      	adds	r1, r0, #1
 800a9a4:	3a30      	subs	r2, #48	; 0x30
 800a9a6:	2b30      	cmp	r3, #48	; 0x30
 800a9a8:	d015      	beq.n	800a9d6 <_strtod_l+0x256>
 800a9aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ac:	185b      	adds	r3, r3, r1
 800a9ae:	210a      	movs	r1, #10
 800a9b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9b2:	9b06      	ldr	r3, [sp, #24]
 800a9b4:	18c4      	adds	r4, r0, r3
 800a9b6:	42a3      	cmp	r3, r4
 800a9b8:	d115      	bne.n	800a9e6 <_strtod_l+0x266>
 800a9ba:	9906      	ldr	r1, [sp, #24]
 800a9bc:	9b06      	ldr	r3, [sp, #24]
 800a9be:	3101      	adds	r1, #1
 800a9c0:	1809      	adds	r1, r1, r0
 800a9c2:	181b      	adds	r3, r3, r0
 800a9c4:	9106      	str	r1, [sp, #24]
 800a9c6:	2b08      	cmp	r3, #8
 800a9c8:	dc1b      	bgt.n	800aa02 <_strtod_l+0x282>
 800a9ca:	230a      	movs	r3, #10
 800a9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9ce:	434b      	muls	r3, r1
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	18d3      	adds	r3, r2, r3
 800a9d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9d8:	0008      	movs	r0, r1
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	921f      	str	r2, [sp, #124]	; 0x7c
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	e7c7      	b.n	800a972 <_strtod_l+0x1f2>
 800a9e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e4:	e7d1      	b.n	800a98a <_strtod_l+0x20a>
 800a9e6:	2b08      	cmp	r3, #8
 800a9e8:	dc04      	bgt.n	800a9f4 <_strtod_l+0x274>
 800a9ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a9ec:	434d      	muls	r5, r1
 800a9ee:	950b      	str	r5, [sp, #44]	; 0x2c
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	e7e0      	b.n	800a9b6 <_strtod_l+0x236>
 800a9f4:	1c5d      	adds	r5, r3, #1
 800a9f6:	2d10      	cmp	r5, #16
 800a9f8:	dcfa      	bgt.n	800a9f0 <_strtod_l+0x270>
 800a9fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a9fc:	434d      	muls	r5, r1
 800a9fe:	950f      	str	r5, [sp, #60]	; 0x3c
 800aa00:	e7f6      	b.n	800a9f0 <_strtod_l+0x270>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	2100      	movs	r1, #0
 800aa06:	2b10      	cmp	r3, #16
 800aa08:	dce5      	bgt.n	800a9d6 <_strtod_l+0x256>
 800aa0a:	230a      	movs	r3, #10
 800aa0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aa0e:	4343      	muls	r3, r0
 800aa10:	18d3      	adds	r3, r2, r3
 800aa12:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa14:	e7df      	b.n	800a9d6 <_strtod_l+0x256>
 800aa16:	2200      	movs	r2, #0
 800aa18:	920c      	str	r2, [sp, #48]	; 0x30
 800aa1a:	9206      	str	r2, [sp, #24]
 800aa1c:	3201      	adds	r2, #1
 800aa1e:	e7ad      	b.n	800a97c <_strtod_l+0x1fc>
 800aa20:	2400      	movs	r4, #0
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3302      	adds	r3, #2
 800aa26:	931f      	str	r3, [sp, #124]	; 0x7c
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	789b      	ldrb	r3, [r3, #2]
 800aa2c:	001a      	movs	r2, r3
 800aa2e:	3a30      	subs	r2, #48	; 0x30
 800aa30:	2a09      	cmp	r2, #9
 800aa32:	d913      	bls.n	800aa5c <_strtod_l+0x2dc>
 800aa34:	9a08      	ldr	r2, [sp, #32]
 800aa36:	921f      	str	r2, [sp, #124]	; 0x7c
 800aa38:	2200      	movs	r2, #0
 800aa3a:	e031      	b.n	800aaa0 <_strtod_l+0x320>
 800aa3c:	0800e984 	.word	0x0800e984
 800aa40:	0800e6d8 	.word	0x0800e6d8
 800aa44:	ffefffff 	.word	0xffefffff
 800aa48:	00000433 	.word	0x00000433
 800aa4c:	7ff00000 	.word	0x7ff00000
 800aa50:	7fffffff 	.word	0x7fffffff
 800aa54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	921f      	str	r2, [sp, #124]	; 0x7c
 800aa5a:	785b      	ldrb	r3, [r3, #1]
 800aa5c:	2b30      	cmp	r3, #48	; 0x30
 800aa5e:	d0f9      	beq.n	800aa54 <_strtod_l+0x2d4>
 800aa60:	2200      	movs	r2, #0
 800aa62:	9207      	str	r2, [sp, #28]
 800aa64:	001a      	movs	r2, r3
 800aa66:	3a31      	subs	r2, #49	; 0x31
 800aa68:	2a08      	cmp	r2, #8
 800aa6a:	d81a      	bhi.n	800aaa2 <_strtod_l+0x322>
 800aa6c:	3b30      	subs	r3, #48	; 0x30
 800aa6e:	001a      	movs	r2, r3
 800aa70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa76:	1c59      	adds	r1, r3, #1
 800aa78:	911f      	str	r1, [sp, #124]	; 0x7c
 800aa7a:	785b      	ldrb	r3, [r3, #1]
 800aa7c:	001d      	movs	r5, r3
 800aa7e:	3d30      	subs	r5, #48	; 0x30
 800aa80:	2d09      	cmp	r5, #9
 800aa82:	d939      	bls.n	800aaf8 <_strtod_l+0x378>
 800aa84:	9d07      	ldr	r5, [sp, #28]
 800aa86:	1b49      	subs	r1, r1, r5
 800aa88:	4db0      	ldr	r5, [pc, #704]	; (800ad4c <_strtod_l+0x5cc>)
 800aa8a:	9507      	str	r5, [sp, #28]
 800aa8c:	2908      	cmp	r1, #8
 800aa8e:	dc03      	bgt.n	800aa98 <_strtod_l+0x318>
 800aa90:	9207      	str	r2, [sp, #28]
 800aa92:	42aa      	cmp	r2, r5
 800aa94:	dd00      	ble.n	800aa98 <_strtod_l+0x318>
 800aa96:	9507      	str	r5, [sp, #28]
 800aa98:	2c00      	cmp	r4, #0
 800aa9a:	d002      	beq.n	800aaa2 <_strtod_l+0x322>
 800aa9c:	9a07      	ldr	r2, [sp, #28]
 800aa9e:	4252      	negs	r2, r2
 800aaa0:	9207      	str	r2, [sp, #28]
 800aaa2:	9a06      	ldr	r2, [sp, #24]
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d14b      	bne.n	800ab40 <_strtod_l+0x3c0>
 800aaa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaaa:	4310      	orrs	r0, r2
 800aaac:	d000      	beq.n	800aab0 <_strtod_l+0x330>
 800aaae:	e6ae      	b.n	800a80e <_strtod_l+0x8e>
 800aab0:	4662      	mov	r2, ip
 800aab2:	2a00      	cmp	r2, #0
 800aab4:	d000      	beq.n	800aab8 <_strtod_l+0x338>
 800aab6:	e6c9      	b.n	800a84c <_strtod_l+0xcc>
 800aab8:	2b69      	cmp	r3, #105	; 0x69
 800aaba:	d025      	beq.n	800ab08 <_strtod_l+0x388>
 800aabc:	dc21      	bgt.n	800ab02 <_strtod_l+0x382>
 800aabe:	2b49      	cmp	r3, #73	; 0x49
 800aac0:	d022      	beq.n	800ab08 <_strtod_l+0x388>
 800aac2:	2b4e      	cmp	r3, #78	; 0x4e
 800aac4:	d000      	beq.n	800aac8 <_strtod_l+0x348>
 800aac6:	e6c1      	b.n	800a84c <_strtod_l+0xcc>
 800aac8:	49a1      	ldr	r1, [pc, #644]	; (800ad50 <_strtod_l+0x5d0>)
 800aaca:	a81f      	add	r0, sp, #124	; 0x7c
 800aacc:	f002 f900 	bl	800ccd0 <__match>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d100      	bne.n	800aad6 <_strtod_l+0x356>
 800aad4:	e6ba      	b.n	800a84c <_strtod_l+0xcc>
 800aad6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b28      	cmp	r3, #40	; 0x28
 800aadc:	d12a      	bne.n	800ab34 <_strtod_l+0x3b4>
 800aade:	499d      	ldr	r1, [pc, #628]	; (800ad54 <_strtod_l+0x5d4>)
 800aae0:	aa22      	add	r2, sp, #136	; 0x88
 800aae2:	a81f      	add	r0, sp, #124	; 0x7c
 800aae4:	f002 f908 	bl	800ccf8 <__hexnan>
 800aae8:	2805      	cmp	r0, #5
 800aaea:	d123      	bne.n	800ab34 <_strtod_l+0x3b4>
 800aaec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aaee:	4a9a      	ldr	r2, [pc, #616]	; (800ad58 <_strtod_l+0x5d8>)
 800aaf0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	0017      	movs	r7, r2
 800aaf6:	e68a      	b.n	800a80e <_strtod_l+0x8e>
 800aaf8:	210a      	movs	r1, #10
 800aafa:	434a      	muls	r2, r1
 800aafc:	18d2      	adds	r2, r2, r3
 800aafe:	3a30      	subs	r2, #48	; 0x30
 800ab00:	e7b8      	b.n	800aa74 <_strtod_l+0x2f4>
 800ab02:	2b6e      	cmp	r3, #110	; 0x6e
 800ab04:	d0e0      	beq.n	800aac8 <_strtod_l+0x348>
 800ab06:	e6a1      	b.n	800a84c <_strtod_l+0xcc>
 800ab08:	4994      	ldr	r1, [pc, #592]	; (800ad5c <_strtod_l+0x5dc>)
 800ab0a:	a81f      	add	r0, sp, #124	; 0x7c
 800ab0c:	f002 f8e0 	bl	800ccd0 <__match>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d100      	bne.n	800ab16 <_strtod_l+0x396>
 800ab14:	e69a      	b.n	800a84c <_strtod_l+0xcc>
 800ab16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab18:	4991      	ldr	r1, [pc, #580]	; (800ad60 <_strtod_l+0x5e0>)
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	a81f      	add	r0, sp, #124	; 0x7c
 800ab1e:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab20:	f002 f8d6 	bl	800ccd0 <__match>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d102      	bne.n	800ab2e <_strtod_l+0x3ae>
 800ab28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	931f      	str	r3, [sp, #124]	; 0x7c
 800ab2e:	2600      	movs	r6, #0
 800ab30:	4f89      	ldr	r7, [pc, #548]	; (800ad58 <_strtod_l+0x5d8>)
 800ab32:	e66c      	b.n	800a80e <_strtod_l+0x8e>
 800ab34:	488b      	ldr	r0, [pc, #556]	; (800ad64 <_strtod_l+0x5e4>)
 800ab36:	f003 fac7 	bl	800e0c8 <nan>
 800ab3a:	0006      	movs	r6, r0
 800ab3c:	000f      	movs	r7, r1
 800ab3e:	e666      	b.n	800a80e <_strtod_l+0x8e>
 800ab40:	9b07      	ldr	r3, [sp, #28]
 800ab42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	930a      	str	r3, [sp, #40]	; 0x28
 800ab48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <_strtod_l+0x3d2>
 800ab4e:	9b06      	ldr	r3, [sp, #24]
 800ab50:	9309      	str	r3, [sp, #36]	; 0x24
 800ab52:	9c06      	ldr	r4, [sp, #24]
 800ab54:	2c10      	cmp	r4, #16
 800ab56:	dd00      	ble.n	800ab5a <_strtod_l+0x3da>
 800ab58:	2410      	movs	r4, #16
 800ab5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab5c:	f7f7 fea4 	bl	80028a8 <__aeabi_ui2d>
 800ab60:	9b06      	ldr	r3, [sp, #24]
 800ab62:	0006      	movs	r6, r0
 800ab64:	000f      	movs	r7, r1
 800ab66:	2b09      	cmp	r3, #9
 800ab68:	dd15      	ble.n	800ab96 <_strtod_l+0x416>
 800ab6a:	0022      	movs	r2, r4
 800ab6c:	4b7e      	ldr	r3, [pc, #504]	; (800ad68 <_strtod_l+0x5e8>)
 800ab6e:	3a09      	subs	r2, #9
 800ab70:	00d2      	lsls	r2, r2, #3
 800ab72:	189b      	adds	r3, r3, r2
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f7f7 f814 	bl	8001ba4 <__aeabi_dmul>
 800ab7c:	0006      	movs	r6, r0
 800ab7e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ab80:	000f      	movs	r7, r1
 800ab82:	f7f7 fe91 	bl	80028a8 <__aeabi_ui2d>
 800ab86:	0002      	movs	r2, r0
 800ab88:	000b      	movs	r3, r1
 800ab8a:	0030      	movs	r0, r6
 800ab8c:	0039      	movs	r1, r7
 800ab8e:	f7f6 f8cb 	bl	8000d28 <__aeabi_dadd>
 800ab92:	0006      	movs	r6, r0
 800ab94:	000f      	movs	r7, r1
 800ab96:	9b06      	ldr	r3, [sp, #24]
 800ab98:	2b0f      	cmp	r3, #15
 800ab9a:	dc39      	bgt.n	800ac10 <_strtod_l+0x490>
 800ab9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d100      	bne.n	800aba4 <_strtod_l+0x424>
 800aba2:	e634      	b.n	800a80e <_strtod_l+0x8e>
 800aba4:	dd24      	ble.n	800abf0 <_strtod_l+0x470>
 800aba6:	2b16      	cmp	r3, #22
 800aba8:	dc09      	bgt.n	800abbe <_strtod_l+0x43e>
 800abaa:	496f      	ldr	r1, [pc, #444]	; (800ad68 <_strtod_l+0x5e8>)
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	18c9      	adds	r1, r1, r3
 800abb0:	0032      	movs	r2, r6
 800abb2:	6808      	ldr	r0, [r1, #0]
 800abb4:	6849      	ldr	r1, [r1, #4]
 800abb6:	003b      	movs	r3, r7
 800abb8:	f7f6 fff4 	bl	8001ba4 <__aeabi_dmul>
 800abbc:	e7bd      	b.n	800ab3a <_strtod_l+0x3ba>
 800abbe:	2325      	movs	r3, #37	; 0x25
 800abc0:	9a06      	ldr	r2, [sp, #24]
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc6:	4293      	cmp	r3, r2
 800abc8:	db22      	blt.n	800ac10 <_strtod_l+0x490>
 800abca:	240f      	movs	r4, #15
 800abcc:	9b06      	ldr	r3, [sp, #24]
 800abce:	4d66      	ldr	r5, [pc, #408]	; (800ad68 <_strtod_l+0x5e8>)
 800abd0:	1ae4      	subs	r4, r4, r3
 800abd2:	00e1      	lsls	r1, r4, #3
 800abd4:	1869      	adds	r1, r5, r1
 800abd6:	0032      	movs	r2, r6
 800abd8:	6808      	ldr	r0, [r1, #0]
 800abda:	6849      	ldr	r1, [r1, #4]
 800abdc:	003b      	movs	r3, r7
 800abde:	f7f6 ffe1 	bl	8001ba4 <__aeabi_dmul>
 800abe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abe4:	1b1c      	subs	r4, r3, r4
 800abe6:	00e4      	lsls	r4, r4, #3
 800abe8:	192c      	adds	r4, r5, r4
 800abea:	6822      	ldr	r2, [r4, #0]
 800abec:	6863      	ldr	r3, [r4, #4]
 800abee:	e7e3      	b.n	800abb8 <_strtod_l+0x438>
 800abf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf2:	3316      	adds	r3, #22
 800abf4:	db0c      	blt.n	800ac10 <_strtod_l+0x490>
 800abf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abf8:	9a07      	ldr	r2, [sp, #28]
 800abfa:	0030      	movs	r0, r6
 800abfc:	1a9a      	subs	r2, r3, r2
 800abfe:	4b5a      	ldr	r3, [pc, #360]	; (800ad68 <_strtod_l+0x5e8>)
 800ac00:	00d2      	lsls	r2, r2, #3
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	0039      	movs	r1, r7
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f7f6 fbc9 	bl	80013a0 <__aeabi_ddiv>
 800ac0e:	e794      	b.n	800ab3a <_strtod_l+0x3ba>
 800ac10:	9b06      	ldr	r3, [sp, #24]
 800ac12:	1b1c      	subs	r4, r3, r4
 800ac14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac16:	18e4      	adds	r4, r4, r3
 800ac18:	2c00      	cmp	r4, #0
 800ac1a:	dd72      	ble.n	800ad02 <_strtod_l+0x582>
 800ac1c:	230f      	movs	r3, #15
 800ac1e:	0021      	movs	r1, r4
 800ac20:	4019      	ands	r1, r3
 800ac22:	421c      	tst	r4, r3
 800ac24:	d00a      	beq.n	800ac3c <_strtod_l+0x4bc>
 800ac26:	00cb      	lsls	r3, r1, #3
 800ac28:	494f      	ldr	r1, [pc, #316]	; (800ad68 <_strtod_l+0x5e8>)
 800ac2a:	0032      	movs	r2, r6
 800ac2c:	18c9      	adds	r1, r1, r3
 800ac2e:	6808      	ldr	r0, [r1, #0]
 800ac30:	6849      	ldr	r1, [r1, #4]
 800ac32:	003b      	movs	r3, r7
 800ac34:	f7f6 ffb6 	bl	8001ba4 <__aeabi_dmul>
 800ac38:	0006      	movs	r6, r0
 800ac3a:	000f      	movs	r7, r1
 800ac3c:	230f      	movs	r3, #15
 800ac3e:	439c      	bics	r4, r3
 800ac40:	d04a      	beq.n	800acd8 <_strtod_l+0x558>
 800ac42:	3326      	adds	r3, #38	; 0x26
 800ac44:	33ff      	adds	r3, #255	; 0xff
 800ac46:	429c      	cmp	r4, r3
 800ac48:	dd22      	ble.n	800ac90 <_strtod_l+0x510>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9306      	str	r3, [sp, #24]
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac52:	9309      	str	r3, [sp, #36]	; 0x24
 800ac54:	2322      	movs	r3, #34	; 0x22
 800ac56:	2600      	movs	r6, #0
 800ac58:	9a05      	ldr	r2, [sp, #20]
 800ac5a:	4f3f      	ldr	r7, [pc, #252]	; (800ad58 <_strtod_l+0x5d8>)
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac60:	42b3      	cmp	r3, r6
 800ac62:	d100      	bne.n	800ac66 <_strtod_l+0x4e6>
 800ac64:	e5d3      	b.n	800a80e <_strtod_l+0x8e>
 800ac66:	9920      	ldr	r1, [sp, #128]	; 0x80
 800ac68:	9805      	ldr	r0, [sp, #20]
 800ac6a:	f002 f9d5 	bl	800d018 <_Bfree>
 800ac6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac70:	9805      	ldr	r0, [sp, #20]
 800ac72:	f002 f9d1 	bl	800d018 <_Bfree>
 800ac76:	9907      	ldr	r1, [sp, #28]
 800ac78:	9805      	ldr	r0, [sp, #20]
 800ac7a:	f002 f9cd 	bl	800d018 <_Bfree>
 800ac7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac80:	9805      	ldr	r0, [sp, #20]
 800ac82:	f002 f9c9 	bl	800d018 <_Bfree>
 800ac86:	9906      	ldr	r1, [sp, #24]
 800ac88:	9805      	ldr	r0, [sp, #20]
 800ac8a:	f002 f9c5 	bl	800d018 <_Bfree>
 800ac8e:	e5be      	b.n	800a80e <_strtod_l+0x8e>
 800ac90:	2300      	movs	r3, #0
 800ac92:	0030      	movs	r0, r6
 800ac94:	0039      	movs	r1, r7
 800ac96:	4d35      	ldr	r5, [pc, #212]	; (800ad6c <_strtod_l+0x5ec>)
 800ac98:	1124      	asrs	r4, r4, #4
 800ac9a:	9308      	str	r3, [sp, #32]
 800ac9c:	2c01      	cmp	r4, #1
 800ac9e:	dc1e      	bgt.n	800acde <_strtod_l+0x55e>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <_strtod_l+0x528>
 800aca4:	0006      	movs	r6, r0
 800aca6:	000f      	movs	r7, r1
 800aca8:	4b31      	ldr	r3, [pc, #196]	; (800ad70 <_strtod_l+0x5f0>)
 800acaa:	0032      	movs	r2, r6
 800acac:	18ff      	adds	r7, r7, r3
 800acae:	9b08      	ldr	r3, [sp, #32]
 800acb0:	00dd      	lsls	r5, r3, #3
 800acb2:	4b2e      	ldr	r3, [pc, #184]	; (800ad6c <_strtod_l+0x5ec>)
 800acb4:	195d      	adds	r5, r3, r5
 800acb6:	6828      	ldr	r0, [r5, #0]
 800acb8:	6869      	ldr	r1, [r5, #4]
 800acba:	003b      	movs	r3, r7
 800acbc:	f7f6 ff72 	bl	8001ba4 <__aeabi_dmul>
 800acc0:	4b25      	ldr	r3, [pc, #148]	; (800ad58 <_strtod_l+0x5d8>)
 800acc2:	4a2c      	ldr	r2, [pc, #176]	; (800ad74 <_strtod_l+0x5f4>)
 800acc4:	0006      	movs	r6, r0
 800acc6:	400b      	ands	r3, r1
 800acc8:	4293      	cmp	r3, r2
 800acca:	d8be      	bhi.n	800ac4a <_strtod_l+0x4ca>
 800accc:	4a2a      	ldr	r2, [pc, #168]	; (800ad78 <_strtod_l+0x5f8>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d913      	bls.n	800acfa <_strtod_l+0x57a>
 800acd2:	2601      	movs	r6, #1
 800acd4:	4f29      	ldr	r7, [pc, #164]	; (800ad7c <_strtod_l+0x5fc>)
 800acd6:	4276      	negs	r6, r6
 800acd8:	2300      	movs	r3, #0
 800acda:	9308      	str	r3, [sp, #32]
 800acdc:	e087      	b.n	800adee <_strtod_l+0x66e>
 800acde:	2201      	movs	r2, #1
 800ace0:	4214      	tst	r4, r2
 800ace2:	d004      	beq.n	800acee <_strtod_l+0x56e>
 800ace4:	682a      	ldr	r2, [r5, #0]
 800ace6:	686b      	ldr	r3, [r5, #4]
 800ace8:	f7f6 ff5c 	bl	8001ba4 <__aeabi_dmul>
 800acec:	2301      	movs	r3, #1
 800acee:	9a08      	ldr	r2, [sp, #32]
 800acf0:	1064      	asrs	r4, r4, #1
 800acf2:	3201      	adds	r2, #1
 800acf4:	9208      	str	r2, [sp, #32]
 800acf6:	3508      	adds	r5, #8
 800acf8:	e7d0      	b.n	800ac9c <_strtod_l+0x51c>
 800acfa:	23d4      	movs	r3, #212	; 0xd4
 800acfc:	049b      	lsls	r3, r3, #18
 800acfe:	18cf      	adds	r7, r1, r3
 800ad00:	e7ea      	b.n	800acd8 <_strtod_l+0x558>
 800ad02:	2c00      	cmp	r4, #0
 800ad04:	d0e8      	beq.n	800acd8 <_strtod_l+0x558>
 800ad06:	4264      	negs	r4, r4
 800ad08:	220f      	movs	r2, #15
 800ad0a:	0023      	movs	r3, r4
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	4214      	tst	r4, r2
 800ad10:	d00a      	beq.n	800ad28 <_strtod_l+0x5a8>
 800ad12:	00da      	lsls	r2, r3, #3
 800ad14:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <_strtod_l+0x5e8>)
 800ad16:	0030      	movs	r0, r6
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	0039      	movs	r1, r7
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f7f6 fb3e 	bl	80013a0 <__aeabi_ddiv>
 800ad24:	0006      	movs	r6, r0
 800ad26:	000f      	movs	r7, r1
 800ad28:	1124      	asrs	r4, r4, #4
 800ad2a:	d0d5      	beq.n	800acd8 <_strtod_l+0x558>
 800ad2c:	2c1f      	cmp	r4, #31
 800ad2e:	dd27      	ble.n	800ad80 <_strtod_l+0x600>
 800ad30:	2300      	movs	r3, #0
 800ad32:	9306      	str	r3, [sp, #24]
 800ad34:	9307      	str	r3, [sp, #28]
 800ad36:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad38:	9309      	str	r3, [sp, #36]	; 0x24
 800ad3a:	2322      	movs	r3, #34	; 0x22
 800ad3c:	9a05      	ldr	r2, [sp, #20]
 800ad3e:	2600      	movs	r6, #0
 800ad40:	6013      	str	r3, [r2, #0]
 800ad42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad44:	2700      	movs	r7, #0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d18d      	bne.n	800ac66 <_strtod_l+0x4e6>
 800ad4a:	e560      	b.n	800a80e <_strtod_l+0x8e>
 800ad4c:	00004e1f 	.word	0x00004e1f
 800ad50:	0800e6a9 	.word	0x0800e6a9
 800ad54:	0800e6ec 	.word	0x0800e6ec
 800ad58:	7ff00000 	.word	0x7ff00000
 800ad5c:	0800e6a1 	.word	0x0800e6a1
 800ad60:	0800e82c 	.word	0x0800e82c
 800ad64:	0800eb40 	.word	0x0800eb40
 800ad68:	0800ea20 	.word	0x0800ea20
 800ad6c:	0800e9f8 	.word	0x0800e9f8
 800ad70:	fcb00000 	.word	0xfcb00000
 800ad74:	7ca00000 	.word	0x7ca00000
 800ad78:	7c900000 	.word	0x7c900000
 800ad7c:	7fefffff 	.word	0x7fefffff
 800ad80:	2310      	movs	r3, #16
 800ad82:	0022      	movs	r2, r4
 800ad84:	401a      	ands	r2, r3
 800ad86:	9208      	str	r2, [sp, #32]
 800ad88:	421c      	tst	r4, r3
 800ad8a:	d001      	beq.n	800ad90 <_strtod_l+0x610>
 800ad8c:	335a      	adds	r3, #90	; 0x5a
 800ad8e:	9308      	str	r3, [sp, #32]
 800ad90:	0030      	movs	r0, r6
 800ad92:	0039      	movs	r1, r7
 800ad94:	2300      	movs	r3, #0
 800ad96:	4dc5      	ldr	r5, [pc, #788]	; (800b0ac <_strtod_l+0x92c>)
 800ad98:	2201      	movs	r2, #1
 800ad9a:	4214      	tst	r4, r2
 800ad9c:	d004      	beq.n	800ada8 <_strtod_l+0x628>
 800ad9e:	682a      	ldr	r2, [r5, #0]
 800ada0:	686b      	ldr	r3, [r5, #4]
 800ada2:	f7f6 feff 	bl	8001ba4 <__aeabi_dmul>
 800ada6:	2301      	movs	r3, #1
 800ada8:	1064      	asrs	r4, r4, #1
 800adaa:	3508      	adds	r5, #8
 800adac:	2c00      	cmp	r4, #0
 800adae:	d1f3      	bne.n	800ad98 <_strtod_l+0x618>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <_strtod_l+0x638>
 800adb4:	0006      	movs	r6, r0
 800adb6:	000f      	movs	r7, r1
 800adb8:	9b08      	ldr	r3, [sp, #32]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <_strtod_l+0x65e>
 800adbe:	236b      	movs	r3, #107	; 0x6b
 800adc0:	007a      	lsls	r2, r7, #1
 800adc2:	0d52      	lsrs	r2, r2, #21
 800adc4:	0039      	movs	r1, r7
 800adc6:	1a9b      	subs	r3, r3, r2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	dd08      	ble.n	800adde <_strtod_l+0x65e>
 800adcc:	2b1f      	cmp	r3, #31
 800adce:	dc00      	bgt.n	800add2 <_strtod_l+0x652>
 800add0:	e124      	b.n	800b01c <_strtod_l+0x89c>
 800add2:	2600      	movs	r6, #0
 800add4:	2b34      	cmp	r3, #52	; 0x34
 800add6:	dc00      	bgt.n	800adda <_strtod_l+0x65a>
 800add8:	e119      	b.n	800b00e <_strtod_l+0x88e>
 800adda:	27dc      	movs	r7, #220	; 0xdc
 800addc:	04bf      	lsls	r7, r7, #18
 800adde:	2200      	movs	r2, #0
 800ade0:	2300      	movs	r3, #0
 800ade2:	0030      	movs	r0, r6
 800ade4:	0039      	movs	r1, r7
 800ade6:	f7f5 fb31 	bl	800044c <__aeabi_dcmpeq>
 800adea:	2800      	cmp	r0, #0
 800adec:	d1a0      	bne.n	800ad30 <_strtod_l+0x5b0>
 800adee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	9805      	ldr	r0, [sp, #20]
 800adfa:	f002 f975 	bl	800d0e8 <__s2b>
 800adfe:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d100      	bne.n	800ae06 <_strtod_l+0x686>
 800ae04:	e721      	b.n	800ac4a <_strtod_l+0x4ca>
 800ae06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae08:	9907      	ldr	r1, [sp, #28]
 800ae0a:	17da      	asrs	r2, r3, #31
 800ae0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae0e:	1a5b      	subs	r3, r3, r1
 800ae10:	401a      	ands	r2, r3
 800ae12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae14:	9215      	str	r2, [sp, #84]	; 0x54
 800ae16:	43db      	mvns	r3, r3
 800ae18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae1a:	17db      	asrs	r3, r3, #31
 800ae1c:	401a      	ands	r2, r3
 800ae1e:	2300      	movs	r3, #0
 800ae20:	921a      	str	r2, [sp, #104]	; 0x68
 800ae22:	9306      	str	r3, [sp, #24]
 800ae24:	9307      	str	r3, [sp, #28]
 800ae26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae28:	9805      	ldr	r0, [sp, #20]
 800ae2a:	6859      	ldr	r1, [r3, #4]
 800ae2c:	f002 f8b0 	bl	800cf90 <_Balloc>
 800ae30:	9009      	str	r0, [sp, #36]	; 0x24
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d100      	bne.n	800ae38 <_strtod_l+0x6b8>
 800ae36:	e70d      	b.n	800ac54 <_strtod_l+0x4d4>
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	310c      	adds	r1, #12
 800ae40:	1c9a      	adds	r2, r3, #2
 800ae42:	0092      	lsls	r2, r2, #2
 800ae44:	300c      	adds	r0, #12
 800ae46:	930c      	str	r3, [sp, #48]	; 0x30
 800ae48:	f002 f899 	bl	800cf7e <memcpy>
 800ae4c:	ab22      	add	r3, sp, #136	; 0x88
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	ab21      	add	r3, sp, #132	; 0x84
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	0032      	movs	r2, r6
 800ae56:	003b      	movs	r3, r7
 800ae58:	9805      	ldr	r0, [sp, #20]
 800ae5a:	9612      	str	r6, [sp, #72]	; 0x48
 800ae5c:	9713      	str	r7, [sp, #76]	; 0x4c
 800ae5e:	f002 fc8f 	bl	800d780 <__d2b>
 800ae62:	9020      	str	r0, [sp, #128]	; 0x80
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d100      	bne.n	800ae6a <_strtod_l+0x6ea>
 800ae68:	e6f4      	b.n	800ac54 <_strtod_l+0x4d4>
 800ae6a:	2101      	movs	r1, #1
 800ae6c:	9805      	ldr	r0, [sp, #20]
 800ae6e:	f002 f9cf 	bl	800d210 <__i2b>
 800ae72:	9007      	str	r0, [sp, #28]
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d100      	bne.n	800ae7a <_strtod_l+0x6fa>
 800ae78:	e6ec      	b.n	800ac54 <_strtod_l+0x4d4>
 800ae7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ae7e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ae80:	1ad4      	subs	r4, r2, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	db01      	blt.n	800ae8a <_strtod_l+0x70a>
 800ae86:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800ae88:	195d      	adds	r5, r3, r5
 800ae8a:	9908      	ldr	r1, [sp, #32]
 800ae8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae8e:	1a5b      	subs	r3, r3, r1
 800ae90:	2136      	movs	r1, #54	; 0x36
 800ae92:	189b      	adds	r3, r3, r2
 800ae94:	1a8a      	subs	r2, r1, r2
 800ae96:	4986      	ldr	r1, [pc, #536]	; (800b0b0 <_strtod_l+0x930>)
 800ae98:	2001      	movs	r0, #1
 800ae9a:	468c      	mov	ip, r1
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	9110      	str	r1, [sp, #64]	; 0x40
 800aea2:	9014      	str	r0, [sp, #80]	; 0x50
 800aea4:	4563      	cmp	r3, ip
 800aea6:	da07      	bge.n	800aeb8 <_strtod_l+0x738>
 800aea8:	4661      	mov	r1, ip
 800aeaa:	1ac9      	subs	r1, r1, r3
 800aeac:	1a52      	subs	r2, r2, r1
 800aeae:	291f      	cmp	r1, #31
 800aeb0:	dd00      	ble.n	800aeb4 <_strtod_l+0x734>
 800aeb2:	e0b8      	b.n	800b026 <_strtod_l+0x8a6>
 800aeb4:	4088      	lsls	r0, r1
 800aeb6:	9014      	str	r0, [sp, #80]	; 0x50
 800aeb8:	18ab      	adds	r3, r5, r2
 800aeba:	930c      	str	r3, [sp, #48]	; 0x30
 800aebc:	18a4      	adds	r4, r4, r2
 800aebe:	9b08      	ldr	r3, [sp, #32]
 800aec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aec2:	191c      	adds	r4, r3, r4
 800aec4:	002b      	movs	r3, r5
 800aec6:	4295      	cmp	r5, r2
 800aec8:	dd00      	ble.n	800aecc <_strtod_l+0x74c>
 800aeca:	0013      	movs	r3, r2
 800aecc:	42a3      	cmp	r3, r4
 800aece:	dd00      	ble.n	800aed2 <_strtod_l+0x752>
 800aed0:	0023      	movs	r3, r4
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd04      	ble.n	800aee0 <_strtod_l+0x760>
 800aed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed8:	1ae4      	subs	r4, r4, r3
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	920c      	str	r2, [sp, #48]	; 0x30
 800aede:	1aed      	subs	r5, r5, r3
 800aee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd17      	ble.n	800af16 <_strtod_l+0x796>
 800aee6:	001a      	movs	r2, r3
 800aee8:	9907      	ldr	r1, [sp, #28]
 800aeea:	9805      	ldr	r0, [sp, #20]
 800aeec:	f002 fa56 	bl	800d39c <__pow5mult>
 800aef0:	9007      	str	r0, [sp, #28]
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d100      	bne.n	800aef8 <_strtod_l+0x778>
 800aef6:	e6ad      	b.n	800ac54 <_strtod_l+0x4d4>
 800aef8:	0001      	movs	r1, r0
 800aefa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aefc:	9805      	ldr	r0, [sp, #20]
 800aefe:	f002 f99d 	bl	800d23c <__multiply>
 800af02:	900f      	str	r0, [sp, #60]	; 0x3c
 800af04:	2800      	cmp	r0, #0
 800af06:	d100      	bne.n	800af0a <_strtod_l+0x78a>
 800af08:	e6a4      	b.n	800ac54 <_strtod_l+0x4d4>
 800af0a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800af0c:	9805      	ldr	r0, [sp, #20]
 800af0e:	f002 f883 	bl	800d018 <_Bfree>
 800af12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af14:	9320      	str	r3, [sp, #128]	; 0x80
 800af16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dd00      	ble.n	800af1e <_strtod_l+0x79e>
 800af1c:	e089      	b.n	800b032 <_strtod_l+0x8b2>
 800af1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd08      	ble.n	800af36 <_strtod_l+0x7b6>
 800af24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af28:	9805      	ldr	r0, [sp, #20]
 800af2a:	f002 fa37 	bl	800d39c <__pow5mult>
 800af2e:	9009      	str	r0, [sp, #36]	; 0x24
 800af30:	2800      	cmp	r0, #0
 800af32:	d100      	bne.n	800af36 <_strtod_l+0x7b6>
 800af34:	e68e      	b.n	800ac54 <_strtod_l+0x4d4>
 800af36:	2c00      	cmp	r4, #0
 800af38:	dd08      	ble.n	800af4c <_strtod_l+0x7cc>
 800af3a:	0022      	movs	r2, r4
 800af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af3e:	9805      	ldr	r0, [sp, #20]
 800af40:	f002 fa88 	bl	800d454 <__lshift>
 800af44:	9009      	str	r0, [sp, #36]	; 0x24
 800af46:	2800      	cmp	r0, #0
 800af48:	d100      	bne.n	800af4c <_strtod_l+0x7cc>
 800af4a:	e683      	b.n	800ac54 <_strtod_l+0x4d4>
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	dd08      	ble.n	800af62 <_strtod_l+0x7e2>
 800af50:	002a      	movs	r2, r5
 800af52:	9907      	ldr	r1, [sp, #28]
 800af54:	9805      	ldr	r0, [sp, #20]
 800af56:	f002 fa7d 	bl	800d454 <__lshift>
 800af5a:	9007      	str	r0, [sp, #28]
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d100      	bne.n	800af62 <_strtod_l+0x7e2>
 800af60:	e678      	b.n	800ac54 <_strtod_l+0x4d4>
 800af62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af64:	9920      	ldr	r1, [sp, #128]	; 0x80
 800af66:	9805      	ldr	r0, [sp, #20]
 800af68:	f002 fafe 	bl	800d568 <__mdiff>
 800af6c:	9006      	str	r0, [sp, #24]
 800af6e:	2800      	cmp	r0, #0
 800af70:	d100      	bne.n	800af74 <_strtod_l+0x7f4>
 800af72:	e66f      	b.n	800ac54 <_strtod_l+0x4d4>
 800af74:	2200      	movs	r2, #0
 800af76:	68c3      	ldr	r3, [r0, #12]
 800af78:	9907      	ldr	r1, [sp, #28]
 800af7a:	60c2      	str	r2, [r0, #12]
 800af7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800af7e:	f002 fad7 	bl	800d530 <__mcmp>
 800af82:	2800      	cmp	r0, #0
 800af84:	da5f      	bge.n	800b046 <_strtod_l+0x8c6>
 800af86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af88:	4333      	orrs	r3, r6
 800af8a:	d000      	beq.n	800af8e <_strtod_l+0x80e>
 800af8c:	e08a      	b.n	800b0a4 <_strtod_l+0x924>
 800af8e:	033b      	lsls	r3, r7, #12
 800af90:	d000      	beq.n	800af94 <_strtod_l+0x814>
 800af92:	e087      	b.n	800b0a4 <_strtod_l+0x924>
 800af94:	22d6      	movs	r2, #214	; 0xd6
 800af96:	4b47      	ldr	r3, [pc, #284]	; (800b0b4 <_strtod_l+0x934>)
 800af98:	04d2      	lsls	r2, r2, #19
 800af9a:	403b      	ands	r3, r7
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d800      	bhi.n	800afa2 <_strtod_l+0x822>
 800afa0:	e080      	b.n	800b0a4 <_strtod_l+0x924>
 800afa2:	9b06      	ldr	r3, [sp, #24]
 800afa4:	695b      	ldr	r3, [r3, #20]
 800afa6:	930a      	str	r3, [sp, #40]	; 0x28
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d104      	bne.n	800afb6 <_strtod_l+0x836>
 800afac:	9b06      	ldr	r3, [sp, #24]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	930a      	str	r3, [sp, #40]	; 0x28
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	dd76      	ble.n	800b0a4 <_strtod_l+0x924>
 800afb6:	9906      	ldr	r1, [sp, #24]
 800afb8:	2201      	movs	r2, #1
 800afba:	9805      	ldr	r0, [sp, #20]
 800afbc:	f002 fa4a 	bl	800d454 <__lshift>
 800afc0:	9907      	ldr	r1, [sp, #28]
 800afc2:	9006      	str	r0, [sp, #24]
 800afc4:	f002 fab4 	bl	800d530 <__mcmp>
 800afc8:	2800      	cmp	r0, #0
 800afca:	dd6b      	ble.n	800b0a4 <_strtod_l+0x924>
 800afcc:	9908      	ldr	r1, [sp, #32]
 800afce:	003b      	movs	r3, r7
 800afd0:	4a38      	ldr	r2, [pc, #224]	; (800b0b4 <_strtod_l+0x934>)
 800afd2:	2900      	cmp	r1, #0
 800afd4:	d100      	bne.n	800afd8 <_strtod_l+0x858>
 800afd6:	e092      	b.n	800b0fe <_strtod_l+0x97e>
 800afd8:	0011      	movs	r1, r2
 800afda:	20d6      	movs	r0, #214	; 0xd6
 800afdc:	4039      	ands	r1, r7
 800afde:	04c0      	lsls	r0, r0, #19
 800afe0:	4281      	cmp	r1, r0
 800afe2:	dd00      	ble.n	800afe6 <_strtod_l+0x866>
 800afe4:	e08b      	b.n	800b0fe <_strtod_l+0x97e>
 800afe6:	23dc      	movs	r3, #220	; 0xdc
 800afe8:	049b      	lsls	r3, r3, #18
 800afea:	4299      	cmp	r1, r3
 800afec:	dc00      	bgt.n	800aff0 <_strtod_l+0x870>
 800afee:	e6a4      	b.n	800ad3a <_strtod_l+0x5ba>
 800aff0:	0030      	movs	r0, r6
 800aff2:	0039      	movs	r1, r7
 800aff4:	2200      	movs	r2, #0
 800aff6:	4b30      	ldr	r3, [pc, #192]	; (800b0b8 <_strtod_l+0x938>)
 800aff8:	f7f6 fdd4 	bl	8001ba4 <__aeabi_dmul>
 800affc:	0006      	movs	r6, r0
 800affe:	000f      	movs	r7, r1
 800b000:	4308      	orrs	r0, r1
 800b002:	d000      	beq.n	800b006 <_strtod_l+0x886>
 800b004:	e62f      	b.n	800ac66 <_strtod_l+0x4e6>
 800b006:	2322      	movs	r3, #34	; 0x22
 800b008:	9a05      	ldr	r2, [sp, #20]
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	e62b      	b.n	800ac66 <_strtod_l+0x4e6>
 800b00e:	234b      	movs	r3, #75	; 0x4b
 800b010:	1a9a      	subs	r2, r3, r2
 800b012:	3b4c      	subs	r3, #76	; 0x4c
 800b014:	4093      	lsls	r3, r2
 800b016:	4019      	ands	r1, r3
 800b018:	000f      	movs	r7, r1
 800b01a:	e6e0      	b.n	800adde <_strtod_l+0x65e>
 800b01c:	2201      	movs	r2, #1
 800b01e:	4252      	negs	r2, r2
 800b020:	409a      	lsls	r2, r3
 800b022:	4016      	ands	r6, r2
 800b024:	e6db      	b.n	800adde <_strtod_l+0x65e>
 800b026:	4925      	ldr	r1, [pc, #148]	; (800b0bc <_strtod_l+0x93c>)
 800b028:	1acb      	subs	r3, r1, r3
 800b02a:	0001      	movs	r1, r0
 800b02c:	4099      	lsls	r1, r3
 800b02e:	9110      	str	r1, [sp, #64]	; 0x40
 800b030:	e741      	b.n	800aeb6 <_strtod_l+0x736>
 800b032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b034:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b036:	9805      	ldr	r0, [sp, #20]
 800b038:	f002 fa0c 	bl	800d454 <__lshift>
 800b03c:	9020      	str	r0, [sp, #128]	; 0x80
 800b03e:	2800      	cmp	r0, #0
 800b040:	d000      	beq.n	800b044 <_strtod_l+0x8c4>
 800b042:	e76c      	b.n	800af1e <_strtod_l+0x79e>
 800b044:	e606      	b.n	800ac54 <_strtod_l+0x4d4>
 800b046:	970c      	str	r7, [sp, #48]	; 0x30
 800b048:	2800      	cmp	r0, #0
 800b04a:	d176      	bne.n	800b13a <_strtod_l+0x9ba>
 800b04c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b04e:	033b      	lsls	r3, r7, #12
 800b050:	0b1b      	lsrs	r3, r3, #12
 800b052:	2a00      	cmp	r2, #0
 800b054:	d038      	beq.n	800b0c8 <_strtod_l+0x948>
 800b056:	4a1a      	ldr	r2, [pc, #104]	; (800b0c0 <_strtod_l+0x940>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d138      	bne.n	800b0ce <_strtod_l+0x94e>
 800b05c:	2201      	movs	r2, #1
 800b05e:	9b08      	ldr	r3, [sp, #32]
 800b060:	4252      	negs	r2, r2
 800b062:	0031      	movs	r1, r6
 800b064:	0010      	movs	r0, r2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00b      	beq.n	800b082 <_strtod_l+0x902>
 800b06a:	24d4      	movs	r4, #212	; 0xd4
 800b06c:	4b11      	ldr	r3, [pc, #68]	; (800b0b4 <_strtod_l+0x934>)
 800b06e:	0010      	movs	r0, r2
 800b070:	403b      	ands	r3, r7
 800b072:	04e4      	lsls	r4, r4, #19
 800b074:	42a3      	cmp	r3, r4
 800b076:	d804      	bhi.n	800b082 <_strtod_l+0x902>
 800b078:	306c      	adds	r0, #108	; 0x6c
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	1ac3      	subs	r3, r0, r3
 800b07e:	409a      	lsls	r2, r3
 800b080:	0010      	movs	r0, r2
 800b082:	4281      	cmp	r1, r0
 800b084:	d123      	bne.n	800b0ce <_strtod_l+0x94e>
 800b086:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <_strtod_l+0x944>)
 800b088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d102      	bne.n	800b094 <_strtod_l+0x914>
 800b08e:	1c4b      	adds	r3, r1, #1
 800b090:	d100      	bne.n	800b094 <_strtod_l+0x914>
 800b092:	e5df      	b.n	800ac54 <_strtod_l+0x4d4>
 800b094:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <_strtod_l+0x934>)
 800b096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b098:	2600      	movs	r6, #0
 800b09a:	401a      	ands	r2, r3
 800b09c:	0013      	movs	r3, r2
 800b09e:	2280      	movs	r2, #128	; 0x80
 800b0a0:	0352      	lsls	r2, r2, #13
 800b0a2:	189f      	adds	r7, r3, r2
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1a2      	bne.n	800aff0 <_strtod_l+0x870>
 800b0aa:	e5dc      	b.n	800ac66 <_strtod_l+0x4e6>
 800b0ac:	0800e700 	.word	0x0800e700
 800b0b0:	fffffc02 	.word	0xfffffc02
 800b0b4:	7ff00000 	.word	0x7ff00000
 800b0b8:	39500000 	.word	0x39500000
 800b0bc:	fffffbe2 	.word	0xfffffbe2
 800b0c0:	000fffff 	.word	0x000fffff
 800b0c4:	7fefffff 	.word	0x7fefffff
 800b0c8:	4333      	orrs	r3, r6
 800b0ca:	d100      	bne.n	800b0ce <_strtod_l+0x94e>
 800b0cc:	e77e      	b.n	800afcc <_strtod_l+0x84c>
 800b0ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01d      	beq.n	800b110 <_strtod_l+0x990>
 800b0d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b0d8:	4213      	tst	r3, r2
 800b0da:	d0e3      	beq.n	800b0a4 <_strtod_l+0x924>
 800b0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0de:	0030      	movs	r0, r6
 800b0e0:	0039      	movs	r1, r7
 800b0e2:	9a08      	ldr	r2, [sp, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d017      	beq.n	800b118 <_strtod_l+0x998>
 800b0e8:	f7ff fb32 	bl	800a750 <sulp>
 800b0ec:	0002      	movs	r2, r0
 800b0ee:	000b      	movs	r3, r1
 800b0f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b0f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b0f4:	f7f5 fe18 	bl	8000d28 <__aeabi_dadd>
 800b0f8:	0006      	movs	r6, r0
 800b0fa:	000f      	movs	r7, r1
 800b0fc:	e7d2      	b.n	800b0a4 <_strtod_l+0x924>
 800b0fe:	2601      	movs	r6, #1
 800b100:	4013      	ands	r3, r2
 800b102:	4a99      	ldr	r2, [pc, #612]	; (800b368 <_strtod_l+0xbe8>)
 800b104:	4276      	negs	r6, r6
 800b106:	189b      	adds	r3, r3, r2
 800b108:	4a98      	ldr	r2, [pc, #608]	; (800b36c <_strtod_l+0xbec>)
 800b10a:	431a      	orrs	r2, r3
 800b10c:	0017      	movs	r7, r2
 800b10e:	e7c9      	b.n	800b0a4 <_strtod_l+0x924>
 800b110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b112:	4233      	tst	r3, r6
 800b114:	d0c6      	beq.n	800b0a4 <_strtod_l+0x924>
 800b116:	e7e1      	b.n	800b0dc <_strtod_l+0x95c>
 800b118:	f7ff fb1a 	bl	800a750 <sulp>
 800b11c:	0002      	movs	r2, r0
 800b11e:	000b      	movs	r3, r1
 800b120:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b122:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b124:	f7f6 ffaa 	bl	800207c <__aeabi_dsub>
 800b128:	2200      	movs	r2, #0
 800b12a:	2300      	movs	r3, #0
 800b12c:	0006      	movs	r6, r0
 800b12e:	000f      	movs	r7, r1
 800b130:	f7f5 f98c 	bl	800044c <__aeabi_dcmpeq>
 800b134:	2800      	cmp	r0, #0
 800b136:	d0b5      	beq.n	800b0a4 <_strtod_l+0x924>
 800b138:	e5ff      	b.n	800ad3a <_strtod_l+0x5ba>
 800b13a:	9907      	ldr	r1, [sp, #28]
 800b13c:	9806      	ldr	r0, [sp, #24]
 800b13e:	f002 fb83 	bl	800d848 <__ratio>
 800b142:	2380      	movs	r3, #128	; 0x80
 800b144:	2200      	movs	r2, #0
 800b146:	05db      	lsls	r3, r3, #23
 800b148:	0004      	movs	r4, r0
 800b14a:	000d      	movs	r5, r1
 800b14c:	f7f5 f98e 	bl	800046c <__aeabi_dcmple>
 800b150:	2800      	cmp	r0, #0
 800b152:	d075      	beq.n	800b240 <_strtod_l+0xac0>
 800b154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b156:	2b00      	cmp	r3, #0
 800b158:	d047      	beq.n	800b1ea <_strtod_l+0xa6a>
 800b15a:	2300      	movs	r3, #0
 800b15c:	4c84      	ldr	r4, [pc, #528]	; (800b370 <_strtod_l+0xbf0>)
 800b15e:	2500      	movs	r5, #0
 800b160:	9310      	str	r3, [sp, #64]	; 0x40
 800b162:	9411      	str	r4, [sp, #68]	; 0x44
 800b164:	4c82      	ldr	r4, [pc, #520]	; (800b370 <_strtod_l+0xbf0>)
 800b166:	4a83      	ldr	r2, [pc, #524]	; (800b374 <_strtod_l+0xbf4>)
 800b168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b16a:	4013      	ands	r3, r2
 800b16c:	9314      	str	r3, [sp, #80]	; 0x50
 800b16e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b170:	4b81      	ldr	r3, [pc, #516]	; (800b378 <_strtod_l+0xbf8>)
 800b172:	429a      	cmp	r2, r3
 800b174:	d000      	beq.n	800b178 <_strtod_l+0x9f8>
 800b176:	e0ac      	b.n	800b2d2 <_strtod_l+0xb52>
 800b178:	4a80      	ldr	r2, [pc, #512]	; (800b37c <_strtod_l+0xbfc>)
 800b17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b17c:	4694      	mov	ip, r2
 800b17e:	4463      	add	r3, ip
 800b180:	001f      	movs	r7, r3
 800b182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b184:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b186:	0030      	movs	r0, r6
 800b188:	0039      	movs	r1, r7
 800b18a:	920c      	str	r2, [sp, #48]	; 0x30
 800b18c:	930d      	str	r3, [sp, #52]	; 0x34
 800b18e:	f002 fa83 	bl	800d698 <__ulp>
 800b192:	0002      	movs	r2, r0
 800b194:	000b      	movs	r3, r1
 800b196:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b19a:	f7f6 fd03 	bl	8001ba4 <__aeabi_dmul>
 800b19e:	0032      	movs	r2, r6
 800b1a0:	003b      	movs	r3, r7
 800b1a2:	f7f5 fdc1 	bl	8000d28 <__aeabi_dadd>
 800b1a6:	4a73      	ldr	r2, [pc, #460]	; (800b374 <_strtod_l+0xbf4>)
 800b1a8:	4b75      	ldr	r3, [pc, #468]	; (800b380 <_strtod_l+0xc00>)
 800b1aa:	0006      	movs	r6, r0
 800b1ac:	400a      	ands	r2, r1
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d95e      	bls.n	800b270 <_strtod_l+0xaf0>
 800b1b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b1b4:	4b73      	ldr	r3, [pc, #460]	; (800b384 <_strtod_l+0xc04>)
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d103      	bne.n	800b1c2 <_strtod_l+0xa42>
 800b1ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1bc:	3301      	adds	r3, #1
 800b1be:	d100      	bne.n	800b1c2 <_strtod_l+0xa42>
 800b1c0:	e548      	b.n	800ac54 <_strtod_l+0x4d4>
 800b1c2:	2601      	movs	r6, #1
 800b1c4:	4f6f      	ldr	r7, [pc, #444]	; (800b384 <_strtod_l+0xc04>)
 800b1c6:	4276      	negs	r6, r6
 800b1c8:	9920      	ldr	r1, [sp, #128]	; 0x80
 800b1ca:	9805      	ldr	r0, [sp, #20]
 800b1cc:	f001 ff24 	bl	800d018 <_Bfree>
 800b1d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1d2:	9805      	ldr	r0, [sp, #20]
 800b1d4:	f001 ff20 	bl	800d018 <_Bfree>
 800b1d8:	9907      	ldr	r1, [sp, #28]
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	f001 ff1c 	bl	800d018 <_Bfree>
 800b1e0:	9906      	ldr	r1, [sp, #24]
 800b1e2:	9805      	ldr	r0, [sp, #20]
 800b1e4:	f001 ff18 	bl	800d018 <_Bfree>
 800b1e8:	e61d      	b.n	800ae26 <_strtod_l+0x6a6>
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	d11c      	bne.n	800b228 <_strtod_l+0xaa8>
 800b1ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f0:	031b      	lsls	r3, r3, #12
 800b1f2:	d11f      	bne.n	800b234 <_strtod_l+0xab4>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	0020      	movs	r0, r4
 800b1f8:	0029      	movs	r1, r5
 800b1fa:	4b5d      	ldr	r3, [pc, #372]	; (800b370 <_strtod_l+0xbf0>)
 800b1fc:	f7f5 f92c 	bl	8000458 <__aeabi_dcmplt>
 800b200:	2800      	cmp	r0, #0
 800b202:	d11a      	bne.n	800b23a <_strtod_l+0xaba>
 800b204:	0020      	movs	r0, r4
 800b206:	0029      	movs	r1, r5
 800b208:	2200      	movs	r2, #0
 800b20a:	4b5f      	ldr	r3, [pc, #380]	; (800b388 <_strtod_l+0xc08>)
 800b20c:	f7f6 fcca 	bl	8001ba4 <__aeabi_dmul>
 800b210:	0005      	movs	r5, r0
 800b212:	000c      	movs	r4, r1
 800b214:	2380      	movs	r3, #128	; 0x80
 800b216:	061b      	lsls	r3, r3, #24
 800b218:	18e3      	adds	r3, r4, r3
 800b21a:	951c      	str	r5, [sp, #112]	; 0x70
 800b21c:	931d      	str	r3, [sp, #116]	; 0x74
 800b21e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b222:	9210      	str	r2, [sp, #64]	; 0x40
 800b224:	9311      	str	r3, [sp, #68]	; 0x44
 800b226:	e79e      	b.n	800b166 <_strtod_l+0x9e6>
 800b228:	2e01      	cmp	r6, #1
 800b22a:	d103      	bne.n	800b234 <_strtod_l+0xab4>
 800b22c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d100      	bne.n	800b234 <_strtod_l+0xab4>
 800b232:	e582      	b.n	800ad3a <_strtod_l+0x5ba>
 800b234:	2300      	movs	r3, #0
 800b236:	4c55      	ldr	r4, [pc, #340]	; (800b38c <_strtod_l+0xc0c>)
 800b238:	e791      	b.n	800b15e <_strtod_l+0x9de>
 800b23a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b23c:	4c52      	ldr	r4, [pc, #328]	; (800b388 <_strtod_l+0xc08>)
 800b23e:	e7e9      	b.n	800b214 <_strtod_l+0xa94>
 800b240:	2200      	movs	r2, #0
 800b242:	0020      	movs	r0, r4
 800b244:	0029      	movs	r1, r5
 800b246:	4b50      	ldr	r3, [pc, #320]	; (800b388 <_strtod_l+0xc08>)
 800b248:	f7f6 fcac 	bl	8001ba4 <__aeabi_dmul>
 800b24c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b24e:	0005      	movs	r5, r0
 800b250:	000b      	movs	r3, r1
 800b252:	000c      	movs	r4, r1
 800b254:	2a00      	cmp	r2, #0
 800b256:	d107      	bne.n	800b268 <_strtod_l+0xae8>
 800b258:	2280      	movs	r2, #128	; 0x80
 800b25a:	0612      	lsls	r2, r2, #24
 800b25c:	188b      	adds	r3, r1, r2
 800b25e:	9016      	str	r0, [sp, #88]	; 0x58
 800b260:	9317      	str	r3, [sp, #92]	; 0x5c
 800b262:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b266:	e7dc      	b.n	800b222 <_strtod_l+0xaa2>
 800b268:	0002      	movs	r2, r0
 800b26a:	9216      	str	r2, [sp, #88]	; 0x58
 800b26c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b26e:	e7f8      	b.n	800b262 <_strtod_l+0xae2>
 800b270:	23d4      	movs	r3, #212	; 0xd4
 800b272:	049b      	lsls	r3, r3, #18
 800b274:	18cf      	adds	r7, r1, r3
 800b276:	9b08      	ldr	r3, [sp, #32]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1a5      	bne.n	800b1c8 <_strtod_l+0xa48>
 800b27c:	4b3d      	ldr	r3, [pc, #244]	; (800b374 <_strtod_l+0xbf4>)
 800b27e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b280:	403b      	ands	r3, r7
 800b282:	429a      	cmp	r2, r3
 800b284:	d1a0      	bne.n	800b1c8 <_strtod_l+0xa48>
 800b286:	0028      	movs	r0, r5
 800b288:	0021      	movs	r1, r4
 800b28a:	f7f5 f979 	bl	8000580 <__aeabi_d2lz>
 800b28e:	f7f5 f9b3 	bl	80005f8 <__aeabi_l2d>
 800b292:	0002      	movs	r2, r0
 800b294:	000b      	movs	r3, r1
 800b296:	0028      	movs	r0, r5
 800b298:	0021      	movs	r1, r4
 800b29a:	f7f6 feef 	bl	800207c <__aeabi_dsub>
 800b29e:	033b      	lsls	r3, r7, #12
 800b2a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2a2:	0b1b      	lsrs	r3, r3, #12
 800b2a4:	4333      	orrs	r3, r6
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	0004      	movs	r4, r0
 800b2aa:	000d      	movs	r5, r1
 800b2ac:	4a38      	ldr	r2, [pc, #224]	; (800b390 <_strtod_l+0xc10>)
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d055      	beq.n	800b35e <_strtod_l+0xbde>
 800b2b2:	4b38      	ldr	r3, [pc, #224]	; (800b394 <_strtod_l+0xc14>)
 800b2b4:	f7f5 f8d0 	bl	8000458 <__aeabi_dcmplt>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d000      	beq.n	800b2be <_strtod_l+0xb3e>
 800b2bc:	e4d3      	b.n	800ac66 <_strtod_l+0x4e6>
 800b2be:	0020      	movs	r0, r4
 800b2c0:	0029      	movs	r1, r5
 800b2c2:	4a35      	ldr	r2, [pc, #212]	; (800b398 <_strtod_l+0xc18>)
 800b2c4:	4b30      	ldr	r3, [pc, #192]	; (800b388 <_strtod_l+0xc08>)
 800b2c6:	f7f5 f8db 	bl	8000480 <__aeabi_dcmpgt>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d100      	bne.n	800b2d0 <_strtod_l+0xb50>
 800b2ce:	e77b      	b.n	800b1c8 <_strtod_l+0xa48>
 800b2d0:	e4c9      	b.n	800ac66 <_strtod_l+0x4e6>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02b      	beq.n	800b330 <_strtod_l+0xbb0>
 800b2d8:	23d4      	movs	r3, #212	; 0xd4
 800b2da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2dc:	04db      	lsls	r3, r3, #19
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d826      	bhi.n	800b330 <_strtod_l+0xbb0>
 800b2e2:	0028      	movs	r0, r5
 800b2e4:	0021      	movs	r1, r4
 800b2e6:	4a2d      	ldr	r2, [pc, #180]	; (800b39c <_strtod_l+0xc1c>)
 800b2e8:	4b2d      	ldr	r3, [pc, #180]	; (800b3a0 <_strtod_l+0xc20>)
 800b2ea:	f7f5 f8bf 	bl	800046c <__aeabi_dcmple>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d017      	beq.n	800b322 <_strtod_l+0xba2>
 800b2f2:	0028      	movs	r0, r5
 800b2f4:	0021      	movs	r1, r4
 800b2f6:	f7f5 f925 	bl	8000544 <__aeabi_d2uiz>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d100      	bne.n	800b300 <_strtod_l+0xb80>
 800b2fe:	3001      	adds	r0, #1
 800b300:	f7f7 fad2 	bl	80028a8 <__aeabi_ui2d>
 800b304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b306:	0005      	movs	r5, r0
 800b308:	000b      	movs	r3, r1
 800b30a:	000c      	movs	r4, r1
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	d122      	bne.n	800b356 <_strtod_l+0xbd6>
 800b310:	2280      	movs	r2, #128	; 0x80
 800b312:	0612      	lsls	r2, r2, #24
 800b314:	188b      	adds	r3, r1, r2
 800b316:	9018      	str	r0, [sp, #96]	; 0x60
 800b318:	9319      	str	r3, [sp, #100]	; 0x64
 800b31a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b31e:	9210      	str	r2, [sp, #64]	; 0x40
 800b320:	9311      	str	r3, [sp, #68]	; 0x44
 800b322:	22d6      	movs	r2, #214	; 0xd6
 800b324:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b326:	04d2      	lsls	r2, r2, #19
 800b328:	189b      	adds	r3, r3, r2
 800b32a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b32c:	1a9b      	subs	r3, r3, r2
 800b32e:	9311      	str	r3, [sp, #68]	; 0x44
 800b330:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b332:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b334:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800b336:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800b338:	f002 f9ae 	bl	800d698 <__ulp>
 800b33c:	0002      	movs	r2, r0
 800b33e:	000b      	movs	r3, r1
 800b340:	0030      	movs	r0, r6
 800b342:	0039      	movs	r1, r7
 800b344:	f7f6 fc2e 	bl	8001ba4 <__aeabi_dmul>
 800b348:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b34a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b34c:	f7f5 fcec 	bl	8000d28 <__aeabi_dadd>
 800b350:	0006      	movs	r6, r0
 800b352:	000f      	movs	r7, r1
 800b354:	e78f      	b.n	800b276 <_strtod_l+0xaf6>
 800b356:	0002      	movs	r2, r0
 800b358:	9218      	str	r2, [sp, #96]	; 0x60
 800b35a:	9319      	str	r3, [sp, #100]	; 0x64
 800b35c:	e7dd      	b.n	800b31a <_strtod_l+0xb9a>
 800b35e:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <_strtod_l+0xc24>)
 800b360:	f7f5 f87a 	bl	8000458 <__aeabi_dcmplt>
 800b364:	e7b1      	b.n	800b2ca <_strtod_l+0xb4a>
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	fff00000 	.word	0xfff00000
 800b36c:	000fffff 	.word	0x000fffff
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	7ff00000 	.word	0x7ff00000
 800b378:	7fe00000 	.word	0x7fe00000
 800b37c:	fcb00000 	.word	0xfcb00000
 800b380:	7c9fffff 	.word	0x7c9fffff
 800b384:	7fefffff 	.word	0x7fefffff
 800b388:	3fe00000 	.word	0x3fe00000
 800b38c:	bff00000 	.word	0xbff00000
 800b390:	94a03595 	.word	0x94a03595
 800b394:	3fdfffff 	.word	0x3fdfffff
 800b398:	35afe535 	.word	0x35afe535
 800b39c:	ffc00000 	.word	0xffc00000
 800b3a0:	41dfffff 	.word	0x41dfffff
 800b3a4:	3fcfffff 	.word	0x3fcfffff

0800b3a8 <_strtod_r>:
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	4b02      	ldr	r3, [pc, #8]	; (800b3b4 <_strtod_r+0xc>)
 800b3ac:	f7ff f9e8 	bl	800a780 <_strtod_l>
 800b3b0:	bd10      	pop	{r4, pc}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	20000074 	.word	0x20000074

0800b3b8 <_strtol_l.constprop.0>:
 800b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	001e      	movs	r6, r3
 800b3be:	9005      	str	r0, [sp, #20]
 800b3c0:	9101      	str	r1, [sp, #4]
 800b3c2:	9202      	str	r2, [sp, #8]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d045      	beq.n	800b454 <_strtol_l.constprop.0+0x9c>
 800b3c8:	000b      	movs	r3, r1
 800b3ca:	2e24      	cmp	r6, #36	; 0x24
 800b3cc:	d842      	bhi.n	800b454 <_strtol_l.constprop.0+0x9c>
 800b3ce:	4a3f      	ldr	r2, [pc, #252]	; (800b4cc <_strtol_l.constprop.0+0x114>)
 800b3d0:	2108      	movs	r1, #8
 800b3d2:	4694      	mov	ip, r2
 800b3d4:	001a      	movs	r2, r3
 800b3d6:	4660      	mov	r0, ip
 800b3d8:	7814      	ldrb	r4, [r2, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	5d00      	ldrb	r0, [r0, r4]
 800b3de:	001d      	movs	r5, r3
 800b3e0:	0007      	movs	r7, r0
 800b3e2:	400f      	ands	r7, r1
 800b3e4:	4208      	tst	r0, r1
 800b3e6:	d1f5      	bne.n	800b3d4 <_strtol_l.constprop.0+0x1c>
 800b3e8:	2c2d      	cmp	r4, #45	; 0x2d
 800b3ea:	d13a      	bne.n	800b462 <_strtol_l.constprop.0+0xaa>
 800b3ec:	2701      	movs	r7, #1
 800b3ee:	781c      	ldrb	r4, [r3, #0]
 800b3f0:	1c95      	adds	r5, r2, #2
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	d065      	beq.n	800b4c2 <_strtol_l.constprop.0+0x10a>
 800b3f6:	2e10      	cmp	r6, #16
 800b3f8:	d109      	bne.n	800b40e <_strtol_l.constprop.0+0x56>
 800b3fa:	2c30      	cmp	r4, #48	; 0x30
 800b3fc:	d107      	bne.n	800b40e <_strtol_l.constprop.0+0x56>
 800b3fe:	2220      	movs	r2, #32
 800b400:	782b      	ldrb	r3, [r5, #0]
 800b402:	4393      	bics	r3, r2
 800b404:	2b58      	cmp	r3, #88	; 0x58
 800b406:	d157      	bne.n	800b4b8 <_strtol_l.constprop.0+0x100>
 800b408:	2610      	movs	r6, #16
 800b40a:	786c      	ldrb	r4, [r5, #1]
 800b40c:	3502      	adds	r5, #2
 800b40e:	4b30      	ldr	r3, [pc, #192]	; (800b4d0 <_strtol_l.constprop.0+0x118>)
 800b410:	0031      	movs	r1, r6
 800b412:	18fb      	adds	r3, r7, r3
 800b414:	0018      	movs	r0, r3
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	f7f4 ff18 	bl	800024c <__aeabi_uidivmod>
 800b41c:	2300      	movs	r3, #0
 800b41e:	2201      	movs	r2, #1
 800b420:	4684      	mov	ip, r0
 800b422:	0018      	movs	r0, r3
 800b424:	9104      	str	r1, [sp, #16]
 800b426:	4252      	negs	r2, r2
 800b428:	0021      	movs	r1, r4
 800b42a:	3930      	subs	r1, #48	; 0x30
 800b42c:	2909      	cmp	r1, #9
 800b42e:	d81d      	bhi.n	800b46c <_strtol_l.constprop.0+0xb4>
 800b430:	000c      	movs	r4, r1
 800b432:	42a6      	cmp	r6, r4
 800b434:	dd28      	ble.n	800b488 <_strtol_l.constprop.0+0xd0>
 800b436:	2b00      	cmp	r3, #0
 800b438:	db24      	blt.n	800b484 <_strtol_l.constprop.0+0xcc>
 800b43a:	0013      	movs	r3, r2
 800b43c:	4584      	cmp	ip, r0
 800b43e:	d306      	bcc.n	800b44e <_strtol_l.constprop.0+0x96>
 800b440:	d102      	bne.n	800b448 <_strtol_l.constprop.0+0x90>
 800b442:	9904      	ldr	r1, [sp, #16]
 800b444:	42a1      	cmp	r1, r4
 800b446:	db02      	blt.n	800b44e <_strtol_l.constprop.0+0x96>
 800b448:	2301      	movs	r3, #1
 800b44a:	4370      	muls	r0, r6
 800b44c:	1820      	adds	r0, r4, r0
 800b44e:	782c      	ldrb	r4, [r5, #0]
 800b450:	3501      	adds	r5, #1
 800b452:	e7e9      	b.n	800b428 <_strtol_l.constprop.0+0x70>
 800b454:	f7fe fa1a 	bl	800988c <__errno>
 800b458:	2316      	movs	r3, #22
 800b45a:	6003      	str	r3, [r0, #0]
 800b45c:	2000      	movs	r0, #0
 800b45e:	b007      	add	sp, #28
 800b460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b462:	2c2b      	cmp	r4, #43	; 0x2b
 800b464:	d1c5      	bne.n	800b3f2 <_strtol_l.constprop.0+0x3a>
 800b466:	781c      	ldrb	r4, [r3, #0]
 800b468:	1c95      	adds	r5, r2, #2
 800b46a:	e7c2      	b.n	800b3f2 <_strtol_l.constprop.0+0x3a>
 800b46c:	0021      	movs	r1, r4
 800b46e:	3941      	subs	r1, #65	; 0x41
 800b470:	2919      	cmp	r1, #25
 800b472:	d801      	bhi.n	800b478 <_strtol_l.constprop.0+0xc0>
 800b474:	3c37      	subs	r4, #55	; 0x37
 800b476:	e7dc      	b.n	800b432 <_strtol_l.constprop.0+0x7a>
 800b478:	0021      	movs	r1, r4
 800b47a:	3961      	subs	r1, #97	; 0x61
 800b47c:	2919      	cmp	r1, #25
 800b47e:	d803      	bhi.n	800b488 <_strtol_l.constprop.0+0xd0>
 800b480:	3c57      	subs	r4, #87	; 0x57
 800b482:	e7d6      	b.n	800b432 <_strtol_l.constprop.0+0x7a>
 800b484:	0013      	movs	r3, r2
 800b486:	e7e2      	b.n	800b44e <_strtol_l.constprop.0+0x96>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	da09      	bge.n	800b4a0 <_strtol_l.constprop.0+0xe8>
 800b48c:	2322      	movs	r3, #34	; 0x22
 800b48e:	9a05      	ldr	r2, [sp, #20]
 800b490:	9803      	ldr	r0, [sp, #12]
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	9b02      	ldr	r3, [sp, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0e1      	beq.n	800b45e <_strtol_l.constprop.0+0xa6>
 800b49a:	1e6b      	subs	r3, r5, #1
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	e007      	b.n	800b4b0 <_strtol_l.constprop.0+0xf8>
 800b4a0:	2f00      	cmp	r7, #0
 800b4a2:	d000      	beq.n	800b4a6 <_strtol_l.constprop.0+0xee>
 800b4a4:	4240      	negs	r0, r0
 800b4a6:	9a02      	ldr	r2, [sp, #8]
 800b4a8:	2a00      	cmp	r2, #0
 800b4aa:	d0d8      	beq.n	800b45e <_strtol_l.constprop.0+0xa6>
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d1f4      	bne.n	800b49a <_strtol_l.constprop.0+0xe2>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	9a01      	ldr	r2, [sp, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	e7d2      	b.n	800b45e <_strtol_l.constprop.0+0xa6>
 800b4b8:	2430      	movs	r4, #48	; 0x30
 800b4ba:	2e00      	cmp	r6, #0
 800b4bc:	d1a7      	bne.n	800b40e <_strtol_l.constprop.0+0x56>
 800b4be:	3608      	adds	r6, #8
 800b4c0:	e7a5      	b.n	800b40e <_strtol_l.constprop.0+0x56>
 800b4c2:	2c30      	cmp	r4, #48	; 0x30
 800b4c4:	d09b      	beq.n	800b3fe <_strtol_l.constprop.0+0x46>
 800b4c6:	260a      	movs	r6, #10
 800b4c8:	e7a1      	b.n	800b40e <_strtol_l.constprop.0+0x56>
 800b4ca:	46c0      	nop			; (mov r8, r8)
 800b4cc:	0800e729 	.word	0x0800e729
 800b4d0:	7fffffff 	.word	0x7fffffff

0800b4d4 <_strtol_r>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	f7ff ff6f 	bl	800b3b8 <_strtol_l.constprop.0>
 800b4da:	bd10      	pop	{r4, pc}

0800b4dc <__swbuf_r>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	0005      	movs	r5, r0
 800b4e0:	000e      	movs	r6, r1
 800b4e2:	0014      	movs	r4, r2
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d004      	beq.n	800b4f2 <__swbuf_r+0x16>
 800b4e8:	6983      	ldr	r3, [r0, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <__swbuf_r+0x16>
 800b4ee:	f001 f897 	bl	800c620 <__sinit>
 800b4f2:	4b22      	ldr	r3, [pc, #136]	; (800b57c <__swbuf_r+0xa0>)
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d12e      	bne.n	800b556 <__swbuf_r+0x7a>
 800b4f8:	686c      	ldr	r4, [r5, #4]
 800b4fa:	69a3      	ldr	r3, [r4, #24]
 800b4fc:	60a3      	str	r3, [r4, #8]
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	071b      	lsls	r3, r3, #28
 800b502:	d532      	bpl.n	800b56a <__swbuf_r+0x8e>
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d02f      	beq.n	800b56a <__swbuf_r+0x8e>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	6922      	ldr	r2, [r4, #16]
 800b50e:	b2f7      	uxtb	r7, r6
 800b510:	1a98      	subs	r0, r3, r2
 800b512:	6963      	ldr	r3, [r4, #20]
 800b514:	b2f6      	uxtb	r6, r6
 800b516:	4283      	cmp	r3, r0
 800b518:	dc05      	bgt.n	800b526 <__swbuf_r+0x4a>
 800b51a:	0021      	movs	r1, r4
 800b51c:	0028      	movs	r0, r5
 800b51e:	f000 ffdd 	bl	800c4dc <_fflush_r>
 800b522:	2800      	cmp	r0, #0
 800b524:	d127      	bne.n	800b576 <__swbuf_r+0x9a>
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	3001      	adds	r0, #1
 800b52a:	3b01      	subs	r3, #1
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	6022      	str	r2, [r4, #0]
 800b534:	701f      	strb	r7, [r3, #0]
 800b536:	6963      	ldr	r3, [r4, #20]
 800b538:	4283      	cmp	r3, r0
 800b53a:	d004      	beq.n	800b546 <__swbuf_r+0x6a>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	07db      	lsls	r3, r3, #31
 800b540:	d507      	bpl.n	800b552 <__swbuf_r+0x76>
 800b542:	2e0a      	cmp	r6, #10
 800b544:	d105      	bne.n	800b552 <__swbuf_r+0x76>
 800b546:	0021      	movs	r1, r4
 800b548:	0028      	movs	r0, r5
 800b54a:	f000 ffc7 	bl	800c4dc <_fflush_r>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d111      	bne.n	800b576 <__swbuf_r+0x9a>
 800b552:	0030      	movs	r0, r6
 800b554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b556:	4b0a      	ldr	r3, [pc, #40]	; (800b580 <__swbuf_r+0xa4>)
 800b558:	429c      	cmp	r4, r3
 800b55a:	d101      	bne.n	800b560 <__swbuf_r+0x84>
 800b55c:	68ac      	ldr	r4, [r5, #8]
 800b55e:	e7cc      	b.n	800b4fa <__swbuf_r+0x1e>
 800b560:	4b08      	ldr	r3, [pc, #32]	; (800b584 <__swbuf_r+0xa8>)
 800b562:	429c      	cmp	r4, r3
 800b564:	d1c9      	bne.n	800b4fa <__swbuf_r+0x1e>
 800b566:	68ec      	ldr	r4, [r5, #12]
 800b568:	e7c7      	b.n	800b4fa <__swbuf_r+0x1e>
 800b56a:	0021      	movs	r1, r4
 800b56c:	0028      	movs	r0, r5
 800b56e:	f000 f80b 	bl	800b588 <__swsetup_r>
 800b572:	2800      	cmp	r0, #0
 800b574:	d0c9      	beq.n	800b50a <__swbuf_r+0x2e>
 800b576:	2601      	movs	r6, #1
 800b578:	4276      	negs	r6, r6
 800b57a:	e7ea      	b.n	800b552 <__swbuf_r+0x76>
 800b57c:	0800e8dc 	.word	0x0800e8dc
 800b580:	0800e8fc 	.word	0x0800e8fc
 800b584:	0800e8bc 	.word	0x0800e8bc

0800b588 <__swsetup_r>:
 800b588:	4b37      	ldr	r3, [pc, #220]	; (800b668 <__swsetup_r+0xe0>)
 800b58a:	b570      	push	{r4, r5, r6, lr}
 800b58c:	681d      	ldr	r5, [r3, #0]
 800b58e:	0006      	movs	r6, r0
 800b590:	000c      	movs	r4, r1
 800b592:	2d00      	cmp	r5, #0
 800b594:	d005      	beq.n	800b5a2 <__swsetup_r+0x1a>
 800b596:	69ab      	ldr	r3, [r5, #24]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d102      	bne.n	800b5a2 <__swsetup_r+0x1a>
 800b59c:	0028      	movs	r0, r5
 800b59e:	f001 f83f 	bl	800c620 <__sinit>
 800b5a2:	4b32      	ldr	r3, [pc, #200]	; (800b66c <__swsetup_r+0xe4>)
 800b5a4:	429c      	cmp	r4, r3
 800b5a6:	d10f      	bne.n	800b5c8 <__swsetup_r+0x40>
 800b5a8:	686c      	ldr	r4, [r5, #4]
 800b5aa:	230c      	movs	r3, #12
 800b5ac:	5ee2      	ldrsh	r2, [r4, r3]
 800b5ae:	b293      	uxth	r3, r2
 800b5b0:	0711      	lsls	r1, r2, #28
 800b5b2:	d42d      	bmi.n	800b610 <__swsetup_r+0x88>
 800b5b4:	06d9      	lsls	r1, r3, #27
 800b5b6:	d411      	bmi.n	800b5dc <__swsetup_r+0x54>
 800b5b8:	2309      	movs	r3, #9
 800b5ba:	2001      	movs	r0, #1
 800b5bc:	6033      	str	r3, [r6, #0]
 800b5be:	3337      	adds	r3, #55	; 0x37
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	4240      	negs	r0, r0
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}
 800b5c8:	4b29      	ldr	r3, [pc, #164]	; (800b670 <__swsetup_r+0xe8>)
 800b5ca:	429c      	cmp	r4, r3
 800b5cc:	d101      	bne.n	800b5d2 <__swsetup_r+0x4a>
 800b5ce:	68ac      	ldr	r4, [r5, #8]
 800b5d0:	e7eb      	b.n	800b5aa <__swsetup_r+0x22>
 800b5d2:	4b28      	ldr	r3, [pc, #160]	; (800b674 <__swsetup_r+0xec>)
 800b5d4:	429c      	cmp	r4, r3
 800b5d6:	d1e8      	bne.n	800b5aa <__swsetup_r+0x22>
 800b5d8:	68ec      	ldr	r4, [r5, #12]
 800b5da:	e7e6      	b.n	800b5aa <__swsetup_r+0x22>
 800b5dc:	075b      	lsls	r3, r3, #29
 800b5de:	d513      	bpl.n	800b608 <__swsetup_r+0x80>
 800b5e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	d008      	beq.n	800b5f8 <__swsetup_r+0x70>
 800b5e6:	0023      	movs	r3, r4
 800b5e8:	3344      	adds	r3, #68	; 0x44
 800b5ea:	4299      	cmp	r1, r3
 800b5ec:	d002      	beq.n	800b5f4 <__swsetup_r+0x6c>
 800b5ee:	0030      	movs	r0, r6
 800b5f0:	f002 f9c4 	bl	800d97c <_free_r>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6363      	str	r3, [r4, #52]	; 0x34
 800b5f8:	2224      	movs	r2, #36	; 0x24
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	4393      	bics	r3, r2
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	2300      	movs	r3, #0
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	6923      	ldr	r3, [r4, #16]
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	2308      	movs	r3, #8
 800b60a:	89a2      	ldrh	r2, [r4, #12]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	81a3      	strh	r3, [r4, #12]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <__swsetup_r+0xa6>
 800b616:	21a0      	movs	r1, #160	; 0xa0
 800b618:	2280      	movs	r2, #128	; 0x80
 800b61a:	89a3      	ldrh	r3, [r4, #12]
 800b61c:	0089      	lsls	r1, r1, #2
 800b61e:	0092      	lsls	r2, r2, #2
 800b620:	400b      	ands	r3, r1
 800b622:	4293      	cmp	r3, r2
 800b624:	d003      	beq.n	800b62e <__swsetup_r+0xa6>
 800b626:	0021      	movs	r1, r4
 800b628:	0030      	movs	r0, r6
 800b62a:	f001 fc3d 	bl	800cea8 <__smakebuf_r>
 800b62e:	220c      	movs	r2, #12
 800b630:	5ea3      	ldrsh	r3, [r4, r2]
 800b632:	2001      	movs	r0, #1
 800b634:	001a      	movs	r2, r3
 800b636:	b299      	uxth	r1, r3
 800b638:	4002      	ands	r2, r0
 800b63a:	4203      	tst	r3, r0
 800b63c:	d00f      	beq.n	800b65e <__swsetup_r+0xd6>
 800b63e:	2200      	movs	r2, #0
 800b640:	60a2      	str	r2, [r4, #8]
 800b642:	6962      	ldr	r2, [r4, #20]
 800b644:	4252      	negs	r2, r2
 800b646:	61a2      	str	r2, [r4, #24]
 800b648:	2000      	movs	r0, #0
 800b64a:	6922      	ldr	r2, [r4, #16]
 800b64c:	4282      	cmp	r2, r0
 800b64e:	d1ba      	bne.n	800b5c6 <__swsetup_r+0x3e>
 800b650:	060a      	lsls	r2, r1, #24
 800b652:	d5b8      	bpl.n	800b5c6 <__swsetup_r+0x3e>
 800b654:	2240      	movs	r2, #64	; 0x40
 800b656:	4313      	orrs	r3, r2
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	3801      	subs	r0, #1
 800b65c:	e7b3      	b.n	800b5c6 <__swsetup_r+0x3e>
 800b65e:	0788      	lsls	r0, r1, #30
 800b660:	d400      	bmi.n	800b664 <__swsetup_r+0xdc>
 800b662:	6962      	ldr	r2, [r4, #20]
 800b664:	60a2      	str	r2, [r4, #8]
 800b666:	e7ef      	b.n	800b648 <__swsetup_r+0xc0>
 800b668:	2000000c 	.word	0x2000000c
 800b66c:	0800e8dc 	.word	0x0800e8dc
 800b670:	0800e8fc 	.word	0x0800e8fc
 800b674:	0800e8bc 	.word	0x0800e8bc

0800b678 <quorem>:
 800b678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67a:	0006      	movs	r6, r0
 800b67c:	690b      	ldr	r3, [r1, #16]
 800b67e:	6932      	ldr	r2, [r6, #16]
 800b680:	b087      	sub	sp, #28
 800b682:	2000      	movs	r0, #0
 800b684:	9103      	str	r1, [sp, #12]
 800b686:	429a      	cmp	r2, r3
 800b688:	db65      	blt.n	800b756 <quorem+0xde>
 800b68a:	3b01      	subs	r3, #1
 800b68c:	009c      	lsls	r4, r3, #2
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	000b      	movs	r3, r1
 800b692:	3314      	adds	r3, #20
 800b694:	9305      	str	r3, [sp, #20]
 800b696:	191b      	adds	r3, r3, r4
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	0033      	movs	r3, r6
 800b69c:	3314      	adds	r3, #20
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	191c      	adds	r4, r3, r4
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	6827      	ldr	r7, [r4, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	0038      	movs	r0, r7
 800b6aa:	1c5d      	adds	r5, r3, #1
 800b6ac:	0029      	movs	r1, r5
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	f7f4 fd46 	bl	8000140 <__udivsi3>
 800b6b4:	9001      	str	r0, [sp, #4]
 800b6b6:	42af      	cmp	r7, r5
 800b6b8:	d324      	bcc.n	800b704 <quorem+0x8c>
 800b6ba:	2500      	movs	r5, #0
 800b6bc:	46ac      	mov	ip, r5
 800b6be:	9802      	ldr	r0, [sp, #8]
 800b6c0:	9f05      	ldr	r7, [sp, #20]
 800b6c2:	cf08      	ldmia	r7!, {r3}
 800b6c4:	9a01      	ldr	r2, [sp, #4]
 800b6c6:	b299      	uxth	r1, r3
 800b6c8:	4351      	muls	r1, r2
 800b6ca:	0c1b      	lsrs	r3, r3, #16
 800b6cc:	4353      	muls	r3, r2
 800b6ce:	1949      	adds	r1, r1, r5
 800b6d0:	0c0a      	lsrs	r2, r1, #16
 800b6d2:	189b      	adds	r3, r3, r2
 800b6d4:	6802      	ldr	r2, [r0, #0]
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	b292      	uxth	r2, r2
 800b6da:	4462      	add	r2, ip
 800b6dc:	1a52      	subs	r2, r2, r1
 800b6de:	6801      	ldr	r1, [r0, #0]
 800b6e0:	0c1d      	lsrs	r5, r3, #16
 800b6e2:	0c09      	lsrs	r1, r1, #16
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	1acb      	subs	r3, r1, r3
 800b6e8:	1411      	asrs	r1, r2, #16
 800b6ea:	185b      	adds	r3, r3, r1
 800b6ec:	1419      	asrs	r1, r3, #16
 800b6ee:	b292      	uxth	r2, r2
 800b6f0:	041b      	lsls	r3, r3, #16
 800b6f2:	431a      	orrs	r2, r3
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	468c      	mov	ip, r1
 800b6f8:	c004      	stmia	r0!, {r2}
 800b6fa:	42bb      	cmp	r3, r7
 800b6fc:	d2e1      	bcs.n	800b6c2 <quorem+0x4a>
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d030      	beq.n	800b766 <quorem+0xee>
 800b704:	0030      	movs	r0, r6
 800b706:	9903      	ldr	r1, [sp, #12]
 800b708:	f001 ff12 	bl	800d530 <__mcmp>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	db21      	blt.n	800b754 <quorem+0xdc>
 800b710:	0030      	movs	r0, r6
 800b712:	2400      	movs	r4, #0
 800b714:	9b01      	ldr	r3, [sp, #4]
 800b716:	9903      	ldr	r1, [sp, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	9301      	str	r3, [sp, #4]
 800b71c:	3014      	adds	r0, #20
 800b71e:	3114      	adds	r1, #20
 800b720:	6803      	ldr	r3, [r0, #0]
 800b722:	c920      	ldmia	r1!, {r5}
 800b724:	b29a      	uxth	r2, r3
 800b726:	1914      	adds	r4, r2, r4
 800b728:	b2aa      	uxth	r2, r5
 800b72a:	1aa2      	subs	r2, r4, r2
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	0c2d      	lsrs	r5, r5, #16
 800b730:	1414      	asrs	r4, r2, #16
 800b732:	1b5b      	subs	r3, r3, r5
 800b734:	191b      	adds	r3, r3, r4
 800b736:	141c      	asrs	r4, r3, #16
 800b738:	b292      	uxth	r2, r2
 800b73a:	041b      	lsls	r3, r3, #16
 800b73c:	4313      	orrs	r3, r2
 800b73e:	c008      	stmia	r0!, {r3}
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	428b      	cmp	r3, r1
 800b744:	d2ec      	bcs.n	800b720 <quorem+0xa8>
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	9a02      	ldr	r2, [sp, #8]
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	18d3      	adds	r3, r2, r3
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	2a00      	cmp	r2, #0
 800b752:	d015      	beq.n	800b780 <quorem+0x108>
 800b754:	9801      	ldr	r0, [sp, #4]
 800b756:	b007      	add	sp, #28
 800b758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d106      	bne.n	800b76e <quorem+0xf6>
 800b760:	9b00      	ldr	r3, [sp, #0]
 800b762:	3b01      	subs	r3, #1
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	9b02      	ldr	r3, [sp, #8]
 800b768:	3c04      	subs	r4, #4
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	d3f5      	bcc.n	800b75a <quorem+0xe2>
 800b76e:	9b00      	ldr	r3, [sp, #0]
 800b770:	6133      	str	r3, [r6, #16]
 800b772:	e7c7      	b.n	800b704 <quorem+0x8c>
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	2a00      	cmp	r2, #0
 800b778:	d106      	bne.n	800b788 <quorem+0x110>
 800b77a:	9a00      	ldr	r2, [sp, #0]
 800b77c:	3a01      	subs	r2, #1
 800b77e:	9200      	str	r2, [sp, #0]
 800b780:	9a02      	ldr	r2, [sp, #8]
 800b782:	3b04      	subs	r3, #4
 800b784:	429a      	cmp	r2, r3
 800b786:	d3f5      	bcc.n	800b774 <quorem+0xfc>
 800b788:	9b00      	ldr	r3, [sp, #0]
 800b78a:	6133      	str	r3, [r6, #16]
 800b78c:	e7e2      	b.n	800b754 <quorem+0xdc>
	...

0800b790 <_dtoa_r>:
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	b09d      	sub	sp, #116	; 0x74
 800b794:	9202      	str	r2, [sp, #8]
 800b796:	9303      	str	r3, [sp, #12]
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	9c03      	ldr	r4, [sp, #12]
 800b79c:	9308      	str	r3, [sp, #32]
 800b79e:	9409      	str	r4, [sp, #36]	; 0x24
 800b7a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b7a2:	0007      	movs	r7, r0
 800b7a4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	d10e      	bne.n	800b7c8 <_dtoa_r+0x38>
 800b7aa:	2010      	movs	r0, #16
 800b7ac:	f001 fbc0 	bl	800cf30 <malloc>
 800b7b0:	1e02      	subs	r2, r0, #0
 800b7b2:	6278      	str	r0, [r7, #36]	; 0x24
 800b7b4:	d104      	bne.n	800b7c0 <_dtoa_r+0x30>
 800b7b6:	21ea      	movs	r1, #234	; 0xea
 800b7b8:	4bc7      	ldr	r3, [pc, #796]	; (800bad8 <_dtoa_r+0x348>)
 800b7ba:	48c8      	ldr	r0, [pc, #800]	; (800badc <_dtoa_r+0x34c>)
 800b7bc:	f002 fd1c 	bl	800e1f8 <__assert_func>
 800b7c0:	6044      	str	r4, [r0, #4]
 800b7c2:	6084      	str	r4, [r0, #8]
 800b7c4:	6004      	str	r4, [r0, #0]
 800b7c6:	60c4      	str	r4, [r0, #12]
 800b7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ca:	6819      	ldr	r1, [r3, #0]
 800b7cc:	2900      	cmp	r1, #0
 800b7ce:	d00a      	beq.n	800b7e6 <_dtoa_r+0x56>
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4093      	lsls	r3, r2
 800b7d6:	604a      	str	r2, [r1, #4]
 800b7d8:	608b      	str	r3, [r1, #8]
 800b7da:	0038      	movs	r0, r7
 800b7dc:	f001 fc1c 	bl	800d018 <_Bfree>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	9b03      	ldr	r3, [sp, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	da20      	bge.n	800b82e <_dtoa_r+0x9e>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	085b      	lsrs	r3, r3, #1
 800b7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b7fa:	4bb9      	ldr	r3, [pc, #740]	; (800bae0 <_dtoa_r+0x350>)
 800b7fc:	4ab8      	ldr	r2, [pc, #736]	; (800bae0 <_dtoa_r+0x350>)
 800b7fe:	402b      	ands	r3, r5
 800b800:	4293      	cmp	r3, r2
 800b802:	d117      	bne.n	800b834 <_dtoa_r+0xa4>
 800b804:	4bb7      	ldr	r3, [pc, #732]	; (800bae4 <_dtoa_r+0x354>)
 800b806:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b808:	0328      	lsls	r0, r5, #12
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	9b02      	ldr	r3, [sp, #8]
 800b80e:	0b00      	lsrs	r0, r0, #12
 800b810:	4318      	orrs	r0, r3
 800b812:	d101      	bne.n	800b818 <_dtoa_r+0x88>
 800b814:	f000 fdbf 	bl	800c396 <_dtoa_r+0xc06>
 800b818:	48b3      	ldr	r0, [pc, #716]	; (800bae8 <_dtoa_r+0x358>)
 800b81a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b81c:	9006      	str	r0, [sp, #24]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <_dtoa_r+0x98>
 800b822:	4bb2      	ldr	r3, [pc, #712]	; (800baec <_dtoa_r+0x35c>)
 800b824:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	9806      	ldr	r0, [sp, #24]
 800b82a:	b01d      	add	sp, #116	; 0x74
 800b82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b82e:	2300      	movs	r3, #0
 800b830:	602b      	str	r3, [r5, #0]
 800b832:	e7e1      	b.n	800b7f8 <_dtoa_r+0x68>
 800b834:	9b08      	ldr	r3, [sp, #32]
 800b836:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b838:	9312      	str	r3, [sp, #72]	; 0x48
 800b83a:	9413      	str	r4, [sp, #76]	; 0x4c
 800b83c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b83e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b840:	2200      	movs	r2, #0
 800b842:	2300      	movs	r3, #0
 800b844:	f7f4 fe02 	bl	800044c <__aeabi_dcmpeq>
 800b848:	1e04      	subs	r4, r0, #0
 800b84a:	d009      	beq.n	800b860 <_dtoa_r+0xd0>
 800b84c:	2301      	movs	r3, #1
 800b84e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	4ba7      	ldr	r3, [pc, #668]	; (800baf0 <_dtoa_r+0x360>)
 800b854:	9306      	str	r3, [sp, #24]
 800b856:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0e5      	beq.n	800b828 <_dtoa_r+0x98>
 800b85c:	4ba5      	ldr	r3, [pc, #660]	; (800baf4 <_dtoa_r+0x364>)
 800b85e:	e7e1      	b.n	800b824 <_dtoa_r+0x94>
 800b860:	ab1a      	add	r3, sp, #104	; 0x68
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	ab1b      	add	r3, sp, #108	; 0x6c
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	0038      	movs	r0, r7
 800b86a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b86c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b86e:	f001 ff87 	bl	800d780 <__d2b>
 800b872:	006e      	lsls	r6, r5, #1
 800b874:	9005      	str	r0, [sp, #20]
 800b876:	0d76      	lsrs	r6, r6, #21
 800b878:	d100      	bne.n	800b87c <_dtoa_r+0xec>
 800b87a:	e07c      	b.n	800b976 <_dtoa_r+0x1e6>
 800b87c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b87e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b882:	4a9d      	ldr	r2, [pc, #628]	; (800baf8 <_dtoa_r+0x368>)
 800b884:	031b      	lsls	r3, r3, #12
 800b886:	0b1b      	lsrs	r3, r3, #12
 800b888:	431a      	orrs	r2, r3
 800b88a:	0011      	movs	r1, r2
 800b88c:	4b9b      	ldr	r3, [pc, #620]	; (800bafc <_dtoa_r+0x36c>)
 800b88e:	9418      	str	r4, [sp, #96]	; 0x60
 800b890:	18f6      	adds	r6, r6, r3
 800b892:	2200      	movs	r2, #0
 800b894:	4b9a      	ldr	r3, [pc, #616]	; (800bb00 <_dtoa_r+0x370>)
 800b896:	f7f6 fbf1 	bl	800207c <__aeabi_dsub>
 800b89a:	4a9a      	ldr	r2, [pc, #616]	; (800bb04 <_dtoa_r+0x374>)
 800b89c:	4b9a      	ldr	r3, [pc, #616]	; (800bb08 <_dtoa_r+0x378>)
 800b89e:	f7f6 f981 	bl	8001ba4 <__aeabi_dmul>
 800b8a2:	4a9a      	ldr	r2, [pc, #616]	; (800bb0c <_dtoa_r+0x37c>)
 800b8a4:	4b9a      	ldr	r3, [pc, #616]	; (800bb10 <_dtoa_r+0x380>)
 800b8a6:	f7f5 fa3f 	bl	8000d28 <__aeabi_dadd>
 800b8aa:	0004      	movs	r4, r0
 800b8ac:	0030      	movs	r0, r6
 800b8ae:	000d      	movs	r5, r1
 800b8b0:	f7f6 ffca 	bl	8002848 <__aeabi_i2d>
 800b8b4:	4a97      	ldr	r2, [pc, #604]	; (800bb14 <_dtoa_r+0x384>)
 800b8b6:	4b98      	ldr	r3, [pc, #608]	; (800bb18 <_dtoa_r+0x388>)
 800b8b8:	f7f6 f974 	bl	8001ba4 <__aeabi_dmul>
 800b8bc:	0002      	movs	r2, r0
 800b8be:	000b      	movs	r3, r1
 800b8c0:	0020      	movs	r0, r4
 800b8c2:	0029      	movs	r1, r5
 800b8c4:	f7f5 fa30 	bl	8000d28 <__aeabi_dadd>
 800b8c8:	0004      	movs	r4, r0
 800b8ca:	000d      	movs	r5, r1
 800b8cc:	f7f6 ff86 	bl	80027dc <__aeabi_d2iz>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	9002      	str	r0, [sp, #8]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	0020      	movs	r0, r4
 800b8d8:	0029      	movs	r1, r5
 800b8da:	f7f4 fdbd 	bl	8000458 <__aeabi_dcmplt>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d00b      	beq.n	800b8fa <_dtoa_r+0x16a>
 800b8e2:	9802      	ldr	r0, [sp, #8]
 800b8e4:	f7f6 ffb0 	bl	8002848 <__aeabi_i2d>
 800b8e8:	002b      	movs	r3, r5
 800b8ea:	0022      	movs	r2, r4
 800b8ec:	f7f4 fdae 	bl	800044c <__aeabi_dcmpeq>
 800b8f0:	4243      	negs	r3, r0
 800b8f2:	4158      	adcs	r0, r3
 800b8f4:	9b02      	ldr	r3, [sp, #8]
 800b8f6:	1a1b      	subs	r3, r3, r0
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	9316      	str	r3, [sp, #88]	; 0x58
 800b8fe:	9b02      	ldr	r3, [sp, #8]
 800b900:	2b16      	cmp	r3, #22
 800b902:	d80f      	bhi.n	800b924 <_dtoa_r+0x194>
 800b904:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b906:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b908:	00da      	lsls	r2, r3, #3
 800b90a:	4b84      	ldr	r3, [pc, #528]	; (800bb1c <_dtoa_r+0x38c>)
 800b90c:	189b      	adds	r3, r3, r2
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f7f4 fda1 	bl	8000458 <__aeabi_dcmplt>
 800b916:	2800      	cmp	r0, #0
 800b918:	d049      	beq.n	800b9ae <_dtoa_r+0x21e>
 800b91a:	9b02      	ldr	r3, [sp, #8]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	9302      	str	r3, [sp, #8]
 800b920:	2300      	movs	r3, #0
 800b922:	9316      	str	r3, [sp, #88]	; 0x58
 800b924:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b926:	1b9e      	subs	r6, r3, r6
 800b928:	2300      	movs	r3, #0
 800b92a:	930a      	str	r3, [sp, #40]	; 0x28
 800b92c:	0033      	movs	r3, r6
 800b92e:	3b01      	subs	r3, #1
 800b930:	930d      	str	r3, [sp, #52]	; 0x34
 800b932:	d504      	bpl.n	800b93e <_dtoa_r+0x1ae>
 800b934:	2301      	movs	r3, #1
 800b936:	1b9b      	subs	r3, r3, r6
 800b938:	930a      	str	r3, [sp, #40]	; 0x28
 800b93a:	2300      	movs	r3, #0
 800b93c:	930d      	str	r3, [sp, #52]	; 0x34
 800b93e:	9b02      	ldr	r3, [sp, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	db36      	blt.n	800b9b2 <_dtoa_r+0x222>
 800b944:	9a02      	ldr	r2, [sp, #8]
 800b946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b948:	4694      	mov	ip, r2
 800b94a:	4463      	add	r3, ip
 800b94c:	930d      	str	r3, [sp, #52]	; 0x34
 800b94e:	2300      	movs	r3, #0
 800b950:	9215      	str	r2, [sp, #84]	; 0x54
 800b952:	930e      	str	r3, [sp, #56]	; 0x38
 800b954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b956:	2401      	movs	r4, #1
 800b958:	2b09      	cmp	r3, #9
 800b95a:	d864      	bhi.n	800ba26 <_dtoa_r+0x296>
 800b95c:	2b05      	cmp	r3, #5
 800b95e:	dd02      	ble.n	800b966 <_dtoa_r+0x1d6>
 800b960:	2400      	movs	r4, #0
 800b962:	3b04      	subs	r3, #4
 800b964:	9322      	str	r3, [sp, #136]	; 0x88
 800b966:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b968:	1e98      	subs	r0, r3, #2
 800b96a:	2803      	cmp	r0, #3
 800b96c:	d864      	bhi.n	800ba38 <_dtoa_r+0x2a8>
 800b96e:	f7f4 fbd3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b972:	3829      	.short	0x3829
 800b974:	5836      	.short	0x5836
 800b976:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b978:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b97a:	189e      	adds	r6, r3, r2
 800b97c:	4b68      	ldr	r3, [pc, #416]	; (800bb20 <_dtoa_r+0x390>)
 800b97e:	18f2      	adds	r2, r6, r3
 800b980:	2a20      	cmp	r2, #32
 800b982:	dd0f      	ble.n	800b9a4 <_dtoa_r+0x214>
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	1a9b      	subs	r3, r3, r2
 800b988:	409d      	lsls	r5, r3
 800b98a:	4b66      	ldr	r3, [pc, #408]	; (800bb24 <_dtoa_r+0x394>)
 800b98c:	9802      	ldr	r0, [sp, #8]
 800b98e:	18f3      	adds	r3, r6, r3
 800b990:	40d8      	lsrs	r0, r3
 800b992:	4328      	orrs	r0, r5
 800b994:	f7f6 ff88 	bl	80028a8 <__aeabi_ui2d>
 800b998:	2301      	movs	r3, #1
 800b99a:	4c63      	ldr	r4, [pc, #396]	; (800bb28 <_dtoa_r+0x398>)
 800b99c:	3e01      	subs	r6, #1
 800b99e:	1909      	adds	r1, r1, r4
 800b9a0:	9318      	str	r3, [sp, #96]	; 0x60
 800b9a2:	e776      	b.n	800b892 <_dtoa_r+0x102>
 800b9a4:	2320      	movs	r3, #32
 800b9a6:	9802      	ldr	r0, [sp, #8]
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	4098      	lsls	r0, r3
 800b9ac:	e7f2      	b.n	800b994 <_dtoa_r+0x204>
 800b9ae:	9016      	str	r0, [sp, #88]	; 0x58
 800b9b0:	e7b8      	b.n	800b924 <_dtoa_r+0x194>
 800b9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b4:	9a02      	ldr	r2, [sp, #8]
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ba:	4253      	negs	r3, r2
 800b9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9315      	str	r3, [sp, #84]	; 0x54
 800b9c2:	e7c7      	b.n	800b954 <_dtoa_r+0x1c4>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9ca:	930c      	str	r3, [sp, #48]	; 0x30
 800b9cc:	9307      	str	r3, [sp, #28]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dc13      	bgt.n	800b9fa <_dtoa_r+0x26a>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	001a      	movs	r2, r3
 800b9d6:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d8:	9307      	str	r3, [sp, #28]
 800b9da:	9223      	str	r2, [sp, #140]	; 0x8c
 800b9dc:	e00d      	b.n	800b9fa <_dtoa_r+0x26a>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e7f1      	b.n	800b9c6 <_dtoa_r+0x236>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b9e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9e8:	4694      	mov	ip, r2
 800b9ea:	9b02      	ldr	r3, [sp, #8]
 800b9ec:	4463      	add	r3, ip
 800b9ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	9307      	str	r3, [sp, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dc00      	bgt.n	800b9fa <_dtoa_r+0x26a>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9fe:	6042      	str	r2, [r0, #4]
 800ba00:	3204      	adds	r2, #4
 800ba02:	0015      	movs	r5, r2
 800ba04:	3514      	adds	r5, #20
 800ba06:	6841      	ldr	r1, [r0, #4]
 800ba08:	429d      	cmp	r5, r3
 800ba0a:	d919      	bls.n	800ba40 <_dtoa_r+0x2b0>
 800ba0c:	0038      	movs	r0, r7
 800ba0e:	f001 fabf 	bl	800cf90 <_Balloc>
 800ba12:	9006      	str	r0, [sp, #24]
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d117      	bne.n	800ba48 <_dtoa_r+0x2b8>
 800ba18:	21d5      	movs	r1, #213	; 0xd5
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	4b43      	ldr	r3, [pc, #268]	; (800bb2c <_dtoa_r+0x39c>)
 800ba1e:	0049      	lsls	r1, r1, #1
 800ba20:	e6cb      	b.n	800b7ba <_dtoa_r+0x2a>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e7de      	b.n	800b9e4 <_dtoa_r+0x254>
 800ba26:	2300      	movs	r3, #0
 800ba28:	940f      	str	r4, [sp, #60]	; 0x3c
 800ba2a:	9322      	str	r3, [sp, #136]	; 0x88
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba30:	9307      	str	r3, [sp, #28]
 800ba32:	2200      	movs	r2, #0
 800ba34:	3313      	adds	r3, #19
 800ba36:	e7d0      	b.n	800b9da <_dtoa_r+0x24a>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba3c:	3b02      	subs	r3, #2
 800ba3e:	e7f6      	b.n	800ba2e <_dtoa_r+0x29e>
 800ba40:	3101      	adds	r1, #1
 800ba42:	6041      	str	r1, [r0, #4]
 800ba44:	0052      	lsls	r2, r2, #1
 800ba46:	e7dc      	b.n	800ba02 <_dtoa_r+0x272>
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	9a06      	ldr	r2, [sp, #24]
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	9b07      	ldr	r3, [sp, #28]
 800ba50:	2b0e      	cmp	r3, #14
 800ba52:	d900      	bls.n	800ba56 <_dtoa_r+0x2c6>
 800ba54:	e0eb      	b.n	800bc2e <_dtoa_r+0x49e>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	d100      	bne.n	800ba5c <_dtoa_r+0x2cc>
 800ba5a:	e0e8      	b.n	800bc2e <_dtoa_r+0x49e>
 800ba5c:	9b02      	ldr	r3, [sp, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dd68      	ble.n	800bb34 <_dtoa_r+0x3a4>
 800ba62:	001a      	movs	r2, r3
 800ba64:	210f      	movs	r1, #15
 800ba66:	4b2d      	ldr	r3, [pc, #180]	; (800bb1c <_dtoa_r+0x38c>)
 800ba68:	400a      	ands	r2, r1
 800ba6a:	00d2      	lsls	r2, r2, #3
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	681d      	ldr	r5, [r3, #0]
 800ba70:	685e      	ldr	r6, [r3, #4]
 800ba72:	9b02      	ldr	r3, [sp, #8]
 800ba74:	111c      	asrs	r4, r3, #4
 800ba76:	2302      	movs	r3, #2
 800ba78:	9310      	str	r3, [sp, #64]	; 0x40
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	05db      	lsls	r3, r3, #23
 800ba7e:	d50b      	bpl.n	800ba98 <_dtoa_r+0x308>
 800ba80:	4b2b      	ldr	r3, [pc, #172]	; (800bb30 <_dtoa_r+0x3a0>)
 800ba82:	400c      	ands	r4, r1
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba8a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba8c:	f7f5 fc88 	bl	80013a0 <__aeabi_ddiv>
 800ba90:	2303      	movs	r3, #3
 800ba92:	9008      	str	r0, [sp, #32]
 800ba94:	9109      	str	r1, [sp, #36]	; 0x24
 800ba96:	9310      	str	r3, [sp, #64]	; 0x40
 800ba98:	4b25      	ldr	r3, [pc, #148]	; (800bb30 <_dtoa_r+0x3a0>)
 800ba9a:	9314      	str	r3, [sp, #80]	; 0x50
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	d108      	bne.n	800bab2 <_dtoa_r+0x322>
 800baa0:	9808      	ldr	r0, [sp, #32]
 800baa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baa4:	002a      	movs	r2, r5
 800baa6:	0033      	movs	r3, r6
 800baa8:	f7f5 fc7a 	bl	80013a0 <__aeabi_ddiv>
 800baac:	9008      	str	r0, [sp, #32]
 800baae:	9109      	str	r1, [sp, #36]	; 0x24
 800bab0:	e05c      	b.n	800bb6c <_dtoa_r+0x3dc>
 800bab2:	2301      	movs	r3, #1
 800bab4:	421c      	tst	r4, r3
 800bab6:	d00b      	beq.n	800bad0 <_dtoa_r+0x340>
 800bab8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baba:	0028      	movs	r0, r5
 800babc:	3301      	adds	r3, #1
 800babe:	9310      	str	r3, [sp, #64]	; 0x40
 800bac0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bac2:	0031      	movs	r1, r6
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	f7f6 f86c 	bl	8001ba4 <__aeabi_dmul>
 800bacc:	0005      	movs	r5, r0
 800bace:	000e      	movs	r6, r1
 800bad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bad2:	1064      	asrs	r4, r4, #1
 800bad4:	3308      	adds	r3, #8
 800bad6:	e7e0      	b.n	800ba9a <_dtoa_r+0x30a>
 800bad8:	0800e836 	.word	0x0800e836
 800badc:	0800e84d 	.word	0x0800e84d
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	0000270f 	.word	0x0000270f
 800bae8:	0800e832 	.word	0x0800e832
 800baec:	0800e835 	.word	0x0800e835
 800baf0:	0800e6ac 	.word	0x0800e6ac
 800baf4:	0800e6ad 	.word	0x0800e6ad
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	fffffc01 	.word	0xfffffc01
 800bb00:	3ff80000 	.word	0x3ff80000
 800bb04:	636f4361 	.word	0x636f4361
 800bb08:	3fd287a7 	.word	0x3fd287a7
 800bb0c:	8b60c8b3 	.word	0x8b60c8b3
 800bb10:	3fc68a28 	.word	0x3fc68a28
 800bb14:	509f79fb 	.word	0x509f79fb
 800bb18:	3fd34413 	.word	0x3fd34413
 800bb1c:	0800ea20 	.word	0x0800ea20
 800bb20:	00000432 	.word	0x00000432
 800bb24:	00000412 	.word	0x00000412
 800bb28:	fe100000 	.word	0xfe100000
 800bb2c:	0800e8a8 	.word	0x0800e8a8
 800bb30:	0800e9f8 	.word	0x0800e9f8
 800bb34:	2302      	movs	r3, #2
 800bb36:	9310      	str	r3, [sp, #64]	; 0x40
 800bb38:	9b02      	ldr	r3, [sp, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d016      	beq.n	800bb6c <_dtoa_r+0x3dc>
 800bb3e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bb40:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb42:	425c      	negs	r4, r3
 800bb44:	230f      	movs	r3, #15
 800bb46:	4ab6      	ldr	r2, [pc, #728]	; (800be20 <_dtoa_r+0x690>)
 800bb48:	4023      	ands	r3, r4
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	18d3      	adds	r3, r2, r3
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f7f6 f827 	bl	8001ba4 <__aeabi_dmul>
 800bb56:	2601      	movs	r6, #1
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9008      	str	r0, [sp, #32]
 800bb5c:	9109      	str	r1, [sp, #36]	; 0x24
 800bb5e:	4db1      	ldr	r5, [pc, #708]	; (800be24 <_dtoa_r+0x694>)
 800bb60:	1124      	asrs	r4, r4, #4
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	d000      	beq.n	800bb68 <_dtoa_r+0x3d8>
 800bb66:	e094      	b.n	800bc92 <_dtoa_r+0x502>
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d19f      	bne.n	800baac <_dtoa_r+0x31c>
 800bb6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d100      	bne.n	800bb74 <_dtoa_r+0x3e4>
 800bb72:	e09b      	b.n	800bcac <_dtoa_r+0x51c>
 800bb74:	9c08      	ldr	r4, [sp, #32]
 800bb76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bb78:	2200      	movs	r2, #0
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	0029      	movs	r1, r5
 800bb7e:	4baa      	ldr	r3, [pc, #680]	; (800be28 <_dtoa_r+0x698>)
 800bb80:	f7f4 fc6a 	bl	8000458 <__aeabi_dcmplt>
 800bb84:	2800      	cmp	r0, #0
 800bb86:	d100      	bne.n	800bb8a <_dtoa_r+0x3fa>
 800bb88:	e090      	b.n	800bcac <_dtoa_r+0x51c>
 800bb8a:	9b07      	ldr	r3, [sp, #28]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d100      	bne.n	800bb92 <_dtoa_r+0x402>
 800bb90:	e08c      	b.n	800bcac <_dtoa_r+0x51c>
 800bb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	dd46      	ble.n	800bc26 <_dtoa_r+0x496>
 800bb98:	9b02      	ldr	r3, [sp, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	0020      	movs	r0, r4
 800bb9e:	0029      	movs	r1, r5
 800bba0:	1e5e      	subs	r6, r3, #1
 800bba2:	4ba2      	ldr	r3, [pc, #648]	; (800be2c <_dtoa_r+0x69c>)
 800bba4:	f7f5 fffe 	bl	8001ba4 <__aeabi_dmul>
 800bba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbaa:	9008      	str	r0, [sp, #32]
 800bbac:	9109      	str	r1, [sp, #36]	; 0x24
 800bbae:	3301      	adds	r3, #1
 800bbb0:	9310      	str	r3, [sp, #64]	; 0x40
 800bbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbb4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bbb6:	9c08      	ldr	r4, [sp, #32]
 800bbb8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bbba:	9314      	str	r3, [sp, #80]	; 0x50
 800bbbc:	f7f6 fe44 	bl	8002848 <__aeabi_i2d>
 800bbc0:	0022      	movs	r2, r4
 800bbc2:	002b      	movs	r3, r5
 800bbc4:	f7f5 ffee 	bl	8001ba4 <__aeabi_dmul>
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4b99      	ldr	r3, [pc, #612]	; (800be30 <_dtoa_r+0x6a0>)
 800bbcc:	f7f5 f8ac 	bl	8000d28 <__aeabi_dadd>
 800bbd0:	9010      	str	r0, [sp, #64]	; 0x40
 800bbd2:	9111      	str	r1, [sp, #68]	; 0x44
 800bbd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbd8:	9208      	str	r2, [sp, #32]
 800bbda:	9309      	str	r3, [sp, #36]	; 0x24
 800bbdc:	4a95      	ldr	r2, [pc, #596]	; (800be34 <_dtoa_r+0x6a4>)
 800bbde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbe0:	4694      	mov	ip, r2
 800bbe2:	4463      	add	r3, ip
 800bbe4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d161      	bne.n	800bcb2 <_dtoa_r+0x522>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	0020      	movs	r0, r4
 800bbf2:	0029      	movs	r1, r5
 800bbf4:	4b90      	ldr	r3, [pc, #576]	; (800be38 <_dtoa_r+0x6a8>)
 800bbf6:	f7f6 fa41 	bl	800207c <__aeabi_dsub>
 800bbfa:	9a08      	ldr	r2, [sp, #32]
 800bbfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbfe:	0004      	movs	r4, r0
 800bc00:	000d      	movs	r5, r1
 800bc02:	f7f4 fc3d 	bl	8000480 <__aeabi_dcmpgt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	d000      	beq.n	800bc0c <_dtoa_r+0x47c>
 800bc0a:	e2af      	b.n	800c16c <_dtoa_r+0x9dc>
 800bc0c:	488b      	ldr	r0, [pc, #556]	; (800be3c <_dtoa_r+0x6ac>)
 800bc0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc10:	4684      	mov	ip, r0
 800bc12:	4461      	add	r1, ip
 800bc14:	000b      	movs	r3, r1
 800bc16:	0020      	movs	r0, r4
 800bc18:	0029      	movs	r1, r5
 800bc1a:	9a08      	ldr	r2, [sp, #32]
 800bc1c:	f7f4 fc1c 	bl	8000458 <__aeabi_dcmplt>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d000      	beq.n	800bc26 <_dtoa_r+0x496>
 800bc24:	e29f      	b.n	800c166 <_dtoa_r+0x9d6>
 800bc26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	9409      	str	r4, [sp, #36]	; 0x24
 800bc2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da00      	bge.n	800bc36 <_dtoa_r+0x4a6>
 800bc34:	e172      	b.n	800bf1c <_dtoa_r+0x78c>
 800bc36:	9a02      	ldr	r2, [sp, #8]
 800bc38:	2a0e      	cmp	r2, #14
 800bc3a:	dd00      	ble.n	800bc3e <_dtoa_r+0x4ae>
 800bc3c:	e16e      	b.n	800bf1c <_dtoa_r+0x78c>
 800bc3e:	4b78      	ldr	r3, [pc, #480]	; (800be20 <_dtoa_r+0x690>)
 800bc40:	00d2      	lsls	r2, r2, #3
 800bc42:	189b      	adds	r3, r3, r2
 800bc44:	685c      	ldr	r4, [r3, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	930a      	str	r3, [sp, #40]	; 0x28
 800bc4a:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	db00      	blt.n	800bc54 <_dtoa_r+0x4c4>
 800bc52:	e0f7      	b.n	800be44 <_dtoa_r+0x6b4>
 800bc54:	9b07      	ldr	r3, [sp, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd00      	ble.n	800bc5c <_dtoa_r+0x4cc>
 800bc5a:	e0f3      	b.n	800be44 <_dtoa_r+0x6b4>
 800bc5c:	d000      	beq.n	800bc60 <_dtoa_r+0x4d0>
 800bc5e:	e282      	b.n	800c166 <_dtoa_r+0x9d6>
 800bc60:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc64:	2200      	movs	r2, #0
 800bc66:	4b74      	ldr	r3, [pc, #464]	; (800be38 <_dtoa_r+0x6a8>)
 800bc68:	f7f5 ff9c 	bl	8001ba4 <__aeabi_dmul>
 800bc6c:	9a08      	ldr	r2, [sp, #32]
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	f7f4 fc10 	bl	8000494 <__aeabi_dcmpge>
 800bc74:	9e07      	ldr	r6, [sp, #28]
 800bc76:	0035      	movs	r5, r6
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d000      	beq.n	800bc7e <_dtoa_r+0x4ee>
 800bc7c:	e259      	b.n	800c132 <_dtoa_r+0x9a2>
 800bc7e:	9b06      	ldr	r3, [sp, #24]
 800bc80:	9a06      	ldr	r2, [sp, #24]
 800bc82:	3301      	adds	r3, #1
 800bc84:	9308      	str	r3, [sp, #32]
 800bc86:	2331      	movs	r3, #49	; 0x31
 800bc88:	7013      	strb	r3, [r2, #0]
 800bc8a:	9b02      	ldr	r3, [sp, #8]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	9302      	str	r3, [sp, #8]
 800bc90:	e254      	b.n	800c13c <_dtoa_r+0x9ac>
 800bc92:	4234      	tst	r4, r6
 800bc94:	d007      	beq.n	800bca6 <_dtoa_r+0x516>
 800bc96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc98:	3301      	adds	r3, #1
 800bc9a:	9310      	str	r3, [sp, #64]	; 0x40
 800bc9c:	682a      	ldr	r2, [r5, #0]
 800bc9e:	686b      	ldr	r3, [r5, #4]
 800bca0:	f7f5 ff80 	bl	8001ba4 <__aeabi_dmul>
 800bca4:	0033      	movs	r3, r6
 800bca6:	1064      	asrs	r4, r4, #1
 800bca8:	3508      	adds	r5, #8
 800bcaa:	e75a      	b.n	800bb62 <_dtoa_r+0x3d2>
 800bcac:	9e02      	ldr	r6, [sp, #8]
 800bcae:	9b07      	ldr	r3, [sp, #28]
 800bcb0:	e780      	b.n	800bbb4 <_dtoa_r+0x424>
 800bcb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcb6:	1e5a      	subs	r2, r3, #1
 800bcb8:	4b59      	ldr	r3, [pc, #356]	; (800be20 <_dtoa_r+0x690>)
 800bcba:	00d2      	lsls	r2, r2, #3
 800bcbc:	189b      	adds	r3, r3, r2
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	2900      	cmp	r1, #0
 800bcc4:	d051      	beq.n	800bd6a <_dtoa_r+0x5da>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	495d      	ldr	r1, [pc, #372]	; (800be40 <_dtoa_r+0x6b0>)
 800bcca:	f7f5 fb69 	bl	80013a0 <__aeabi_ddiv>
 800bcce:	9a08      	ldr	r2, [sp, #32]
 800bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd2:	f7f6 f9d3 	bl	800207c <__aeabi_dsub>
 800bcd6:	9a06      	ldr	r2, [sp, #24]
 800bcd8:	9b06      	ldr	r3, [sp, #24]
 800bcda:	4694      	mov	ip, r2
 800bcdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bcde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bce0:	9010      	str	r0, [sp, #64]	; 0x40
 800bce2:	9111      	str	r1, [sp, #68]	; 0x44
 800bce4:	4463      	add	r3, ip
 800bce6:	9319      	str	r3, [sp, #100]	; 0x64
 800bce8:	0029      	movs	r1, r5
 800bcea:	0020      	movs	r0, r4
 800bcec:	f7f6 fd76 	bl	80027dc <__aeabi_d2iz>
 800bcf0:	9014      	str	r0, [sp, #80]	; 0x50
 800bcf2:	f7f6 fda9 	bl	8002848 <__aeabi_i2d>
 800bcf6:	0002      	movs	r2, r0
 800bcf8:	000b      	movs	r3, r1
 800bcfa:	0020      	movs	r0, r4
 800bcfc:	0029      	movs	r1, r5
 800bcfe:	f7f6 f9bd 	bl	800207c <__aeabi_dsub>
 800bd02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd06:	3301      	adds	r3, #1
 800bd08:	9308      	str	r3, [sp, #32]
 800bd0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd0c:	0004      	movs	r4, r0
 800bd0e:	3330      	adds	r3, #48	; 0x30
 800bd10:	7013      	strb	r3, [r2, #0]
 800bd12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd16:	000d      	movs	r5, r1
 800bd18:	f7f4 fb9e 	bl	8000458 <__aeabi_dcmplt>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d175      	bne.n	800be0c <_dtoa_r+0x67c>
 800bd20:	0022      	movs	r2, r4
 800bd22:	002b      	movs	r3, r5
 800bd24:	2000      	movs	r0, #0
 800bd26:	4940      	ldr	r1, [pc, #256]	; (800be28 <_dtoa_r+0x698>)
 800bd28:	f7f6 f9a8 	bl	800207c <__aeabi_dsub>
 800bd2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd30:	f7f4 fb92 	bl	8000458 <__aeabi_dcmplt>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d000      	beq.n	800bd3a <_dtoa_r+0x5aa>
 800bd38:	e0d2      	b.n	800bee0 <_dtoa_r+0x750>
 800bd3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd3c:	9a08      	ldr	r2, [sp, #32]
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d100      	bne.n	800bd44 <_dtoa_r+0x5b4>
 800bd42:	e770      	b.n	800bc26 <_dtoa_r+0x496>
 800bd44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd46:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4b38      	ldr	r3, [pc, #224]	; (800be2c <_dtoa_r+0x69c>)
 800bd4c:	f7f5 ff2a 	bl	8001ba4 <__aeabi_dmul>
 800bd50:	4b36      	ldr	r3, [pc, #216]	; (800be2c <_dtoa_r+0x69c>)
 800bd52:	9010      	str	r0, [sp, #64]	; 0x40
 800bd54:	9111      	str	r1, [sp, #68]	; 0x44
 800bd56:	2200      	movs	r2, #0
 800bd58:	0020      	movs	r0, r4
 800bd5a:	0029      	movs	r1, r5
 800bd5c:	f7f5 ff22 	bl	8001ba4 <__aeabi_dmul>
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	0004      	movs	r4, r0
 800bd64:	000d      	movs	r5, r1
 800bd66:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd68:	e7be      	b.n	800bce8 <_dtoa_r+0x558>
 800bd6a:	9808      	ldr	r0, [sp, #32]
 800bd6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd6e:	f7f5 ff19 	bl	8001ba4 <__aeabi_dmul>
 800bd72:	9a06      	ldr	r2, [sp, #24]
 800bd74:	9b06      	ldr	r3, [sp, #24]
 800bd76:	4694      	mov	ip, r2
 800bd78:	9308      	str	r3, [sp, #32]
 800bd7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd7c:	9010      	str	r0, [sp, #64]	; 0x40
 800bd7e:	9111      	str	r1, [sp, #68]	; 0x44
 800bd80:	4463      	add	r3, ip
 800bd82:	9319      	str	r3, [sp, #100]	; 0x64
 800bd84:	0029      	movs	r1, r5
 800bd86:	0020      	movs	r0, r4
 800bd88:	f7f6 fd28 	bl	80027dc <__aeabi_d2iz>
 800bd8c:	9017      	str	r0, [sp, #92]	; 0x5c
 800bd8e:	f7f6 fd5b 	bl	8002848 <__aeabi_i2d>
 800bd92:	0002      	movs	r2, r0
 800bd94:	000b      	movs	r3, r1
 800bd96:	0020      	movs	r0, r4
 800bd98:	0029      	movs	r1, r5
 800bd9a:	f7f6 f96f 	bl	800207c <__aeabi_dsub>
 800bd9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bda0:	9a08      	ldr	r2, [sp, #32]
 800bda2:	3330      	adds	r3, #48	; 0x30
 800bda4:	7013      	strb	r3, [r2, #0]
 800bda6:	0013      	movs	r3, r2
 800bda8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdaa:	3301      	adds	r3, #1
 800bdac:	0004      	movs	r4, r0
 800bdae:	000d      	movs	r5, r1
 800bdb0:	9308      	str	r3, [sp, #32]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d12c      	bne.n	800be10 <_dtoa_r+0x680>
 800bdb6:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bdb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bdba:	9a06      	ldr	r2, [sp, #24]
 800bdbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdbe:	4694      	mov	ip, r2
 800bdc0:	4463      	add	r3, ip
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	9308      	str	r3, [sp, #32]
 800bdc6:	4b1e      	ldr	r3, [pc, #120]	; (800be40 <_dtoa_r+0x6b0>)
 800bdc8:	f7f4 ffae 	bl	8000d28 <__aeabi_dadd>
 800bdcc:	0002      	movs	r2, r0
 800bdce:	000b      	movs	r3, r1
 800bdd0:	0020      	movs	r0, r4
 800bdd2:	0029      	movs	r1, r5
 800bdd4:	f7f4 fb54 	bl	8000480 <__aeabi_dcmpgt>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d000      	beq.n	800bdde <_dtoa_r+0x64e>
 800bddc:	e080      	b.n	800bee0 <_dtoa_r+0x750>
 800bdde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bde2:	2000      	movs	r0, #0
 800bde4:	4916      	ldr	r1, [pc, #88]	; (800be40 <_dtoa_r+0x6b0>)
 800bde6:	f7f6 f949 	bl	800207c <__aeabi_dsub>
 800bdea:	0002      	movs	r2, r0
 800bdec:	000b      	movs	r3, r1
 800bdee:	0020      	movs	r0, r4
 800bdf0:	0029      	movs	r1, r5
 800bdf2:	f7f4 fb31 	bl	8000458 <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d100      	bne.n	800bdfc <_dtoa_r+0x66c>
 800bdfa:	e714      	b.n	800bc26 <_dtoa_r+0x496>
 800bdfc:	9b08      	ldr	r3, [sp, #32]
 800bdfe:	001a      	movs	r2, r3
 800be00:	3a01      	subs	r2, #1
 800be02:	9208      	str	r2, [sp, #32]
 800be04:	7812      	ldrb	r2, [r2, #0]
 800be06:	2a30      	cmp	r2, #48	; 0x30
 800be08:	d0f8      	beq.n	800bdfc <_dtoa_r+0x66c>
 800be0a:	9308      	str	r3, [sp, #32]
 800be0c:	9602      	str	r6, [sp, #8]
 800be0e:	e055      	b.n	800bebc <_dtoa_r+0x72c>
 800be10:	2200      	movs	r2, #0
 800be12:	4b06      	ldr	r3, [pc, #24]	; (800be2c <_dtoa_r+0x69c>)
 800be14:	f7f5 fec6 	bl	8001ba4 <__aeabi_dmul>
 800be18:	0004      	movs	r4, r0
 800be1a:	000d      	movs	r5, r1
 800be1c:	e7b2      	b.n	800bd84 <_dtoa_r+0x5f4>
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	0800ea20 	.word	0x0800ea20
 800be24:	0800e9f8 	.word	0x0800e9f8
 800be28:	3ff00000 	.word	0x3ff00000
 800be2c:	40240000 	.word	0x40240000
 800be30:	401c0000 	.word	0x401c0000
 800be34:	fcc00000 	.word	0xfcc00000
 800be38:	40140000 	.word	0x40140000
 800be3c:	7cc00000 	.word	0x7cc00000
 800be40:	3fe00000 	.word	0x3fe00000
 800be44:	9b07      	ldr	r3, [sp, #28]
 800be46:	9e06      	ldr	r6, [sp, #24]
 800be48:	3b01      	subs	r3, #1
 800be4a:	199b      	adds	r3, r3, r6
 800be4c:	930c      	str	r3, [sp, #48]	; 0x30
 800be4e:	9c08      	ldr	r4, [sp, #32]
 800be50:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be56:	0020      	movs	r0, r4
 800be58:	0029      	movs	r1, r5
 800be5a:	f7f5 faa1 	bl	80013a0 <__aeabi_ddiv>
 800be5e:	f7f6 fcbd 	bl	80027dc <__aeabi_d2iz>
 800be62:	9007      	str	r0, [sp, #28]
 800be64:	f7f6 fcf0 	bl	8002848 <__aeabi_i2d>
 800be68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be6c:	f7f5 fe9a 	bl	8001ba4 <__aeabi_dmul>
 800be70:	0002      	movs	r2, r0
 800be72:	000b      	movs	r3, r1
 800be74:	0020      	movs	r0, r4
 800be76:	0029      	movs	r1, r5
 800be78:	f7f6 f900 	bl	800207c <__aeabi_dsub>
 800be7c:	0033      	movs	r3, r6
 800be7e:	9a07      	ldr	r2, [sp, #28]
 800be80:	3601      	adds	r6, #1
 800be82:	3230      	adds	r2, #48	; 0x30
 800be84:	701a      	strb	r2, [r3, #0]
 800be86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be88:	9608      	str	r6, [sp, #32]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d139      	bne.n	800bf02 <_dtoa_r+0x772>
 800be8e:	0002      	movs	r2, r0
 800be90:	000b      	movs	r3, r1
 800be92:	f7f4 ff49 	bl	8000d28 <__aeabi_dadd>
 800be96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be9a:	0004      	movs	r4, r0
 800be9c:	000d      	movs	r5, r1
 800be9e:	f7f4 faef 	bl	8000480 <__aeabi_dcmpgt>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d11b      	bne.n	800bede <_dtoa_r+0x74e>
 800bea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beaa:	0020      	movs	r0, r4
 800beac:	0029      	movs	r1, r5
 800beae:	f7f4 facd 	bl	800044c <__aeabi_dcmpeq>
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d002      	beq.n	800bebc <_dtoa_r+0x72c>
 800beb6:	9b07      	ldr	r3, [sp, #28]
 800beb8:	07db      	lsls	r3, r3, #31
 800beba:	d410      	bmi.n	800bede <_dtoa_r+0x74e>
 800bebc:	0038      	movs	r0, r7
 800bebe:	9905      	ldr	r1, [sp, #20]
 800bec0:	f001 f8aa 	bl	800d018 <_Bfree>
 800bec4:	2300      	movs	r3, #0
 800bec6:	9a08      	ldr	r2, [sp, #32]
 800bec8:	9802      	ldr	r0, [sp, #8]
 800beca:	7013      	strb	r3, [r2, #0]
 800becc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bece:	3001      	adds	r0, #1
 800bed0:	6018      	str	r0, [r3, #0]
 800bed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d100      	bne.n	800beda <_dtoa_r+0x74a>
 800bed8:	e4a6      	b.n	800b828 <_dtoa_r+0x98>
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	e4a4      	b.n	800b828 <_dtoa_r+0x98>
 800bede:	9e02      	ldr	r6, [sp, #8]
 800bee0:	9b08      	ldr	r3, [sp, #32]
 800bee2:	9308      	str	r3, [sp, #32]
 800bee4:	3b01      	subs	r3, #1
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	2a39      	cmp	r2, #57	; 0x39
 800beea:	d106      	bne.n	800befa <_dtoa_r+0x76a>
 800beec:	9a06      	ldr	r2, [sp, #24]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d1f7      	bne.n	800bee2 <_dtoa_r+0x752>
 800bef2:	2230      	movs	r2, #48	; 0x30
 800bef4:	9906      	ldr	r1, [sp, #24]
 800bef6:	3601      	adds	r6, #1
 800bef8:	700a      	strb	r2, [r1, #0]
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	3201      	adds	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	e784      	b.n	800be0c <_dtoa_r+0x67c>
 800bf02:	2200      	movs	r2, #0
 800bf04:	4baa      	ldr	r3, [pc, #680]	; (800c1b0 <_dtoa_r+0xa20>)
 800bf06:	f7f5 fe4d 	bl	8001ba4 <__aeabi_dmul>
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	0004      	movs	r4, r0
 800bf10:	000d      	movs	r5, r1
 800bf12:	f7f4 fa9b 	bl	800044c <__aeabi_dcmpeq>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d09b      	beq.n	800be52 <_dtoa_r+0x6c2>
 800bf1a:	e7cf      	b.n	800bebc <_dtoa_r+0x72c>
 800bf1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf1e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bf20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf22:	2d00      	cmp	r5, #0
 800bf24:	d012      	beq.n	800bf4c <_dtoa_r+0x7bc>
 800bf26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf28:	2a01      	cmp	r2, #1
 800bf2a:	dc66      	bgt.n	800bffa <_dtoa_r+0x86a>
 800bf2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf2e:	2a00      	cmp	r2, #0
 800bf30:	d05d      	beq.n	800bfee <_dtoa_r+0x85e>
 800bf32:	4aa0      	ldr	r2, [pc, #640]	; (800c1b4 <_dtoa_r+0xa24>)
 800bf34:	189b      	adds	r3, r3, r2
 800bf36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf38:	2101      	movs	r1, #1
 800bf3a:	18d2      	adds	r2, r2, r3
 800bf3c:	920a      	str	r2, [sp, #40]	; 0x28
 800bf3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf40:	0038      	movs	r0, r7
 800bf42:	18d3      	adds	r3, r2, r3
 800bf44:	930d      	str	r3, [sp, #52]	; 0x34
 800bf46:	f001 f963 	bl	800d210 <__i2b>
 800bf4a:	0005      	movs	r5, r0
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	dd0e      	ble.n	800bf6e <_dtoa_r+0x7de>
 800bf50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dd0b      	ble.n	800bf6e <_dtoa_r+0x7de>
 800bf56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf58:	0023      	movs	r3, r4
 800bf5a:	4294      	cmp	r4, r2
 800bf5c:	dd00      	ble.n	800bf60 <_dtoa_r+0x7d0>
 800bf5e:	0013      	movs	r3, r2
 800bf60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf62:	1ae4      	subs	r4, r4, r3
 800bf64:	1ad2      	subs	r2, r2, r3
 800bf66:	920a      	str	r2, [sp, #40]	; 0x28
 800bf68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d01f      	beq.n	800bfb4 <_dtoa_r+0x824>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d054      	beq.n	800c024 <_dtoa_r+0x894>
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	dd11      	ble.n	800bfa2 <_dtoa_r+0x812>
 800bf7e:	0029      	movs	r1, r5
 800bf80:	0032      	movs	r2, r6
 800bf82:	0038      	movs	r0, r7
 800bf84:	f001 fa0a 	bl	800d39c <__pow5mult>
 800bf88:	9a05      	ldr	r2, [sp, #20]
 800bf8a:	0001      	movs	r1, r0
 800bf8c:	0005      	movs	r5, r0
 800bf8e:	0038      	movs	r0, r7
 800bf90:	f001 f954 	bl	800d23c <__multiply>
 800bf94:	9905      	ldr	r1, [sp, #20]
 800bf96:	9014      	str	r0, [sp, #80]	; 0x50
 800bf98:	0038      	movs	r0, r7
 800bf9a:	f001 f83d 	bl	800d018 <_Bfree>
 800bf9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfa0:	9305      	str	r3, [sp, #20]
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa4:	1b9a      	subs	r2, r3, r6
 800bfa6:	42b3      	cmp	r3, r6
 800bfa8:	d004      	beq.n	800bfb4 <_dtoa_r+0x824>
 800bfaa:	0038      	movs	r0, r7
 800bfac:	9905      	ldr	r1, [sp, #20]
 800bfae:	f001 f9f5 	bl	800d39c <__pow5mult>
 800bfb2:	9005      	str	r0, [sp, #20]
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	0038      	movs	r0, r7
 800bfb8:	f001 f92a 	bl	800d210 <__i2b>
 800bfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfbe:	0006      	movs	r6, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	dd31      	ble.n	800c028 <_dtoa_r+0x898>
 800bfc4:	001a      	movs	r2, r3
 800bfc6:	0001      	movs	r1, r0
 800bfc8:	0038      	movs	r0, r7
 800bfca:	f001 f9e7 	bl	800d39c <__pow5mult>
 800bfce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfd0:	0006      	movs	r6, r0
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	dd2d      	ble.n	800c032 <_dtoa_r+0x8a2>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	930e      	str	r3, [sp, #56]	; 0x38
 800bfda:	6933      	ldr	r3, [r6, #16]
 800bfdc:	3303      	adds	r3, #3
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	18f3      	adds	r3, r6, r3
 800bfe2:	6858      	ldr	r0, [r3, #4]
 800bfe4:	f001 f8cc 	bl	800d180 <__hi0bits>
 800bfe8:	2320      	movs	r3, #32
 800bfea:	1a18      	subs	r0, r3, r0
 800bfec:	e039      	b.n	800c062 <_dtoa_r+0x8d2>
 800bfee:	2336      	movs	r3, #54	; 0x36
 800bff0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bff2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bff6:	1a9b      	subs	r3, r3, r2
 800bff8:	e79d      	b.n	800bf36 <_dtoa_r+0x7a6>
 800bffa:	9b07      	ldr	r3, [sp, #28]
 800bffc:	1e5e      	subs	r6, r3, #1
 800bffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c000:	42b3      	cmp	r3, r6
 800c002:	db07      	blt.n	800c014 <_dtoa_r+0x884>
 800c004:	1b9e      	subs	r6, r3, r6
 800c006:	9b07      	ldr	r3, [sp, #28]
 800c008:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	da93      	bge.n	800bf36 <_dtoa_r+0x7a6>
 800c00e:	1ae4      	subs	r4, r4, r3
 800c010:	2300      	movs	r3, #0
 800c012:	e790      	b.n	800bf36 <_dtoa_r+0x7a6>
 800c014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c016:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c018:	1af3      	subs	r3, r6, r3
 800c01a:	18d3      	adds	r3, r2, r3
 800c01c:	960e      	str	r6, [sp, #56]	; 0x38
 800c01e:	9315      	str	r3, [sp, #84]	; 0x54
 800c020:	2600      	movs	r6, #0
 800c022:	e7f0      	b.n	800c006 <_dtoa_r+0x876>
 800c024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c026:	e7c0      	b.n	800bfaa <_dtoa_r+0x81a>
 800c028:	2300      	movs	r3, #0
 800c02a:	930e      	str	r3, [sp, #56]	; 0x38
 800c02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c02e:	2b01      	cmp	r3, #1
 800c030:	dc13      	bgt.n	800c05a <_dtoa_r+0x8ca>
 800c032:	2300      	movs	r3, #0
 800c034:	930e      	str	r3, [sp, #56]	; 0x38
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10e      	bne.n	800c05a <_dtoa_r+0x8ca>
 800c03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03e:	031b      	lsls	r3, r3, #12
 800c040:	d10b      	bne.n	800c05a <_dtoa_r+0x8ca>
 800c042:	4b5d      	ldr	r3, [pc, #372]	; (800c1b8 <_dtoa_r+0xa28>)
 800c044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c046:	4213      	tst	r3, r2
 800c048:	d007      	beq.n	800c05a <_dtoa_r+0x8ca>
 800c04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c04c:	3301      	adds	r3, #1
 800c04e:	930a      	str	r3, [sp, #40]	; 0x28
 800c050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c052:	3301      	adds	r3, #1
 800c054:	930d      	str	r3, [sp, #52]	; 0x34
 800c056:	2301      	movs	r3, #1
 800c058:	930e      	str	r3, [sp, #56]	; 0x38
 800c05a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c05c:	2001      	movs	r0, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1bb      	bne.n	800bfda <_dtoa_r+0x84a>
 800c062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c064:	221f      	movs	r2, #31
 800c066:	1818      	adds	r0, r3, r0
 800c068:	0003      	movs	r3, r0
 800c06a:	4013      	ands	r3, r2
 800c06c:	4210      	tst	r0, r2
 800c06e:	d046      	beq.n	800c0fe <_dtoa_r+0x96e>
 800c070:	3201      	adds	r2, #1
 800c072:	1ad2      	subs	r2, r2, r3
 800c074:	2a04      	cmp	r2, #4
 800c076:	dd3f      	ble.n	800c0f8 <_dtoa_r+0x968>
 800c078:	221c      	movs	r2, #28
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c07e:	18e4      	adds	r4, r4, r3
 800c080:	18d2      	adds	r2, r2, r3
 800c082:	920a      	str	r2, [sp, #40]	; 0x28
 800c084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c086:	18d3      	adds	r3, r2, r3
 800c088:	930d      	str	r3, [sp, #52]	; 0x34
 800c08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd05      	ble.n	800c09c <_dtoa_r+0x90c>
 800c090:	001a      	movs	r2, r3
 800c092:	0038      	movs	r0, r7
 800c094:	9905      	ldr	r1, [sp, #20]
 800c096:	f001 f9dd 	bl	800d454 <__lshift>
 800c09a:	9005      	str	r0, [sp, #20]
 800c09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd05      	ble.n	800c0ae <_dtoa_r+0x91e>
 800c0a2:	0031      	movs	r1, r6
 800c0a4:	001a      	movs	r2, r3
 800c0a6:	0038      	movs	r0, r7
 800c0a8:	f001 f9d4 	bl	800d454 <__lshift>
 800c0ac:	0006      	movs	r6, r0
 800c0ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d026      	beq.n	800c102 <_dtoa_r+0x972>
 800c0b4:	0031      	movs	r1, r6
 800c0b6:	9805      	ldr	r0, [sp, #20]
 800c0b8:	f001 fa3a 	bl	800d530 <__mcmp>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	da20      	bge.n	800c102 <_dtoa_r+0x972>
 800c0c0:	9b02      	ldr	r3, [sp, #8]
 800c0c2:	220a      	movs	r2, #10
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	9302      	str	r3, [sp, #8]
 800c0c8:	0038      	movs	r0, r7
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9905      	ldr	r1, [sp, #20]
 800c0ce:	f000 ffc7 	bl	800d060 <__multadd>
 800c0d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0d4:	9005      	str	r0, [sp, #20]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d100      	bne.n	800c0dc <_dtoa_r+0x94c>
 800c0da:	e166      	b.n	800c3aa <_dtoa_r+0xc1a>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	0029      	movs	r1, r5
 800c0e0:	220a      	movs	r2, #10
 800c0e2:	0038      	movs	r0, r7
 800c0e4:	f000 ffbc 	bl	800d060 <__multadd>
 800c0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ea:	0005      	movs	r5, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dc47      	bgt.n	800c180 <_dtoa_r+0x9f0>
 800c0f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	dc0d      	bgt.n	800c112 <_dtoa_r+0x982>
 800c0f6:	e043      	b.n	800c180 <_dtoa_r+0x9f0>
 800c0f8:	2a04      	cmp	r2, #4
 800c0fa:	d0c6      	beq.n	800c08a <_dtoa_r+0x8fa>
 800c0fc:	0013      	movs	r3, r2
 800c0fe:	331c      	adds	r3, #28
 800c100:	e7bc      	b.n	800c07c <_dtoa_r+0x8ec>
 800c102:	9b07      	ldr	r3, [sp, #28]
 800c104:	2b00      	cmp	r3, #0
 800c106:	dc35      	bgt.n	800c174 <_dtoa_r+0x9e4>
 800c108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	dd32      	ble.n	800c174 <_dtoa_r+0x9e4>
 800c10e:	9b07      	ldr	r3, [sp, #28]
 800c110:	930c      	str	r3, [sp, #48]	; 0x30
 800c112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10c      	bne.n	800c132 <_dtoa_r+0x9a2>
 800c118:	0031      	movs	r1, r6
 800c11a:	2205      	movs	r2, #5
 800c11c:	0038      	movs	r0, r7
 800c11e:	f000 ff9f 	bl	800d060 <__multadd>
 800c122:	0006      	movs	r6, r0
 800c124:	0001      	movs	r1, r0
 800c126:	9805      	ldr	r0, [sp, #20]
 800c128:	f001 fa02 	bl	800d530 <__mcmp>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	dd00      	ble.n	800c132 <_dtoa_r+0x9a2>
 800c130:	e5a5      	b.n	800bc7e <_dtoa_r+0x4ee>
 800c132:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c134:	43db      	mvns	r3, r3
 800c136:	9302      	str	r3, [sp, #8]
 800c138:	9b06      	ldr	r3, [sp, #24]
 800c13a:	9308      	str	r3, [sp, #32]
 800c13c:	2400      	movs	r4, #0
 800c13e:	0031      	movs	r1, r6
 800c140:	0038      	movs	r0, r7
 800c142:	f000 ff69 	bl	800d018 <_Bfree>
 800c146:	2d00      	cmp	r5, #0
 800c148:	d100      	bne.n	800c14c <_dtoa_r+0x9bc>
 800c14a:	e6b7      	b.n	800bebc <_dtoa_r+0x72c>
 800c14c:	2c00      	cmp	r4, #0
 800c14e:	d005      	beq.n	800c15c <_dtoa_r+0x9cc>
 800c150:	42ac      	cmp	r4, r5
 800c152:	d003      	beq.n	800c15c <_dtoa_r+0x9cc>
 800c154:	0021      	movs	r1, r4
 800c156:	0038      	movs	r0, r7
 800c158:	f000 ff5e 	bl	800d018 <_Bfree>
 800c15c:	0029      	movs	r1, r5
 800c15e:	0038      	movs	r0, r7
 800c160:	f000 ff5a 	bl	800d018 <_Bfree>
 800c164:	e6aa      	b.n	800bebc <_dtoa_r+0x72c>
 800c166:	2600      	movs	r6, #0
 800c168:	0035      	movs	r5, r6
 800c16a:	e7e2      	b.n	800c132 <_dtoa_r+0x9a2>
 800c16c:	9602      	str	r6, [sp, #8]
 800c16e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c170:	0035      	movs	r5, r6
 800c172:	e584      	b.n	800bc7e <_dtoa_r+0x4ee>
 800c174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d100      	bne.n	800c17c <_dtoa_r+0x9ec>
 800c17a:	e0ce      	b.n	800c31a <_dtoa_r+0xb8a>
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	930c      	str	r3, [sp, #48]	; 0x30
 800c180:	2c00      	cmp	r4, #0
 800c182:	dd05      	ble.n	800c190 <_dtoa_r+0xa00>
 800c184:	0029      	movs	r1, r5
 800c186:	0022      	movs	r2, r4
 800c188:	0038      	movs	r0, r7
 800c18a:	f001 f963 	bl	800d454 <__lshift>
 800c18e:	0005      	movs	r5, r0
 800c190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c192:	0028      	movs	r0, r5
 800c194:	2b00      	cmp	r3, #0
 800c196:	d022      	beq.n	800c1de <_dtoa_r+0xa4e>
 800c198:	0038      	movs	r0, r7
 800c19a:	6869      	ldr	r1, [r5, #4]
 800c19c:	f000 fef8 	bl	800cf90 <_Balloc>
 800c1a0:	1e04      	subs	r4, r0, #0
 800c1a2:	d10f      	bne.n	800c1c4 <_dtoa_r+0xa34>
 800c1a4:	0002      	movs	r2, r0
 800c1a6:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <_dtoa_r+0xa2c>)
 800c1a8:	4905      	ldr	r1, [pc, #20]	; (800c1c0 <_dtoa_r+0xa30>)
 800c1aa:	f7ff fb06 	bl	800b7ba <_dtoa_r+0x2a>
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	40240000 	.word	0x40240000
 800c1b4:	00000433 	.word	0x00000433
 800c1b8:	7ff00000 	.word	0x7ff00000
 800c1bc:	0800e8a8 	.word	0x0800e8a8
 800c1c0:	000002ea 	.word	0x000002ea
 800c1c4:	0029      	movs	r1, r5
 800c1c6:	692b      	ldr	r3, [r5, #16]
 800c1c8:	310c      	adds	r1, #12
 800c1ca:	1c9a      	adds	r2, r3, #2
 800c1cc:	0092      	lsls	r2, r2, #2
 800c1ce:	300c      	adds	r0, #12
 800c1d0:	f000 fed5 	bl	800cf7e <memcpy>
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	0021      	movs	r1, r4
 800c1d8:	0038      	movs	r0, r7
 800c1da:	f001 f93b 	bl	800d454 <__lshift>
 800c1de:	9b06      	ldr	r3, [sp, #24]
 800c1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	189b      	adds	r3, r3, r2
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	002c      	movs	r4, r5
 800c1ec:	0005      	movs	r5, r0
 800c1ee:	9314      	str	r3, [sp, #80]	; 0x50
 800c1f0:	9b08      	ldr	r3, [sp, #32]
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1f6:	0031      	movs	r1, r6
 800c1f8:	9805      	ldr	r0, [sp, #20]
 800c1fa:	f7ff fa3d 	bl	800b678 <quorem>
 800c1fe:	0003      	movs	r3, r0
 800c200:	0021      	movs	r1, r4
 800c202:	3330      	adds	r3, #48	; 0x30
 800c204:	900d      	str	r0, [sp, #52]	; 0x34
 800c206:	9805      	ldr	r0, [sp, #20]
 800c208:	9307      	str	r3, [sp, #28]
 800c20a:	f001 f991 	bl	800d530 <__mcmp>
 800c20e:	002a      	movs	r2, r5
 800c210:	900e      	str	r0, [sp, #56]	; 0x38
 800c212:	0031      	movs	r1, r6
 800c214:	0038      	movs	r0, r7
 800c216:	f001 f9a7 	bl	800d568 <__mdiff>
 800c21a:	68c3      	ldr	r3, [r0, #12]
 800c21c:	9008      	str	r0, [sp, #32]
 800c21e:	9310      	str	r3, [sp, #64]	; 0x40
 800c220:	2301      	movs	r3, #1
 800c222:	930c      	str	r3, [sp, #48]	; 0x30
 800c224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d104      	bne.n	800c234 <_dtoa_r+0xaa4>
 800c22a:	0001      	movs	r1, r0
 800c22c:	9805      	ldr	r0, [sp, #20]
 800c22e:	f001 f97f 	bl	800d530 <__mcmp>
 800c232:	900c      	str	r0, [sp, #48]	; 0x30
 800c234:	0038      	movs	r0, r7
 800c236:	9908      	ldr	r1, [sp, #32]
 800c238:	f000 feee 	bl	800d018 <_Bfree>
 800c23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c240:	3301      	adds	r3, #1
 800c242:	9308      	str	r3, [sp, #32]
 800c244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c246:	4313      	orrs	r3, r2
 800c248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c24a:	4313      	orrs	r3, r2
 800c24c:	d10c      	bne.n	800c268 <_dtoa_r+0xad8>
 800c24e:	9b07      	ldr	r3, [sp, #28]
 800c250:	2b39      	cmp	r3, #57	; 0x39
 800c252:	d026      	beq.n	800c2a2 <_dtoa_r+0xb12>
 800c254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd02      	ble.n	800c260 <_dtoa_r+0xad0>
 800c25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c25c:	3331      	adds	r3, #49	; 0x31
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c262:	9a07      	ldr	r2, [sp, #28]
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	e76a      	b.n	800c13e <_dtoa_r+0x9ae>
 800c268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	db04      	blt.n	800c278 <_dtoa_r+0xae8>
 800c26e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c270:	4313      	orrs	r3, r2
 800c272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c274:	4313      	orrs	r3, r2
 800c276:	d11f      	bne.n	800c2b8 <_dtoa_r+0xb28>
 800c278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	ddf0      	ble.n	800c260 <_dtoa_r+0xad0>
 800c27e:	9905      	ldr	r1, [sp, #20]
 800c280:	2201      	movs	r2, #1
 800c282:	0038      	movs	r0, r7
 800c284:	f001 f8e6 	bl	800d454 <__lshift>
 800c288:	0031      	movs	r1, r6
 800c28a:	9005      	str	r0, [sp, #20]
 800c28c:	f001 f950 	bl	800d530 <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	dc03      	bgt.n	800c29c <_dtoa_r+0xb0c>
 800c294:	d1e4      	bne.n	800c260 <_dtoa_r+0xad0>
 800c296:	9b07      	ldr	r3, [sp, #28]
 800c298:	07db      	lsls	r3, r3, #31
 800c29a:	d5e1      	bpl.n	800c260 <_dtoa_r+0xad0>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b39      	cmp	r3, #57	; 0x39
 800c2a0:	d1db      	bne.n	800c25a <_dtoa_r+0xaca>
 800c2a2:	2339      	movs	r3, #57	; 0x39
 800c2a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2a6:	7013      	strb	r3, [r2, #0]
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	9308      	str	r3, [sp, #32]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	2a39      	cmp	r2, #57	; 0x39
 800c2b2:	d068      	beq.n	800c386 <_dtoa_r+0xbf6>
 800c2b4:	3201      	adds	r2, #1
 800c2b6:	e7d5      	b.n	800c264 <_dtoa_r+0xad4>
 800c2b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	dd07      	ble.n	800c2ce <_dtoa_r+0xb3e>
 800c2be:	9b07      	ldr	r3, [sp, #28]
 800c2c0:	2b39      	cmp	r3, #57	; 0x39
 800c2c2:	d0ee      	beq.n	800c2a2 <_dtoa_r+0xb12>
 800c2c4:	9b07      	ldr	r3, [sp, #28]
 800c2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	7013      	strb	r3, [r2, #0]
 800c2cc:	e737      	b.n	800c13e <_dtoa_r+0x9ae>
 800c2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d0:	9a07      	ldr	r2, [sp, #28]
 800c2d2:	701a      	strb	r2, [r3, #0]
 800c2d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d03e      	beq.n	800c35a <_dtoa_r+0xbca>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	220a      	movs	r2, #10
 800c2e0:	9905      	ldr	r1, [sp, #20]
 800c2e2:	0038      	movs	r0, r7
 800c2e4:	f000 febc 	bl	800d060 <__multadd>
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	9005      	str	r0, [sp, #20]
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	0021      	movs	r1, r4
 800c2f0:	0038      	movs	r0, r7
 800c2f2:	42ac      	cmp	r4, r5
 800c2f4:	d106      	bne.n	800c304 <_dtoa_r+0xb74>
 800c2f6:	f000 feb3 	bl	800d060 <__multadd>
 800c2fa:	0004      	movs	r4, r0
 800c2fc:	0005      	movs	r5, r0
 800c2fe:	9b08      	ldr	r3, [sp, #32]
 800c300:	930a      	str	r3, [sp, #40]	; 0x28
 800c302:	e778      	b.n	800c1f6 <_dtoa_r+0xa66>
 800c304:	f000 feac 	bl	800d060 <__multadd>
 800c308:	0029      	movs	r1, r5
 800c30a:	0004      	movs	r4, r0
 800c30c:	2300      	movs	r3, #0
 800c30e:	220a      	movs	r2, #10
 800c310:	0038      	movs	r0, r7
 800c312:	f000 fea5 	bl	800d060 <__multadd>
 800c316:	0005      	movs	r5, r0
 800c318:	e7f1      	b.n	800c2fe <_dtoa_r+0xb6e>
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	930c      	str	r3, [sp, #48]	; 0x30
 800c31e:	2400      	movs	r4, #0
 800c320:	0031      	movs	r1, r6
 800c322:	9805      	ldr	r0, [sp, #20]
 800c324:	f7ff f9a8 	bl	800b678 <quorem>
 800c328:	9b06      	ldr	r3, [sp, #24]
 800c32a:	3030      	adds	r0, #48	; 0x30
 800c32c:	5518      	strb	r0, [r3, r4]
 800c32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c330:	3401      	adds	r4, #1
 800c332:	9007      	str	r0, [sp, #28]
 800c334:	42a3      	cmp	r3, r4
 800c336:	dd07      	ble.n	800c348 <_dtoa_r+0xbb8>
 800c338:	2300      	movs	r3, #0
 800c33a:	220a      	movs	r2, #10
 800c33c:	0038      	movs	r0, r7
 800c33e:	9905      	ldr	r1, [sp, #20]
 800c340:	f000 fe8e 	bl	800d060 <__multadd>
 800c344:	9005      	str	r0, [sp, #20]
 800c346:	e7eb      	b.n	800c320 <_dtoa_r+0xb90>
 800c348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c34a:	2001      	movs	r0, #1
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dd00      	ble.n	800c352 <_dtoa_r+0xbc2>
 800c350:	0018      	movs	r0, r3
 800c352:	2400      	movs	r4, #0
 800c354:	9b06      	ldr	r3, [sp, #24]
 800c356:	181b      	adds	r3, r3, r0
 800c358:	9308      	str	r3, [sp, #32]
 800c35a:	9905      	ldr	r1, [sp, #20]
 800c35c:	2201      	movs	r2, #1
 800c35e:	0038      	movs	r0, r7
 800c360:	f001 f878 	bl	800d454 <__lshift>
 800c364:	0031      	movs	r1, r6
 800c366:	9005      	str	r0, [sp, #20]
 800c368:	f001 f8e2 	bl	800d530 <__mcmp>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	dc9b      	bgt.n	800c2a8 <_dtoa_r+0xb18>
 800c370:	d102      	bne.n	800c378 <_dtoa_r+0xbe8>
 800c372:	9b07      	ldr	r3, [sp, #28]
 800c374:	07db      	lsls	r3, r3, #31
 800c376:	d497      	bmi.n	800c2a8 <_dtoa_r+0xb18>
 800c378:	9b08      	ldr	r3, [sp, #32]
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	781a      	ldrb	r2, [r3, #0]
 800c380:	2a30      	cmp	r2, #48	; 0x30
 800c382:	d0fa      	beq.n	800c37a <_dtoa_r+0xbea>
 800c384:	e6db      	b.n	800c13e <_dtoa_r+0x9ae>
 800c386:	9a06      	ldr	r2, [sp, #24]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d18e      	bne.n	800c2aa <_dtoa_r+0xb1a>
 800c38c:	9b02      	ldr	r3, [sp, #8]
 800c38e:	3301      	adds	r3, #1
 800c390:	9302      	str	r3, [sp, #8]
 800c392:	2331      	movs	r3, #49	; 0x31
 800c394:	e799      	b.n	800c2ca <_dtoa_r+0xb3a>
 800c396:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <_dtoa_r+0xc2c>)
 800c398:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c39a:	9306      	str	r3, [sp, #24]
 800c39c:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <_dtoa_r+0xc30>)
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	d001      	beq.n	800c3a6 <_dtoa_r+0xc16>
 800c3a2:	f7ff fa3f 	bl	800b824 <_dtoa_r+0x94>
 800c3a6:	f7ff fa3f 	bl	800b828 <_dtoa_r+0x98>
 800c3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	dcb6      	bgt.n	800c31e <_dtoa_r+0xb8e>
 800c3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	dd00      	ble.n	800c3b8 <_dtoa_r+0xc28>
 800c3b6:	e6ac      	b.n	800c112 <_dtoa_r+0x982>
 800c3b8:	e7b1      	b.n	800c31e <_dtoa_r+0xb8e>
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	0800e829 	.word	0x0800e829
 800c3c0:	0800e831 	.word	0x0800e831

0800c3c4 <__sflush_r>:
 800c3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c6:	898b      	ldrh	r3, [r1, #12]
 800c3c8:	0005      	movs	r5, r0
 800c3ca:	000c      	movs	r4, r1
 800c3cc:	071a      	lsls	r2, r3, #28
 800c3ce:	d45f      	bmi.n	800c490 <__sflush_r+0xcc>
 800c3d0:	684a      	ldr	r2, [r1, #4]
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	dc04      	bgt.n	800c3e0 <__sflush_r+0x1c>
 800c3d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c3d8:	2a00      	cmp	r2, #0
 800c3da:	dc01      	bgt.n	800c3e0 <__sflush_r+0x1c>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c3e2:	2f00      	cmp	r7, #0
 800c3e4:	d0fa      	beq.n	800c3dc <__sflush_r+0x18>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2180      	movs	r1, #128	; 0x80
 800c3ea:	682e      	ldr	r6, [r5, #0]
 800c3ec:	602a      	str	r2, [r5, #0]
 800c3ee:	001a      	movs	r2, r3
 800c3f0:	0149      	lsls	r1, r1, #5
 800c3f2:	400a      	ands	r2, r1
 800c3f4:	420b      	tst	r3, r1
 800c3f6:	d034      	beq.n	800c462 <__sflush_r+0x9e>
 800c3f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	075b      	lsls	r3, r3, #29
 800c3fe:	d506      	bpl.n	800c40e <__sflush_r+0x4a>
 800c400:	6863      	ldr	r3, [r4, #4]
 800c402:	1ac0      	subs	r0, r0, r3
 800c404:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <__sflush_r+0x4a>
 800c40a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c40c:	1ac0      	subs	r0, r0, r3
 800c40e:	0002      	movs	r2, r0
 800c410:	6a21      	ldr	r1, [r4, #32]
 800c412:	2300      	movs	r3, #0
 800c414:	0028      	movs	r0, r5
 800c416:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c418:	47b8      	blx	r7
 800c41a:	89a1      	ldrh	r1, [r4, #12]
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d106      	bne.n	800c42e <__sflush_r+0x6a>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b1d      	cmp	r3, #29
 800c424:	d831      	bhi.n	800c48a <__sflush_r+0xc6>
 800c426:	4a2c      	ldr	r2, [pc, #176]	; (800c4d8 <__sflush_r+0x114>)
 800c428:	40da      	lsrs	r2, r3
 800c42a:	07d3      	lsls	r3, r2, #31
 800c42c:	d52d      	bpl.n	800c48a <__sflush_r+0xc6>
 800c42e:	2300      	movs	r3, #0
 800c430:	6063      	str	r3, [r4, #4]
 800c432:	6923      	ldr	r3, [r4, #16]
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	04cb      	lsls	r3, r1, #19
 800c438:	d505      	bpl.n	800c446 <__sflush_r+0x82>
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	d102      	bne.n	800c444 <__sflush_r+0x80>
 800c43e:	682b      	ldr	r3, [r5, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d100      	bne.n	800c446 <__sflush_r+0x82>
 800c444:	6560      	str	r0, [r4, #84]	; 0x54
 800c446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c448:	602e      	str	r6, [r5, #0]
 800c44a:	2900      	cmp	r1, #0
 800c44c:	d0c6      	beq.n	800c3dc <__sflush_r+0x18>
 800c44e:	0023      	movs	r3, r4
 800c450:	3344      	adds	r3, #68	; 0x44
 800c452:	4299      	cmp	r1, r3
 800c454:	d002      	beq.n	800c45c <__sflush_r+0x98>
 800c456:	0028      	movs	r0, r5
 800c458:	f001 fa90 	bl	800d97c <_free_r>
 800c45c:	2000      	movs	r0, #0
 800c45e:	6360      	str	r0, [r4, #52]	; 0x34
 800c460:	e7bd      	b.n	800c3de <__sflush_r+0x1a>
 800c462:	2301      	movs	r3, #1
 800c464:	0028      	movs	r0, r5
 800c466:	6a21      	ldr	r1, [r4, #32]
 800c468:	47b8      	blx	r7
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d1c5      	bne.n	800c3fa <__sflush_r+0x36>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d0c2      	beq.n	800c3fa <__sflush_r+0x36>
 800c474:	2b1d      	cmp	r3, #29
 800c476:	d001      	beq.n	800c47c <__sflush_r+0xb8>
 800c478:	2b16      	cmp	r3, #22
 800c47a:	d101      	bne.n	800c480 <__sflush_r+0xbc>
 800c47c:	602e      	str	r6, [r5, #0]
 800c47e:	e7ad      	b.n	800c3dc <__sflush_r+0x18>
 800c480:	2340      	movs	r3, #64	; 0x40
 800c482:	89a2      	ldrh	r2, [r4, #12]
 800c484:	4313      	orrs	r3, r2
 800c486:	81a3      	strh	r3, [r4, #12]
 800c488:	e7a9      	b.n	800c3de <__sflush_r+0x1a>
 800c48a:	2340      	movs	r3, #64	; 0x40
 800c48c:	430b      	orrs	r3, r1
 800c48e:	e7fa      	b.n	800c486 <__sflush_r+0xc2>
 800c490:	690f      	ldr	r7, [r1, #16]
 800c492:	2f00      	cmp	r7, #0
 800c494:	d0a2      	beq.n	800c3dc <__sflush_r+0x18>
 800c496:	680a      	ldr	r2, [r1, #0]
 800c498:	600f      	str	r7, [r1, #0]
 800c49a:	1bd2      	subs	r2, r2, r7
 800c49c:	9201      	str	r2, [sp, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	079b      	lsls	r3, r3, #30
 800c4a2:	d100      	bne.n	800c4a6 <__sflush_r+0xe2>
 800c4a4:	694a      	ldr	r2, [r1, #20]
 800c4a6:	60a2      	str	r2, [r4, #8]
 800c4a8:	9b01      	ldr	r3, [sp, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	dc00      	bgt.n	800c4b0 <__sflush_r+0xec>
 800c4ae:	e795      	b.n	800c3dc <__sflush_r+0x18>
 800c4b0:	003a      	movs	r2, r7
 800c4b2:	0028      	movs	r0, r5
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	6a21      	ldr	r1, [r4, #32]
 800c4b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4ba:	47b0      	blx	r6
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	dc06      	bgt.n	800c4ce <__sflush_r+0x10a>
 800c4c0:	2340      	movs	r3, #64	; 0x40
 800c4c2:	2001      	movs	r0, #1
 800c4c4:	89a2      	ldrh	r2, [r4, #12]
 800c4c6:	4240      	negs	r0, r0
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	81a3      	strh	r3, [r4, #12]
 800c4cc:	e787      	b.n	800c3de <__sflush_r+0x1a>
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	183f      	adds	r7, r7, r0
 800c4d2:	1a1b      	subs	r3, r3, r0
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	e7e7      	b.n	800c4a8 <__sflush_r+0xe4>
 800c4d8:	20400001 	.word	0x20400001

0800c4dc <_fflush_r>:
 800c4dc:	690b      	ldr	r3, [r1, #16]
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	0005      	movs	r5, r0
 800c4e2:	000c      	movs	r4, r1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d102      	bne.n	800c4ee <_fflush_r+0x12>
 800c4e8:	2500      	movs	r5, #0
 800c4ea:	0028      	movs	r0, r5
 800c4ec:	bd70      	pop	{r4, r5, r6, pc}
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d004      	beq.n	800c4fc <_fflush_r+0x20>
 800c4f2:	6983      	ldr	r3, [r0, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <_fflush_r+0x20>
 800c4f8:	f000 f892 	bl	800c620 <__sinit>
 800c4fc:	4b14      	ldr	r3, [pc, #80]	; (800c550 <_fflush_r+0x74>)
 800c4fe:	429c      	cmp	r4, r3
 800c500:	d11b      	bne.n	800c53a <_fflush_r+0x5e>
 800c502:	686c      	ldr	r4, [r5, #4]
 800c504:	220c      	movs	r2, #12
 800c506:	5ea3      	ldrsh	r3, [r4, r2]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0ed      	beq.n	800c4e8 <_fflush_r+0xc>
 800c50c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c50e:	07d2      	lsls	r2, r2, #31
 800c510:	d404      	bmi.n	800c51c <_fflush_r+0x40>
 800c512:	059b      	lsls	r3, r3, #22
 800c514:	d402      	bmi.n	800c51c <_fflush_r+0x40>
 800c516:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c518:	f000 fc9b 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800c51c:	0028      	movs	r0, r5
 800c51e:	0021      	movs	r1, r4
 800c520:	f7ff ff50 	bl	800c3c4 <__sflush_r>
 800c524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c526:	0005      	movs	r5, r0
 800c528:	07db      	lsls	r3, r3, #31
 800c52a:	d4de      	bmi.n	800c4ea <_fflush_r+0xe>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	059b      	lsls	r3, r3, #22
 800c530:	d4db      	bmi.n	800c4ea <_fflush_r+0xe>
 800c532:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c534:	f000 fc8e 	bl	800ce54 <__retarget_lock_release_recursive>
 800c538:	e7d7      	b.n	800c4ea <_fflush_r+0xe>
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <_fflush_r+0x78>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	d101      	bne.n	800c544 <_fflush_r+0x68>
 800c540:	68ac      	ldr	r4, [r5, #8]
 800c542:	e7df      	b.n	800c504 <_fflush_r+0x28>
 800c544:	4b04      	ldr	r3, [pc, #16]	; (800c558 <_fflush_r+0x7c>)
 800c546:	429c      	cmp	r4, r3
 800c548:	d1dc      	bne.n	800c504 <_fflush_r+0x28>
 800c54a:	68ec      	ldr	r4, [r5, #12]
 800c54c:	e7da      	b.n	800c504 <_fflush_r+0x28>
 800c54e:	46c0      	nop			; (mov r8, r8)
 800c550:	0800e8dc 	.word	0x0800e8dc
 800c554:	0800e8fc 	.word	0x0800e8fc
 800c558:	0800e8bc 	.word	0x0800e8bc

0800c55c <std>:
 800c55c:	2300      	movs	r3, #0
 800c55e:	b510      	push	{r4, lr}
 800c560:	0004      	movs	r4, r0
 800c562:	6003      	str	r3, [r0, #0]
 800c564:	6043      	str	r3, [r0, #4]
 800c566:	6083      	str	r3, [r0, #8]
 800c568:	8181      	strh	r1, [r0, #12]
 800c56a:	6643      	str	r3, [r0, #100]	; 0x64
 800c56c:	0019      	movs	r1, r3
 800c56e:	81c2      	strh	r2, [r0, #14]
 800c570:	6103      	str	r3, [r0, #16]
 800c572:	6143      	str	r3, [r0, #20]
 800c574:	6183      	str	r3, [r0, #24]
 800c576:	2208      	movs	r2, #8
 800c578:	305c      	adds	r0, #92	; 0x5c
 800c57a:	f7fd f9b1 	bl	80098e0 <memset>
 800c57e:	4b05      	ldr	r3, [pc, #20]	; (800c594 <std+0x38>)
 800c580:	6224      	str	r4, [r4, #32]
 800c582:	6263      	str	r3, [r4, #36]	; 0x24
 800c584:	4b04      	ldr	r3, [pc, #16]	; (800c598 <std+0x3c>)
 800c586:	62a3      	str	r3, [r4, #40]	; 0x28
 800c588:	4b04      	ldr	r3, [pc, #16]	; (800c59c <std+0x40>)
 800c58a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c58c:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <std+0x44>)
 800c58e:	6323      	str	r3, [r4, #48]	; 0x30
 800c590:	bd10      	pop	{r4, pc}
 800c592:	46c0      	nop			; (mov r8, r8)
 800c594:	0800e0f9 	.word	0x0800e0f9
 800c598:	0800e121 	.word	0x0800e121
 800c59c:	0800e159 	.word	0x0800e159
 800c5a0:	0800e185 	.word	0x0800e185

0800c5a4 <_cleanup_r>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	4902      	ldr	r1, [pc, #8]	; (800c5b0 <_cleanup_r+0xc>)
 800c5a8:	f000 f8ba 	bl	800c720 <_fwalk_reent>
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	46c0      	nop			; (mov r8, r8)
 800c5b0:	0800c4dd 	.word	0x0800c4dd

0800c5b4 <__sfmoreglue>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	2568      	movs	r5, #104	; 0x68
 800c5b8:	1e4a      	subs	r2, r1, #1
 800c5ba:	4355      	muls	r5, r2
 800c5bc:	000e      	movs	r6, r1
 800c5be:	0029      	movs	r1, r5
 800c5c0:	3174      	adds	r1, #116	; 0x74
 800c5c2:	f001 fa47 	bl	800da54 <_malloc_r>
 800c5c6:	1e04      	subs	r4, r0, #0
 800c5c8:	d008      	beq.n	800c5dc <__sfmoreglue+0x28>
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	002a      	movs	r2, r5
 800c5ce:	6001      	str	r1, [r0, #0]
 800c5d0:	6046      	str	r6, [r0, #4]
 800c5d2:	300c      	adds	r0, #12
 800c5d4:	60a0      	str	r0, [r4, #8]
 800c5d6:	3268      	adds	r2, #104	; 0x68
 800c5d8:	f7fd f982 	bl	80098e0 <memset>
 800c5dc:	0020      	movs	r0, r4
 800c5de:	bd70      	pop	{r4, r5, r6, pc}

0800c5e0 <__sfp_lock_acquire>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	4802      	ldr	r0, [pc, #8]	; (800c5ec <__sfp_lock_acquire+0xc>)
 800c5e4:	f000 fc35 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	46c0      	nop			; (mov r8, r8)
 800c5ec:	200004d1 	.word	0x200004d1

0800c5f0 <__sfp_lock_release>:
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	4802      	ldr	r0, [pc, #8]	; (800c5fc <__sfp_lock_release+0xc>)
 800c5f4:	f000 fc2e 	bl	800ce54 <__retarget_lock_release_recursive>
 800c5f8:	bd10      	pop	{r4, pc}
 800c5fa:	46c0      	nop			; (mov r8, r8)
 800c5fc:	200004d1 	.word	0x200004d1

0800c600 <__sinit_lock_acquire>:
 800c600:	b510      	push	{r4, lr}
 800c602:	4802      	ldr	r0, [pc, #8]	; (800c60c <__sinit_lock_acquire+0xc>)
 800c604:	f000 fc25 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	46c0      	nop			; (mov r8, r8)
 800c60c:	200004d2 	.word	0x200004d2

0800c610 <__sinit_lock_release>:
 800c610:	b510      	push	{r4, lr}
 800c612:	4802      	ldr	r0, [pc, #8]	; (800c61c <__sinit_lock_release+0xc>)
 800c614:	f000 fc1e 	bl	800ce54 <__retarget_lock_release_recursive>
 800c618:	bd10      	pop	{r4, pc}
 800c61a:	46c0      	nop			; (mov r8, r8)
 800c61c:	200004d2 	.word	0x200004d2

0800c620 <__sinit>:
 800c620:	b513      	push	{r0, r1, r4, lr}
 800c622:	0004      	movs	r4, r0
 800c624:	f7ff ffec 	bl	800c600 <__sinit_lock_acquire>
 800c628:	69a3      	ldr	r3, [r4, #24]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d002      	beq.n	800c634 <__sinit+0x14>
 800c62e:	f7ff ffef 	bl	800c610 <__sinit_lock_release>
 800c632:	bd13      	pop	{r0, r1, r4, pc}
 800c634:	64a3      	str	r3, [r4, #72]	; 0x48
 800c636:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c638:	6523      	str	r3, [r4, #80]	; 0x50
 800c63a:	4b13      	ldr	r3, [pc, #76]	; (800c688 <__sinit+0x68>)
 800c63c:	4a13      	ldr	r2, [pc, #76]	; (800c68c <__sinit+0x6c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	62a2      	str	r2, [r4, #40]	; 0x28
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	42a3      	cmp	r3, r4
 800c646:	d101      	bne.n	800c64c <__sinit+0x2c>
 800c648:	2301      	movs	r3, #1
 800c64a:	61a3      	str	r3, [r4, #24]
 800c64c:	0020      	movs	r0, r4
 800c64e:	f000 f81f 	bl	800c690 <__sfp>
 800c652:	6060      	str	r0, [r4, #4]
 800c654:	0020      	movs	r0, r4
 800c656:	f000 f81b 	bl	800c690 <__sfp>
 800c65a:	60a0      	str	r0, [r4, #8]
 800c65c:	0020      	movs	r0, r4
 800c65e:	f000 f817 	bl	800c690 <__sfp>
 800c662:	2200      	movs	r2, #0
 800c664:	2104      	movs	r1, #4
 800c666:	60e0      	str	r0, [r4, #12]
 800c668:	6860      	ldr	r0, [r4, #4]
 800c66a:	f7ff ff77 	bl	800c55c <std>
 800c66e:	2201      	movs	r2, #1
 800c670:	2109      	movs	r1, #9
 800c672:	68a0      	ldr	r0, [r4, #8]
 800c674:	f7ff ff72 	bl	800c55c <std>
 800c678:	2202      	movs	r2, #2
 800c67a:	2112      	movs	r1, #18
 800c67c:	68e0      	ldr	r0, [r4, #12]
 800c67e:	f7ff ff6d 	bl	800c55c <std>
 800c682:	2301      	movs	r3, #1
 800c684:	61a3      	str	r3, [r4, #24]
 800c686:	e7d2      	b.n	800c62e <__sinit+0xe>
 800c688:	0800e698 	.word	0x0800e698
 800c68c:	0800c5a5 	.word	0x0800c5a5

0800c690 <__sfp>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	0007      	movs	r7, r0
 800c694:	f7ff ffa4 	bl	800c5e0 <__sfp_lock_acquire>
 800c698:	4b1f      	ldr	r3, [pc, #124]	; (800c718 <__sfp+0x88>)
 800c69a:	681e      	ldr	r6, [r3, #0]
 800c69c:	69b3      	ldr	r3, [r6, #24]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <__sfp+0x18>
 800c6a2:	0030      	movs	r0, r6
 800c6a4:	f7ff ffbc 	bl	800c620 <__sinit>
 800c6a8:	3648      	adds	r6, #72	; 0x48
 800c6aa:	68b4      	ldr	r4, [r6, #8]
 800c6ac:	6873      	ldr	r3, [r6, #4]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	d504      	bpl.n	800c6bc <__sfp+0x2c>
 800c6b2:	6833      	ldr	r3, [r6, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d022      	beq.n	800c6fe <__sfp+0x6e>
 800c6b8:	6836      	ldr	r6, [r6, #0]
 800c6ba:	e7f6      	b.n	800c6aa <__sfp+0x1a>
 800c6bc:	220c      	movs	r2, #12
 800c6be:	5ea5      	ldrsh	r5, [r4, r2]
 800c6c0:	2d00      	cmp	r5, #0
 800c6c2:	d11a      	bne.n	800c6fa <__sfp+0x6a>
 800c6c4:	0020      	movs	r0, r4
 800c6c6:	4b15      	ldr	r3, [pc, #84]	; (800c71c <__sfp+0x8c>)
 800c6c8:	3058      	adds	r0, #88	; 0x58
 800c6ca:	60e3      	str	r3, [r4, #12]
 800c6cc:	6665      	str	r5, [r4, #100]	; 0x64
 800c6ce:	f000 fbbf 	bl	800ce50 <__retarget_lock_init_recursive>
 800c6d2:	f7ff ff8d 	bl	800c5f0 <__sfp_lock_release>
 800c6d6:	0020      	movs	r0, r4
 800c6d8:	2208      	movs	r2, #8
 800c6da:	0029      	movs	r1, r5
 800c6dc:	6025      	str	r5, [r4, #0]
 800c6de:	60a5      	str	r5, [r4, #8]
 800c6e0:	6065      	str	r5, [r4, #4]
 800c6e2:	6125      	str	r5, [r4, #16]
 800c6e4:	6165      	str	r5, [r4, #20]
 800c6e6:	61a5      	str	r5, [r4, #24]
 800c6e8:	305c      	adds	r0, #92	; 0x5c
 800c6ea:	f7fd f8f9 	bl	80098e0 <memset>
 800c6ee:	6365      	str	r5, [r4, #52]	; 0x34
 800c6f0:	63a5      	str	r5, [r4, #56]	; 0x38
 800c6f2:	64a5      	str	r5, [r4, #72]	; 0x48
 800c6f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c6f6:	0020      	movs	r0, r4
 800c6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6fa:	3468      	adds	r4, #104	; 0x68
 800c6fc:	e7d7      	b.n	800c6ae <__sfp+0x1e>
 800c6fe:	2104      	movs	r1, #4
 800c700:	0038      	movs	r0, r7
 800c702:	f7ff ff57 	bl	800c5b4 <__sfmoreglue>
 800c706:	1e04      	subs	r4, r0, #0
 800c708:	6030      	str	r0, [r6, #0]
 800c70a:	d1d5      	bne.n	800c6b8 <__sfp+0x28>
 800c70c:	f7ff ff70 	bl	800c5f0 <__sfp_lock_release>
 800c710:	230c      	movs	r3, #12
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	e7ef      	b.n	800c6f6 <__sfp+0x66>
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	0800e698 	.word	0x0800e698
 800c71c:	ffff0001 	.word	0xffff0001

0800c720 <_fwalk_reent>:
 800c720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c722:	0004      	movs	r4, r0
 800c724:	0006      	movs	r6, r0
 800c726:	2700      	movs	r7, #0
 800c728:	9101      	str	r1, [sp, #4]
 800c72a:	3448      	adds	r4, #72	; 0x48
 800c72c:	6863      	ldr	r3, [r4, #4]
 800c72e:	68a5      	ldr	r5, [r4, #8]
 800c730:	9300      	str	r3, [sp, #0]
 800c732:	9b00      	ldr	r3, [sp, #0]
 800c734:	3b01      	subs	r3, #1
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	d504      	bpl.n	800c744 <_fwalk_reent+0x24>
 800c73a:	6824      	ldr	r4, [r4, #0]
 800c73c:	2c00      	cmp	r4, #0
 800c73e:	d1f5      	bne.n	800c72c <_fwalk_reent+0xc>
 800c740:	0038      	movs	r0, r7
 800c742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c744:	89ab      	ldrh	r3, [r5, #12]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d908      	bls.n	800c75c <_fwalk_reent+0x3c>
 800c74a:	220e      	movs	r2, #14
 800c74c:	5eab      	ldrsh	r3, [r5, r2]
 800c74e:	3301      	adds	r3, #1
 800c750:	d004      	beq.n	800c75c <_fwalk_reent+0x3c>
 800c752:	0029      	movs	r1, r5
 800c754:	0030      	movs	r0, r6
 800c756:	9b01      	ldr	r3, [sp, #4]
 800c758:	4798      	blx	r3
 800c75a:	4307      	orrs	r7, r0
 800c75c:	3568      	adds	r5, #104	; 0x68
 800c75e:	e7e8      	b.n	800c732 <_fwalk_reent+0x12>

0800c760 <rshift>:
 800c760:	0002      	movs	r2, r0
 800c762:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c764:	6904      	ldr	r4, [r0, #16]
 800c766:	3214      	adds	r2, #20
 800c768:	0013      	movs	r3, r2
 800c76a:	b085      	sub	sp, #20
 800c76c:	114f      	asrs	r7, r1, #5
 800c76e:	42bc      	cmp	r4, r7
 800c770:	dd31      	ble.n	800c7d6 <rshift+0x76>
 800c772:	00bb      	lsls	r3, r7, #2
 800c774:	18d3      	adds	r3, r2, r3
 800c776:	261f      	movs	r6, #31
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	000b      	movs	r3, r1
 800c77c:	00a5      	lsls	r5, r4, #2
 800c77e:	4033      	ands	r3, r6
 800c780:	1955      	adds	r5, r2, r5
 800c782:	9302      	str	r3, [sp, #8]
 800c784:	4231      	tst	r1, r6
 800c786:	d10c      	bne.n	800c7a2 <rshift+0x42>
 800c788:	0016      	movs	r6, r2
 800c78a:	9901      	ldr	r1, [sp, #4]
 800c78c:	428d      	cmp	r5, r1
 800c78e:	d838      	bhi.n	800c802 <rshift+0xa2>
 800c790:	9901      	ldr	r1, [sp, #4]
 800c792:	2300      	movs	r3, #0
 800c794:	3903      	subs	r1, #3
 800c796:	428d      	cmp	r5, r1
 800c798:	d301      	bcc.n	800c79e <rshift+0x3e>
 800c79a:	1be3      	subs	r3, r4, r7
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	18d3      	adds	r3, r2, r3
 800c7a0:	e019      	b.n	800c7d6 <rshift+0x76>
 800c7a2:	2120      	movs	r1, #32
 800c7a4:	9b02      	ldr	r3, [sp, #8]
 800c7a6:	9e01      	ldr	r6, [sp, #4]
 800c7a8:	1acb      	subs	r3, r1, r3
 800c7aa:	9303      	str	r3, [sp, #12]
 800c7ac:	ce02      	ldmia	r6!, {r1}
 800c7ae:	9b02      	ldr	r3, [sp, #8]
 800c7b0:	4694      	mov	ip, r2
 800c7b2:	40d9      	lsrs	r1, r3
 800c7b4:	9100      	str	r1, [sp, #0]
 800c7b6:	42b5      	cmp	r5, r6
 800c7b8:	d816      	bhi.n	800c7e8 <rshift+0x88>
 800c7ba:	9e01      	ldr	r6, [sp, #4]
 800c7bc:	2300      	movs	r3, #0
 800c7be:	3601      	adds	r6, #1
 800c7c0:	42b5      	cmp	r5, r6
 800c7c2:	d302      	bcc.n	800c7ca <rshift+0x6a>
 800c7c4:	1be3      	subs	r3, r4, r7
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	3b04      	subs	r3, #4
 800c7ca:	9900      	ldr	r1, [sp, #0]
 800c7cc:	18d3      	adds	r3, r2, r3
 800c7ce:	6019      	str	r1, [r3, #0]
 800c7d0:	2900      	cmp	r1, #0
 800c7d2:	d000      	beq.n	800c7d6 <rshift+0x76>
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	1a99      	subs	r1, r3, r2
 800c7d8:	1089      	asrs	r1, r1, #2
 800c7da:	6101      	str	r1, [r0, #16]
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d101      	bne.n	800c7e4 <rshift+0x84>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	6143      	str	r3, [r0, #20]
 800c7e4:	b005      	add	sp, #20
 800c7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e8:	6833      	ldr	r3, [r6, #0]
 800c7ea:	9903      	ldr	r1, [sp, #12]
 800c7ec:	408b      	lsls	r3, r1
 800c7ee:	9900      	ldr	r1, [sp, #0]
 800c7f0:	4319      	orrs	r1, r3
 800c7f2:	4663      	mov	r3, ip
 800c7f4:	c302      	stmia	r3!, {r1}
 800c7f6:	469c      	mov	ip, r3
 800c7f8:	ce02      	ldmia	r6!, {r1}
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	40d9      	lsrs	r1, r3
 800c7fe:	9100      	str	r1, [sp, #0]
 800c800:	e7d9      	b.n	800c7b6 <rshift+0x56>
 800c802:	c908      	ldmia	r1!, {r3}
 800c804:	c608      	stmia	r6!, {r3}
 800c806:	e7c1      	b.n	800c78c <rshift+0x2c>

0800c808 <__hexdig_fun>:
 800c808:	0002      	movs	r2, r0
 800c80a:	3a30      	subs	r2, #48	; 0x30
 800c80c:	0003      	movs	r3, r0
 800c80e:	2a09      	cmp	r2, #9
 800c810:	d802      	bhi.n	800c818 <__hexdig_fun+0x10>
 800c812:	3b20      	subs	r3, #32
 800c814:	b2d8      	uxtb	r0, r3
 800c816:	4770      	bx	lr
 800c818:	0002      	movs	r2, r0
 800c81a:	3a61      	subs	r2, #97	; 0x61
 800c81c:	2a05      	cmp	r2, #5
 800c81e:	d801      	bhi.n	800c824 <__hexdig_fun+0x1c>
 800c820:	3b47      	subs	r3, #71	; 0x47
 800c822:	e7f7      	b.n	800c814 <__hexdig_fun+0xc>
 800c824:	001a      	movs	r2, r3
 800c826:	3a41      	subs	r2, #65	; 0x41
 800c828:	2000      	movs	r0, #0
 800c82a:	2a05      	cmp	r2, #5
 800c82c:	d8f3      	bhi.n	800c816 <__hexdig_fun+0xe>
 800c82e:	3b27      	subs	r3, #39	; 0x27
 800c830:	e7f0      	b.n	800c814 <__hexdig_fun+0xc>
	...

0800c834 <__gethex>:
 800c834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c836:	b08d      	sub	sp, #52	; 0x34
 800c838:	930a      	str	r3, [sp, #40]	; 0x28
 800c83a:	4bbf      	ldr	r3, [pc, #764]	; (800cb38 <__gethex+0x304>)
 800c83c:	9005      	str	r0, [sp, #20]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	9109      	str	r1, [sp, #36]	; 0x24
 800c842:	0018      	movs	r0, r3
 800c844:	9202      	str	r2, [sp, #8]
 800c846:	9307      	str	r3, [sp, #28]
 800c848:	f7f3 fc5e 	bl	8000108 <strlen>
 800c84c:	2202      	movs	r2, #2
 800c84e:	9b07      	ldr	r3, [sp, #28]
 800c850:	4252      	negs	r2, r2
 800c852:	181b      	adds	r3, r3, r0
 800c854:	3b01      	subs	r3, #1
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	9003      	str	r0, [sp, #12]
 800c85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c85e:	6819      	ldr	r1, [r3, #0]
 800c860:	1c8b      	adds	r3, r1, #2
 800c862:	1a52      	subs	r2, r2, r1
 800c864:	18d1      	adds	r1, r2, r3
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	9108      	str	r1, [sp, #32]
 800c86a:	9901      	ldr	r1, [sp, #4]
 800c86c:	3301      	adds	r3, #1
 800c86e:	7808      	ldrb	r0, [r1, #0]
 800c870:	2830      	cmp	r0, #48	; 0x30
 800c872:	d0f7      	beq.n	800c864 <__gethex+0x30>
 800c874:	f7ff ffc8 	bl	800c808 <__hexdig_fun>
 800c878:	2300      	movs	r3, #0
 800c87a:	001c      	movs	r4, r3
 800c87c:	9304      	str	r3, [sp, #16]
 800c87e:	4298      	cmp	r0, r3
 800c880:	d11f      	bne.n	800c8c2 <__gethex+0x8e>
 800c882:	9a03      	ldr	r2, [sp, #12]
 800c884:	9907      	ldr	r1, [sp, #28]
 800c886:	9801      	ldr	r0, [sp, #4]
 800c888:	f001 fc82 	bl	800e190 <strncmp>
 800c88c:	0007      	movs	r7, r0
 800c88e:	42a0      	cmp	r0, r4
 800c890:	d000      	beq.n	800c894 <__gethex+0x60>
 800c892:	e06b      	b.n	800c96c <__gethex+0x138>
 800c894:	9b01      	ldr	r3, [sp, #4]
 800c896:	9a03      	ldr	r2, [sp, #12]
 800c898:	5c98      	ldrb	r0, [r3, r2]
 800c89a:	189d      	adds	r5, r3, r2
 800c89c:	f7ff ffb4 	bl	800c808 <__hexdig_fun>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	42a0      	cmp	r0, r4
 800c8a6:	d030      	beq.n	800c90a <__gethex+0xd6>
 800c8a8:	9501      	str	r5, [sp, #4]
 800c8aa:	9b01      	ldr	r3, [sp, #4]
 800c8ac:	7818      	ldrb	r0, [r3, #0]
 800c8ae:	2830      	cmp	r0, #48	; 0x30
 800c8b0:	d009      	beq.n	800c8c6 <__gethex+0x92>
 800c8b2:	f7ff ffa9 	bl	800c808 <__hexdig_fun>
 800c8b6:	4242      	negs	r2, r0
 800c8b8:	4142      	adcs	r2, r0
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	002c      	movs	r4, r5
 800c8be:	9204      	str	r2, [sp, #16]
 800c8c0:	9308      	str	r3, [sp, #32]
 800c8c2:	9d01      	ldr	r5, [sp, #4]
 800c8c4:	e004      	b.n	800c8d0 <__gethex+0x9c>
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	e7ed      	b.n	800c8aa <__gethex+0x76>
 800c8ce:	3501      	adds	r5, #1
 800c8d0:	7828      	ldrb	r0, [r5, #0]
 800c8d2:	f7ff ff99 	bl	800c808 <__hexdig_fun>
 800c8d6:	1e07      	subs	r7, r0, #0
 800c8d8:	d1f9      	bne.n	800c8ce <__gethex+0x9a>
 800c8da:	0028      	movs	r0, r5
 800c8dc:	9a03      	ldr	r2, [sp, #12]
 800c8de:	9907      	ldr	r1, [sp, #28]
 800c8e0:	f001 fc56 	bl	800e190 <strncmp>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d10e      	bne.n	800c906 <__gethex+0xd2>
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	d107      	bne.n	800c8fc <__gethex+0xc8>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	18ed      	adds	r5, r5, r3
 800c8f0:	002c      	movs	r4, r5
 800c8f2:	7828      	ldrb	r0, [r5, #0]
 800c8f4:	f7ff ff88 	bl	800c808 <__hexdig_fun>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d102      	bne.n	800c902 <__gethex+0xce>
 800c8fc:	1b64      	subs	r4, r4, r5
 800c8fe:	00a7      	lsls	r7, r4, #2
 800c900:	e003      	b.n	800c90a <__gethex+0xd6>
 800c902:	3501      	adds	r5, #1
 800c904:	e7f5      	b.n	800c8f2 <__gethex+0xbe>
 800c906:	2c00      	cmp	r4, #0
 800c908:	d1f8      	bne.n	800c8fc <__gethex+0xc8>
 800c90a:	2220      	movs	r2, #32
 800c90c:	782b      	ldrb	r3, [r5, #0]
 800c90e:	002e      	movs	r6, r5
 800c910:	4393      	bics	r3, r2
 800c912:	2b50      	cmp	r3, #80	; 0x50
 800c914:	d11d      	bne.n	800c952 <__gethex+0x11e>
 800c916:	786b      	ldrb	r3, [r5, #1]
 800c918:	2b2b      	cmp	r3, #43	; 0x2b
 800c91a:	d02c      	beq.n	800c976 <__gethex+0x142>
 800c91c:	2b2d      	cmp	r3, #45	; 0x2d
 800c91e:	d02e      	beq.n	800c97e <__gethex+0x14a>
 800c920:	2300      	movs	r3, #0
 800c922:	1c6e      	adds	r6, r5, #1
 800c924:	9306      	str	r3, [sp, #24]
 800c926:	7830      	ldrb	r0, [r6, #0]
 800c928:	f7ff ff6e 	bl	800c808 <__hexdig_fun>
 800c92c:	1e43      	subs	r3, r0, #1
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b18      	cmp	r3, #24
 800c932:	d82b      	bhi.n	800c98c <__gethex+0x158>
 800c934:	3810      	subs	r0, #16
 800c936:	0004      	movs	r4, r0
 800c938:	7870      	ldrb	r0, [r6, #1]
 800c93a:	f7ff ff65 	bl	800c808 <__hexdig_fun>
 800c93e:	1e43      	subs	r3, r0, #1
 800c940:	b2db      	uxtb	r3, r3
 800c942:	3601      	adds	r6, #1
 800c944:	2b18      	cmp	r3, #24
 800c946:	d91c      	bls.n	800c982 <__gethex+0x14e>
 800c948:	9b06      	ldr	r3, [sp, #24]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d000      	beq.n	800c950 <__gethex+0x11c>
 800c94e:	4264      	negs	r4, r4
 800c950:	193f      	adds	r7, r7, r4
 800c952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c954:	601e      	str	r6, [r3, #0]
 800c956:	9b04      	ldr	r3, [sp, #16]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d019      	beq.n	800c990 <__gethex+0x15c>
 800c95c:	2600      	movs	r6, #0
 800c95e:	9b08      	ldr	r3, [sp, #32]
 800c960:	42b3      	cmp	r3, r6
 800c962:	d100      	bne.n	800c966 <__gethex+0x132>
 800c964:	3606      	adds	r6, #6
 800c966:	0030      	movs	r0, r6
 800c968:	b00d      	add	sp, #52	; 0x34
 800c96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c96c:	2301      	movs	r3, #1
 800c96e:	2700      	movs	r7, #0
 800c970:	9d01      	ldr	r5, [sp, #4]
 800c972:	9304      	str	r3, [sp, #16]
 800c974:	e7c9      	b.n	800c90a <__gethex+0xd6>
 800c976:	2300      	movs	r3, #0
 800c978:	9306      	str	r3, [sp, #24]
 800c97a:	1cae      	adds	r6, r5, #2
 800c97c:	e7d3      	b.n	800c926 <__gethex+0xf2>
 800c97e:	2301      	movs	r3, #1
 800c980:	e7fa      	b.n	800c978 <__gethex+0x144>
 800c982:	230a      	movs	r3, #10
 800c984:	435c      	muls	r4, r3
 800c986:	1824      	adds	r4, r4, r0
 800c988:	3c10      	subs	r4, #16
 800c98a:	e7d5      	b.n	800c938 <__gethex+0x104>
 800c98c:	002e      	movs	r6, r5
 800c98e:	e7e0      	b.n	800c952 <__gethex+0x11e>
 800c990:	9b01      	ldr	r3, [sp, #4]
 800c992:	9904      	ldr	r1, [sp, #16]
 800c994:	1aeb      	subs	r3, r5, r3
 800c996:	3b01      	subs	r3, #1
 800c998:	2b07      	cmp	r3, #7
 800c99a:	dc0a      	bgt.n	800c9b2 <__gethex+0x17e>
 800c99c:	9805      	ldr	r0, [sp, #20]
 800c99e:	f000 faf7 	bl	800cf90 <_Balloc>
 800c9a2:	1e04      	subs	r4, r0, #0
 800c9a4:	d108      	bne.n	800c9b8 <__gethex+0x184>
 800c9a6:	0002      	movs	r2, r0
 800c9a8:	21de      	movs	r1, #222	; 0xde
 800c9aa:	4b64      	ldr	r3, [pc, #400]	; (800cb3c <__gethex+0x308>)
 800c9ac:	4864      	ldr	r0, [pc, #400]	; (800cb40 <__gethex+0x30c>)
 800c9ae:	f001 fc23 	bl	800e1f8 <__assert_func>
 800c9b2:	3101      	adds	r1, #1
 800c9b4:	105b      	asrs	r3, r3, #1
 800c9b6:	e7ef      	b.n	800c998 <__gethex+0x164>
 800c9b8:	0003      	movs	r3, r0
 800c9ba:	3314      	adds	r3, #20
 800c9bc:	9304      	str	r3, [sp, #16]
 800c9be:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	001e      	movs	r6, r3
 800c9c4:	9306      	str	r3, [sp, #24]
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	42ab      	cmp	r3, r5
 800c9ca:	d340      	bcc.n	800ca4e <__gethex+0x21a>
 800c9cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	c540      	stmia	r5!, {r6}
 800c9d2:	1aed      	subs	r5, r5, r3
 800c9d4:	10ad      	asrs	r5, r5, #2
 800c9d6:	0030      	movs	r0, r6
 800c9d8:	6125      	str	r5, [r4, #16]
 800c9da:	f000 fbd1 	bl	800d180 <__hi0bits>
 800c9de:	9b02      	ldr	r3, [sp, #8]
 800c9e0:	016d      	lsls	r5, r5, #5
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	1a2e      	subs	r6, r5, r0
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	429e      	cmp	r6, r3
 800c9ea:	dd5a      	ble.n	800caa2 <__gethex+0x26e>
 800c9ec:	1af6      	subs	r6, r6, r3
 800c9ee:	0031      	movs	r1, r6
 800c9f0:	0020      	movs	r0, r4
 800c9f2:	f000 ff73 	bl	800d8dc <__any_on>
 800c9f6:	1e05      	subs	r5, r0, #0
 800c9f8:	d016      	beq.n	800ca28 <__gethex+0x1f4>
 800c9fa:	2501      	movs	r5, #1
 800c9fc:	211f      	movs	r1, #31
 800c9fe:	0028      	movs	r0, r5
 800ca00:	1e73      	subs	r3, r6, #1
 800ca02:	4019      	ands	r1, r3
 800ca04:	4088      	lsls	r0, r1
 800ca06:	0001      	movs	r1, r0
 800ca08:	115a      	asrs	r2, r3, #5
 800ca0a:	9804      	ldr	r0, [sp, #16]
 800ca0c:	0092      	lsls	r2, r2, #2
 800ca0e:	5812      	ldr	r2, [r2, r0]
 800ca10:	420a      	tst	r2, r1
 800ca12:	d009      	beq.n	800ca28 <__gethex+0x1f4>
 800ca14:	42ab      	cmp	r3, r5
 800ca16:	dd06      	ble.n	800ca26 <__gethex+0x1f2>
 800ca18:	0020      	movs	r0, r4
 800ca1a:	1eb1      	subs	r1, r6, #2
 800ca1c:	f000 ff5e 	bl	800d8dc <__any_on>
 800ca20:	3502      	adds	r5, #2
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d100      	bne.n	800ca28 <__gethex+0x1f4>
 800ca26:	2502      	movs	r5, #2
 800ca28:	0031      	movs	r1, r6
 800ca2a:	0020      	movs	r0, r4
 800ca2c:	f7ff fe98 	bl	800c760 <rshift>
 800ca30:	19bf      	adds	r7, r7, r6
 800ca32:	9b02      	ldr	r3, [sp, #8]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	9303      	str	r3, [sp, #12]
 800ca38:	42bb      	cmp	r3, r7
 800ca3a:	da42      	bge.n	800cac2 <__gethex+0x28e>
 800ca3c:	0021      	movs	r1, r4
 800ca3e:	9805      	ldr	r0, [sp, #20]
 800ca40:	f000 faea 	bl	800d018 <_Bfree>
 800ca44:	2300      	movs	r3, #0
 800ca46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca48:	26a3      	movs	r6, #163	; 0xa3
 800ca4a:	6013      	str	r3, [r2, #0]
 800ca4c:	e78b      	b.n	800c966 <__gethex+0x132>
 800ca4e:	1e6b      	subs	r3, r5, #1
 800ca50:	9308      	str	r3, [sp, #32]
 800ca52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d014      	beq.n	800ca84 <__gethex+0x250>
 800ca5a:	9b06      	ldr	r3, [sp, #24]
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d104      	bne.n	800ca6a <__gethex+0x236>
 800ca60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca62:	c340      	stmia	r3!, {r6}
 800ca64:	2600      	movs	r6, #0
 800ca66:	9309      	str	r3, [sp, #36]	; 0x24
 800ca68:	9606      	str	r6, [sp, #24]
 800ca6a:	9b08      	ldr	r3, [sp, #32]
 800ca6c:	7818      	ldrb	r0, [r3, #0]
 800ca6e:	f7ff fecb 	bl	800c808 <__hexdig_fun>
 800ca72:	230f      	movs	r3, #15
 800ca74:	4018      	ands	r0, r3
 800ca76:	9b06      	ldr	r3, [sp, #24]
 800ca78:	9d08      	ldr	r5, [sp, #32]
 800ca7a:	4098      	lsls	r0, r3
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	4306      	orrs	r6, r0
 800ca80:	9306      	str	r3, [sp, #24]
 800ca82:	e7a0      	b.n	800c9c6 <__gethex+0x192>
 800ca84:	2301      	movs	r3, #1
 800ca86:	9a03      	ldr	r2, [sp, #12]
 800ca88:	1a9d      	subs	r5, r3, r2
 800ca8a:	9b08      	ldr	r3, [sp, #32]
 800ca8c:	195d      	adds	r5, r3, r5
 800ca8e:	9b01      	ldr	r3, [sp, #4]
 800ca90:	429d      	cmp	r5, r3
 800ca92:	d3e2      	bcc.n	800ca5a <__gethex+0x226>
 800ca94:	0028      	movs	r0, r5
 800ca96:	9907      	ldr	r1, [sp, #28]
 800ca98:	f001 fb7a 	bl	800e190 <strncmp>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d1dc      	bne.n	800ca5a <__gethex+0x226>
 800caa0:	e791      	b.n	800c9c6 <__gethex+0x192>
 800caa2:	9b01      	ldr	r3, [sp, #4]
 800caa4:	2500      	movs	r5, #0
 800caa6:	429e      	cmp	r6, r3
 800caa8:	dac3      	bge.n	800ca32 <__gethex+0x1fe>
 800caaa:	1b9e      	subs	r6, r3, r6
 800caac:	0021      	movs	r1, r4
 800caae:	0032      	movs	r2, r6
 800cab0:	9805      	ldr	r0, [sp, #20]
 800cab2:	f000 fccf 	bl	800d454 <__lshift>
 800cab6:	0003      	movs	r3, r0
 800cab8:	3314      	adds	r3, #20
 800caba:	0004      	movs	r4, r0
 800cabc:	1bbf      	subs	r7, r7, r6
 800cabe:	9304      	str	r3, [sp, #16]
 800cac0:	e7b7      	b.n	800ca32 <__gethex+0x1fe>
 800cac2:	9b02      	ldr	r3, [sp, #8]
 800cac4:	685e      	ldr	r6, [r3, #4]
 800cac6:	42be      	cmp	r6, r7
 800cac8:	dd71      	ble.n	800cbae <__gethex+0x37a>
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	1bf6      	subs	r6, r6, r7
 800cace:	42b3      	cmp	r3, r6
 800cad0:	dc38      	bgt.n	800cb44 <__gethex+0x310>
 800cad2:	9b02      	ldr	r3, [sp, #8]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d026      	beq.n	800cb28 <__gethex+0x2f4>
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d028      	beq.n	800cb30 <__gethex+0x2fc>
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d119      	bne.n	800cb16 <__gethex+0x2e2>
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	42b3      	cmp	r3, r6
 800cae6:	d116      	bne.n	800cb16 <__gethex+0x2e2>
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d10d      	bne.n	800cb08 <__gethex+0x2d4>
 800caec:	9b02      	ldr	r3, [sp, #8]
 800caee:	2662      	movs	r6, #98	; 0x62
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	9a01      	ldr	r2, [sp, #4]
 800caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	2301      	movs	r3, #1
 800cafc:	9a04      	ldr	r2, [sp, #16]
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb04:	601c      	str	r4, [r3, #0]
 800cb06:	e72e      	b.n	800c966 <__gethex+0x132>
 800cb08:	9901      	ldr	r1, [sp, #4]
 800cb0a:	0020      	movs	r0, r4
 800cb0c:	3901      	subs	r1, #1
 800cb0e:	f000 fee5 	bl	800d8dc <__any_on>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d1ea      	bne.n	800caec <__gethex+0x2b8>
 800cb16:	0021      	movs	r1, r4
 800cb18:	9805      	ldr	r0, [sp, #20]
 800cb1a:	f000 fa7d 	bl	800d018 <_Bfree>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb22:	2650      	movs	r6, #80	; 0x50
 800cb24:	6013      	str	r3, [r2, #0]
 800cb26:	e71e      	b.n	800c966 <__gethex+0x132>
 800cb28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1f3      	bne.n	800cb16 <__gethex+0x2e2>
 800cb2e:	e7dd      	b.n	800caec <__gethex+0x2b8>
 800cb30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1da      	bne.n	800caec <__gethex+0x2b8>
 800cb36:	e7ee      	b.n	800cb16 <__gethex+0x2e2>
 800cb38:	0800e984 	.word	0x0800e984
 800cb3c:	0800e8a8 	.word	0x0800e8a8
 800cb40:	0800e91c 	.word	0x0800e91c
 800cb44:	1e77      	subs	r7, r6, #1
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	d12f      	bne.n	800cbaa <__gethex+0x376>
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d004      	beq.n	800cb58 <__gethex+0x324>
 800cb4e:	0039      	movs	r1, r7
 800cb50:	0020      	movs	r0, r4
 800cb52:	f000 fec3 	bl	800d8dc <__any_on>
 800cb56:	0005      	movs	r5, r0
 800cb58:	231f      	movs	r3, #31
 800cb5a:	117a      	asrs	r2, r7, #5
 800cb5c:	401f      	ands	r7, r3
 800cb5e:	3b1e      	subs	r3, #30
 800cb60:	40bb      	lsls	r3, r7
 800cb62:	9904      	ldr	r1, [sp, #16]
 800cb64:	0092      	lsls	r2, r2, #2
 800cb66:	5852      	ldr	r2, [r2, r1]
 800cb68:	421a      	tst	r2, r3
 800cb6a:	d001      	beq.n	800cb70 <__gethex+0x33c>
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	431d      	orrs	r5, r3
 800cb70:	9b01      	ldr	r3, [sp, #4]
 800cb72:	0031      	movs	r1, r6
 800cb74:	1b9b      	subs	r3, r3, r6
 800cb76:	2602      	movs	r6, #2
 800cb78:	0020      	movs	r0, r4
 800cb7a:	9301      	str	r3, [sp, #4]
 800cb7c:	f7ff fdf0 	bl	800c760 <rshift>
 800cb80:	9b02      	ldr	r3, [sp, #8]
 800cb82:	685f      	ldr	r7, [r3, #4]
 800cb84:	2d00      	cmp	r5, #0
 800cb86:	d041      	beq.n	800cc0c <__gethex+0x3d8>
 800cb88:	9b02      	ldr	r3, [sp, #8]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d010      	beq.n	800cbb2 <__gethex+0x37e>
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d012      	beq.n	800cbba <__gethex+0x386>
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d106      	bne.n	800cba6 <__gethex+0x372>
 800cb98:	07aa      	lsls	r2, r5, #30
 800cb9a:	d504      	bpl.n	800cba6 <__gethex+0x372>
 800cb9c:	9a04      	ldr	r2, [sp, #16]
 800cb9e:	6810      	ldr	r0, [r2, #0]
 800cba0:	4305      	orrs	r5, r0
 800cba2:	421d      	tst	r5, r3
 800cba4:	d10c      	bne.n	800cbc0 <__gethex+0x38c>
 800cba6:	2310      	movs	r3, #16
 800cba8:	e02f      	b.n	800cc0a <__gethex+0x3d6>
 800cbaa:	2501      	movs	r5, #1
 800cbac:	e7d4      	b.n	800cb58 <__gethex+0x324>
 800cbae:	2601      	movs	r6, #1
 800cbb0:	e7e8      	b.n	800cb84 <__gethex+0x350>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cbb6:	1a9b      	subs	r3, r3, r2
 800cbb8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cbba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0f2      	beq.n	800cba6 <__gethex+0x372>
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	9303      	str	r3, [sp, #12]
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	9304      	str	r3, [sp, #16]
 800cbca:	0023      	movs	r3, r4
 800cbcc:	9a04      	ldr	r2, [sp, #16]
 800cbce:	3314      	adds	r3, #20
 800cbd0:	1899      	adds	r1, r3, r2
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	1c55      	adds	r5, r2, #1
 800cbd6:	d01e      	beq.n	800cc16 <__gethex+0x3e2>
 800cbd8:	3201      	adds	r2, #1
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	0023      	movs	r3, r4
 800cbde:	3314      	adds	r3, #20
 800cbe0:	2e02      	cmp	r6, #2
 800cbe2:	d140      	bne.n	800cc66 <__gethex+0x432>
 800cbe4:	9a02      	ldr	r2, [sp, #8]
 800cbe6:	9901      	ldr	r1, [sp, #4]
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	3a01      	subs	r2, #1
 800cbec:	428a      	cmp	r2, r1
 800cbee:	d10b      	bne.n	800cc08 <__gethex+0x3d4>
 800cbf0:	114a      	asrs	r2, r1, #5
 800cbf2:	211f      	movs	r1, #31
 800cbf4:	9801      	ldr	r0, [sp, #4]
 800cbf6:	0092      	lsls	r2, r2, #2
 800cbf8:	4001      	ands	r1, r0
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	0005      	movs	r5, r0
 800cbfe:	408d      	lsls	r5, r1
 800cc00:	58d3      	ldr	r3, [r2, r3]
 800cc02:	422b      	tst	r3, r5
 800cc04:	d000      	beq.n	800cc08 <__gethex+0x3d4>
 800cc06:	2601      	movs	r6, #1
 800cc08:	2320      	movs	r3, #32
 800cc0a:	431e      	orrs	r6, r3
 800cc0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc0e:	601c      	str	r4, [r3, #0]
 800cc10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc12:	601f      	str	r7, [r3, #0]
 800cc14:	e6a7      	b.n	800c966 <__gethex+0x132>
 800cc16:	c301      	stmia	r3!, {r0}
 800cc18:	4299      	cmp	r1, r3
 800cc1a:	d8da      	bhi.n	800cbd2 <__gethex+0x39e>
 800cc1c:	9b03      	ldr	r3, [sp, #12]
 800cc1e:	68a2      	ldr	r2, [r4, #8]
 800cc20:	4293      	cmp	r3, r2
 800cc22:	db17      	blt.n	800cc54 <__gethex+0x420>
 800cc24:	6863      	ldr	r3, [r4, #4]
 800cc26:	9805      	ldr	r0, [sp, #20]
 800cc28:	1c59      	adds	r1, r3, #1
 800cc2a:	f000 f9b1 	bl	800cf90 <_Balloc>
 800cc2e:	1e05      	subs	r5, r0, #0
 800cc30:	d103      	bne.n	800cc3a <__gethex+0x406>
 800cc32:	0002      	movs	r2, r0
 800cc34:	2184      	movs	r1, #132	; 0x84
 800cc36:	4b1c      	ldr	r3, [pc, #112]	; (800cca8 <__gethex+0x474>)
 800cc38:	e6b8      	b.n	800c9ac <__gethex+0x178>
 800cc3a:	0021      	movs	r1, r4
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	310c      	adds	r1, #12
 800cc40:	1c9a      	adds	r2, r3, #2
 800cc42:	0092      	lsls	r2, r2, #2
 800cc44:	300c      	adds	r0, #12
 800cc46:	f000 f99a 	bl	800cf7e <memcpy>
 800cc4a:	0021      	movs	r1, r4
 800cc4c:	9805      	ldr	r0, [sp, #20]
 800cc4e:	f000 f9e3 	bl	800d018 <_Bfree>
 800cc52:	002c      	movs	r4, r5
 800cc54:	6923      	ldr	r3, [r4, #16]
 800cc56:	1c5a      	adds	r2, r3, #1
 800cc58:	6122      	str	r2, [r4, #16]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	18e3      	adds	r3, r4, r3
 800cc62:	605a      	str	r2, [r3, #4]
 800cc64:	e7ba      	b.n	800cbdc <__gethex+0x3a8>
 800cc66:	6922      	ldr	r2, [r4, #16]
 800cc68:	9903      	ldr	r1, [sp, #12]
 800cc6a:	428a      	cmp	r2, r1
 800cc6c:	dd09      	ble.n	800cc82 <__gethex+0x44e>
 800cc6e:	2101      	movs	r1, #1
 800cc70:	0020      	movs	r0, r4
 800cc72:	f7ff fd75 	bl	800c760 <rshift>
 800cc76:	9b02      	ldr	r3, [sp, #8]
 800cc78:	3701      	adds	r7, #1
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	42bb      	cmp	r3, r7
 800cc7e:	dac2      	bge.n	800cc06 <__gethex+0x3d2>
 800cc80:	e6dc      	b.n	800ca3c <__gethex+0x208>
 800cc82:	221f      	movs	r2, #31
 800cc84:	9d01      	ldr	r5, [sp, #4]
 800cc86:	9901      	ldr	r1, [sp, #4]
 800cc88:	2601      	movs	r6, #1
 800cc8a:	4015      	ands	r5, r2
 800cc8c:	4211      	tst	r1, r2
 800cc8e:	d0bb      	beq.n	800cc08 <__gethex+0x3d4>
 800cc90:	9a04      	ldr	r2, [sp, #16]
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	3b04      	subs	r3, #4
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	f000 fa72 	bl	800d180 <__hi0bits>
 800cc9c:	2320      	movs	r3, #32
 800cc9e:	1b5d      	subs	r5, r3, r5
 800cca0:	42a8      	cmp	r0, r5
 800cca2:	dbe4      	blt.n	800cc6e <__gethex+0x43a>
 800cca4:	e7b0      	b.n	800cc08 <__gethex+0x3d4>
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	0800e8a8 	.word	0x0800e8a8

0800ccac <L_shift>:
 800ccac:	2308      	movs	r3, #8
 800ccae:	b570      	push	{r4, r5, r6, lr}
 800ccb0:	2520      	movs	r5, #32
 800ccb2:	1a9a      	subs	r2, r3, r2
 800ccb4:	0092      	lsls	r2, r2, #2
 800ccb6:	1aad      	subs	r5, r5, r2
 800ccb8:	6843      	ldr	r3, [r0, #4]
 800ccba:	6806      	ldr	r6, [r0, #0]
 800ccbc:	001c      	movs	r4, r3
 800ccbe:	40ac      	lsls	r4, r5
 800ccc0:	40d3      	lsrs	r3, r2
 800ccc2:	4334      	orrs	r4, r6
 800ccc4:	6004      	str	r4, [r0, #0]
 800ccc6:	6043      	str	r3, [r0, #4]
 800ccc8:	3004      	adds	r0, #4
 800ccca:	4288      	cmp	r0, r1
 800cccc:	d3f4      	bcc.n	800ccb8 <L_shift+0xc>
 800ccce:	bd70      	pop	{r4, r5, r6, pc}

0800ccd0 <__match>:
 800ccd0:	b530      	push	{r4, r5, lr}
 800ccd2:	6803      	ldr	r3, [r0, #0]
 800ccd4:	780c      	ldrb	r4, [r1, #0]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	2c00      	cmp	r4, #0
 800ccda:	d102      	bne.n	800cce2 <__match+0x12>
 800ccdc:	6003      	str	r3, [r0, #0]
 800ccde:	2001      	movs	r0, #1
 800cce0:	bd30      	pop	{r4, r5, pc}
 800cce2:	781a      	ldrb	r2, [r3, #0]
 800cce4:	0015      	movs	r5, r2
 800cce6:	3d41      	subs	r5, #65	; 0x41
 800cce8:	2d19      	cmp	r5, #25
 800ccea:	d800      	bhi.n	800ccee <__match+0x1e>
 800ccec:	3220      	adds	r2, #32
 800ccee:	3101      	adds	r1, #1
 800ccf0:	42a2      	cmp	r2, r4
 800ccf2:	d0ef      	beq.n	800ccd4 <__match+0x4>
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	e7f3      	b.n	800cce0 <__match+0x10>

0800ccf8 <__hexnan>:
 800ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccfa:	680b      	ldr	r3, [r1, #0]
 800ccfc:	b08b      	sub	sp, #44	; 0x2c
 800ccfe:	9201      	str	r2, [sp, #4]
 800cd00:	9901      	ldr	r1, [sp, #4]
 800cd02:	115a      	asrs	r2, r3, #5
 800cd04:	0092      	lsls	r2, r2, #2
 800cd06:	188a      	adds	r2, r1, r2
 800cd08:	9202      	str	r2, [sp, #8]
 800cd0a:	0019      	movs	r1, r3
 800cd0c:	221f      	movs	r2, #31
 800cd0e:	4011      	ands	r1, r2
 800cd10:	9008      	str	r0, [sp, #32]
 800cd12:	9106      	str	r1, [sp, #24]
 800cd14:	4213      	tst	r3, r2
 800cd16:	d002      	beq.n	800cd1e <__hexnan+0x26>
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	9302      	str	r3, [sp, #8]
 800cd1e:	9b02      	ldr	r3, [sp, #8]
 800cd20:	2500      	movs	r5, #0
 800cd22:	1f1e      	subs	r6, r3, #4
 800cd24:	0037      	movs	r7, r6
 800cd26:	0034      	movs	r4, r6
 800cd28:	9b08      	ldr	r3, [sp, #32]
 800cd2a:	6035      	str	r5, [r6, #0]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	9507      	str	r5, [sp, #28]
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	9503      	str	r5, [sp, #12]
 800cd34:	9b05      	ldr	r3, [sp, #20]
 800cd36:	3301      	adds	r3, #1
 800cd38:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3a:	9b05      	ldr	r3, [sp, #20]
 800cd3c:	785b      	ldrb	r3, [r3, #1]
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d028      	beq.n	800cd96 <__hexnan+0x9e>
 800cd44:	9804      	ldr	r0, [sp, #16]
 800cd46:	f7ff fd5f 	bl	800c808 <__hexdig_fun>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d154      	bne.n	800cdf8 <__hexnan+0x100>
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	2b20      	cmp	r3, #32
 800cd52:	d819      	bhi.n	800cd88 <__hexnan+0x90>
 800cd54:	9b03      	ldr	r3, [sp, #12]
 800cd56:	9a07      	ldr	r2, [sp, #28]
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	dd12      	ble.n	800cd82 <__hexnan+0x8a>
 800cd5c:	42bc      	cmp	r4, r7
 800cd5e:	d206      	bcs.n	800cd6e <__hexnan+0x76>
 800cd60:	2d07      	cmp	r5, #7
 800cd62:	dc04      	bgt.n	800cd6e <__hexnan+0x76>
 800cd64:	002a      	movs	r2, r5
 800cd66:	0039      	movs	r1, r7
 800cd68:	0020      	movs	r0, r4
 800cd6a:	f7ff ff9f 	bl	800ccac <L_shift>
 800cd6e:	9b01      	ldr	r3, [sp, #4]
 800cd70:	2508      	movs	r5, #8
 800cd72:	429c      	cmp	r4, r3
 800cd74:	d905      	bls.n	800cd82 <__hexnan+0x8a>
 800cd76:	1f27      	subs	r7, r4, #4
 800cd78:	2500      	movs	r5, #0
 800cd7a:	003c      	movs	r4, r7
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	603d      	str	r5, [r7, #0]
 800cd80:	9307      	str	r3, [sp, #28]
 800cd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd84:	9305      	str	r3, [sp, #20]
 800cd86:	e7d5      	b.n	800cd34 <__hexnan+0x3c>
 800cd88:	9b04      	ldr	r3, [sp, #16]
 800cd8a:	2b29      	cmp	r3, #41	; 0x29
 800cd8c:	d159      	bne.n	800ce42 <__hexnan+0x14a>
 800cd8e:	9b05      	ldr	r3, [sp, #20]
 800cd90:	9a08      	ldr	r2, [sp, #32]
 800cd92:	3302      	adds	r3, #2
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	9b03      	ldr	r3, [sp, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d052      	beq.n	800ce42 <__hexnan+0x14a>
 800cd9c:	42bc      	cmp	r4, r7
 800cd9e:	d206      	bcs.n	800cdae <__hexnan+0xb6>
 800cda0:	2d07      	cmp	r5, #7
 800cda2:	dc04      	bgt.n	800cdae <__hexnan+0xb6>
 800cda4:	002a      	movs	r2, r5
 800cda6:	0039      	movs	r1, r7
 800cda8:	0020      	movs	r0, r4
 800cdaa:	f7ff ff7f 	bl	800ccac <L_shift>
 800cdae:	9b01      	ldr	r3, [sp, #4]
 800cdb0:	429c      	cmp	r4, r3
 800cdb2:	d935      	bls.n	800ce20 <__hexnan+0x128>
 800cdb4:	001a      	movs	r2, r3
 800cdb6:	0023      	movs	r3, r4
 800cdb8:	cb02      	ldmia	r3!, {r1}
 800cdba:	c202      	stmia	r2!, {r1}
 800cdbc:	429e      	cmp	r6, r3
 800cdbe:	d2fb      	bcs.n	800cdb8 <__hexnan+0xc0>
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	1c61      	adds	r1, r4, #1
 800cdc4:	1eda      	subs	r2, r3, #3
 800cdc6:	2304      	movs	r3, #4
 800cdc8:	4291      	cmp	r1, r2
 800cdca:	d805      	bhi.n	800cdd8 <__hexnan+0xe0>
 800cdcc:	9b02      	ldr	r3, [sp, #8]
 800cdce:	3b04      	subs	r3, #4
 800cdd0:	1b1b      	subs	r3, r3, r4
 800cdd2:	089b      	lsrs	r3, r3, #2
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	18d3      	adds	r3, r2, r3
 800cddc:	2200      	movs	r2, #0
 800cdde:	c304      	stmia	r3!, {r2}
 800cde0:	429e      	cmp	r6, r3
 800cde2:	d2fc      	bcs.n	800cdde <__hexnan+0xe6>
 800cde4:	6833      	ldr	r3, [r6, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d104      	bne.n	800cdf4 <__hexnan+0xfc>
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	429e      	cmp	r6, r3
 800cdee:	d126      	bne.n	800ce3e <__hexnan+0x146>
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	6033      	str	r3, [r6, #0]
 800cdf4:	2005      	movs	r0, #5
 800cdf6:	e025      	b.n	800ce44 <__hexnan+0x14c>
 800cdf8:	9b03      	ldr	r3, [sp, #12]
 800cdfa:	3501      	adds	r5, #1
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	9303      	str	r3, [sp, #12]
 800ce00:	2d08      	cmp	r5, #8
 800ce02:	dd06      	ble.n	800ce12 <__hexnan+0x11a>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	429c      	cmp	r4, r3
 800ce08:	d9bb      	bls.n	800cd82 <__hexnan+0x8a>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	2501      	movs	r5, #1
 800ce0e:	3c04      	subs	r4, #4
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	220f      	movs	r2, #15
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	4010      	ands	r0, r2
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	4318      	orrs	r0, r3
 800ce1c:	6020      	str	r0, [r4, #0]
 800ce1e:	e7b0      	b.n	800cd82 <__hexnan+0x8a>
 800ce20:	9b06      	ldr	r3, [sp, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d0de      	beq.n	800cde4 <__hexnan+0xec>
 800ce26:	2120      	movs	r1, #32
 800ce28:	9a06      	ldr	r2, [sp, #24]
 800ce2a:	9b02      	ldr	r3, [sp, #8]
 800ce2c:	1a89      	subs	r1, r1, r2
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4252      	negs	r2, r2
 800ce32:	40ca      	lsrs	r2, r1
 800ce34:	3b04      	subs	r3, #4
 800ce36:	6819      	ldr	r1, [r3, #0]
 800ce38:	400a      	ands	r2, r1
 800ce3a:	601a      	str	r2, [r3, #0]
 800ce3c:	e7d2      	b.n	800cde4 <__hexnan+0xec>
 800ce3e:	3e04      	subs	r6, #4
 800ce40:	e7d0      	b.n	800cde4 <__hexnan+0xec>
 800ce42:	2004      	movs	r0, #4
 800ce44:	b00b      	add	sp, #44	; 0x2c
 800ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce48 <_localeconv_r>:
 800ce48:	4800      	ldr	r0, [pc, #0]	; (800ce4c <_localeconv_r+0x4>)
 800ce4a:	4770      	bx	lr
 800ce4c:	20000164 	.word	0x20000164

0800ce50 <__retarget_lock_init_recursive>:
 800ce50:	4770      	bx	lr

0800ce52 <__retarget_lock_acquire_recursive>:
 800ce52:	4770      	bx	lr

0800ce54 <__retarget_lock_release_recursive>:
 800ce54:	4770      	bx	lr
	...

0800ce58 <__swhatbuf_r>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	000e      	movs	r6, r1
 800ce5c:	001d      	movs	r5, r3
 800ce5e:	230e      	movs	r3, #14
 800ce60:	5ec9      	ldrsh	r1, [r1, r3]
 800ce62:	0014      	movs	r4, r2
 800ce64:	b096      	sub	sp, #88	; 0x58
 800ce66:	2900      	cmp	r1, #0
 800ce68:	da08      	bge.n	800ce7c <__swhatbuf_r+0x24>
 800ce6a:	220c      	movs	r2, #12
 800ce6c:	5eb3      	ldrsh	r3, [r6, r2]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	061b      	lsls	r3, r3, #24
 800ce74:	d411      	bmi.n	800ce9a <__swhatbuf_r+0x42>
 800ce76:	2380      	movs	r3, #128	; 0x80
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	e00f      	b.n	800ce9c <__swhatbuf_r+0x44>
 800ce7c:	466a      	mov	r2, sp
 800ce7e:	f001 f9fb 	bl	800e278 <_fstat_r>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	dbf1      	blt.n	800ce6a <__swhatbuf_r+0x12>
 800ce86:	23f0      	movs	r3, #240	; 0xf0
 800ce88:	9901      	ldr	r1, [sp, #4]
 800ce8a:	021b      	lsls	r3, r3, #8
 800ce8c:	4019      	ands	r1, r3
 800ce8e:	4b05      	ldr	r3, [pc, #20]	; (800cea4 <__swhatbuf_r+0x4c>)
 800ce90:	18c9      	adds	r1, r1, r3
 800ce92:	424b      	negs	r3, r1
 800ce94:	4159      	adcs	r1, r3
 800ce96:	6029      	str	r1, [r5, #0]
 800ce98:	e7ed      	b.n	800ce76 <__swhatbuf_r+0x1e>
 800ce9a:	2340      	movs	r3, #64	; 0x40
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	6023      	str	r3, [r4, #0]
 800cea0:	b016      	add	sp, #88	; 0x58
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	ffffe000 	.word	0xffffe000

0800cea8 <__smakebuf_r>:
 800cea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceaa:	2602      	movs	r6, #2
 800ceac:	898b      	ldrh	r3, [r1, #12]
 800ceae:	0005      	movs	r5, r0
 800ceb0:	000c      	movs	r4, r1
 800ceb2:	4233      	tst	r3, r6
 800ceb4:	d006      	beq.n	800cec4 <__smakebuf_r+0x1c>
 800ceb6:	0023      	movs	r3, r4
 800ceb8:	3347      	adds	r3, #71	; 0x47
 800ceba:	6023      	str	r3, [r4, #0]
 800cebc:	6123      	str	r3, [r4, #16]
 800cebe:	2301      	movs	r3, #1
 800cec0:	6163      	str	r3, [r4, #20]
 800cec2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cec4:	466a      	mov	r2, sp
 800cec6:	ab01      	add	r3, sp, #4
 800cec8:	f7ff ffc6 	bl	800ce58 <__swhatbuf_r>
 800cecc:	9900      	ldr	r1, [sp, #0]
 800cece:	0007      	movs	r7, r0
 800ced0:	0028      	movs	r0, r5
 800ced2:	f000 fdbf 	bl	800da54 <_malloc_r>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d108      	bne.n	800ceec <__smakebuf_r+0x44>
 800ceda:	220c      	movs	r2, #12
 800cedc:	5ea3      	ldrsh	r3, [r4, r2]
 800cede:	059a      	lsls	r2, r3, #22
 800cee0:	d4ef      	bmi.n	800cec2 <__smakebuf_r+0x1a>
 800cee2:	2203      	movs	r2, #3
 800cee4:	4393      	bics	r3, r2
 800cee6:	431e      	orrs	r6, r3
 800cee8:	81a6      	strh	r6, [r4, #12]
 800ceea:	e7e4      	b.n	800ceb6 <__smakebuf_r+0xe>
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <__smakebuf_r+0x84>)
 800ceee:	62ab      	str	r3, [r5, #40]	; 0x28
 800cef0:	2380      	movs	r3, #128	; 0x80
 800cef2:	89a2      	ldrh	r2, [r4, #12]
 800cef4:	6020      	str	r0, [r4, #0]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	81a3      	strh	r3, [r4, #12]
 800cefa:	9b00      	ldr	r3, [sp, #0]
 800cefc:	6120      	str	r0, [r4, #16]
 800cefe:	6163      	str	r3, [r4, #20]
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00d      	beq.n	800cf22 <__smakebuf_r+0x7a>
 800cf06:	0028      	movs	r0, r5
 800cf08:	230e      	movs	r3, #14
 800cf0a:	5ee1      	ldrsh	r1, [r4, r3]
 800cf0c:	f001 f9c6 	bl	800e29c <_isatty_r>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d006      	beq.n	800cf22 <__smakebuf_r+0x7a>
 800cf14:	2203      	movs	r2, #3
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	4393      	bics	r3, r2
 800cf1a:	001a      	movs	r2, r3
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	81a3      	strh	r3, [r4, #12]
 800cf22:	89a0      	ldrh	r0, [r4, #12]
 800cf24:	4307      	orrs	r7, r0
 800cf26:	81a7      	strh	r7, [r4, #12]
 800cf28:	e7cb      	b.n	800cec2 <__smakebuf_r+0x1a>
 800cf2a:	46c0      	nop			; (mov r8, r8)
 800cf2c:	0800c5a5 	.word	0x0800c5a5

0800cf30 <malloc>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	4b03      	ldr	r3, [pc, #12]	; (800cf40 <malloc+0x10>)
 800cf34:	0001      	movs	r1, r0
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	f000 fd8c 	bl	800da54 <_malloc_r>
 800cf3c:	bd10      	pop	{r4, pc}
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	2000000c 	.word	0x2000000c

0800cf44 <__ascii_mbtowc>:
 800cf44:	b082      	sub	sp, #8
 800cf46:	2900      	cmp	r1, #0
 800cf48:	d100      	bne.n	800cf4c <__ascii_mbtowc+0x8>
 800cf4a:	a901      	add	r1, sp, #4
 800cf4c:	1e10      	subs	r0, r2, #0
 800cf4e:	d006      	beq.n	800cf5e <__ascii_mbtowc+0x1a>
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d006      	beq.n	800cf62 <__ascii_mbtowc+0x1e>
 800cf54:	7813      	ldrb	r3, [r2, #0]
 800cf56:	600b      	str	r3, [r1, #0]
 800cf58:	7810      	ldrb	r0, [r2, #0]
 800cf5a:	1e43      	subs	r3, r0, #1
 800cf5c:	4198      	sbcs	r0, r3
 800cf5e:	b002      	add	sp, #8
 800cf60:	4770      	bx	lr
 800cf62:	2002      	movs	r0, #2
 800cf64:	4240      	negs	r0, r0
 800cf66:	e7fa      	b.n	800cf5e <__ascii_mbtowc+0x1a>

0800cf68 <memchr>:
 800cf68:	b2c9      	uxtb	r1, r1
 800cf6a:	1882      	adds	r2, r0, r2
 800cf6c:	4290      	cmp	r0, r2
 800cf6e:	d101      	bne.n	800cf74 <memchr+0xc>
 800cf70:	2000      	movs	r0, #0
 800cf72:	4770      	bx	lr
 800cf74:	7803      	ldrb	r3, [r0, #0]
 800cf76:	428b      	cmp	r3, r1
 800cf78:	d0fb      	beq.n	800cf72 <memchr+0xa>
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	e7f6      	b.n	800cf6c <memchr+0x4>

0800cf7e <memcpy>:
 800cf7e:	2300      	movs	r3, #0
 800cf80:	b510      	push	{r4, lr}
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d100      	bne.n	800cf88 <memcpy+0xa>
 800cf86:	bd10      	pop	{r4, pc}
 800cf88:	5ccc      	ldrb	r4, [r1, r3]
 800cf8a:	54c4      	strb	r4, [r0, r3]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	e7f8      	b.n	800cf82 <memcpy+0x4>

0800cf90 <_Balloc>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf94:	0006      	movs	r6, r0
 800cf96:	000c      	movs	r4, r1
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	d10e      	bne.n	800cfba <_Balloc+0x2a>
 800cf9c:	2010      	movs	r0, #16
 800cf9e:	f7ff ffc7 	bl	800cf30 <malloc>
 800cfa2:	1e02      	subs	r2, r0, #0
 800cfa4:	6270      	str	r0, [r6, #36]	; 0x24
 800cfa6:	d104      	bne.n	800cfb2 <_Balloc+0x22>
 800cfa8:	2166      	movs	r1, #102	; 0x66
 800cfaa:	4b19      	ldr	r3, [pc, #100]	; (800d010 <_Balloc+0x80>)
 800cfac:	4819      	ldr	r0, [pc, #100]	; (800d014 <_Balloc+0x84>)
 800cfae:	f001 f923 	bl	800e1f8 <__assert_func>
 800cfb2:	6045      	str	r5, [r0, #4]
 800cfb4:	6085      	str	r5, [r0, #8]
 800cfb6:	6005      	str	r5, [r0, #0]
 800cfb8:	60c5      	str	r5, [r0, #12]
 800cfba:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800cfbc:	68eb      	ldr	r3, [r5, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d013      	beq.n	800cfea <_Balloc+0x5a>
 800cfc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cfc4:	00a2      	lsls	r2, r4, #2
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	189b      	adds	r3, r3, r2
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d118      	bne.n	800d002 <_Balloc+0x72>
 800cfd0:	2101      	movs	r1, #1
 800cfd2:	000d      	movs	r5, r1
 800cfd4:	40a5      	lsls	r5, r4
 800cfd6:	1d6a      	adds	r2, r5, #5
 800cfd8:	0030      	movs	r0, r6
 800cfda:	0092      	lsls	r2, r2, #2
 800cfdc:	f000 fca1 	bl	800d922 <_calloc_r>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d00c      	beq.n	800cffe <_Balloc+0x6e>
 800cfe4:	6044      	str	r4, [r0, #4]
 800cfe6:	6085      	str	r5, [r0, #8]
 800cfe8:	e00d      	b.n	800d006 <_Balloc+0x76>
 800cfea:	2221      	movs	r2, #33	; 0x21
 800cfec:	2104      	movs	r1, #4
 800cfee:	0030      	movs	r0, r6
 800cff0:	f000 fc97 	bl	800d922 <_calloc_r>
 800cff4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cff6:	60e8      	str	r0, [r5, #12]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e1      	bne.n	800cfc2 <_Balloc+0x32>
 800cffe:	2000      	movs	r0, #0
 800d000:	bd70      	pop	{r4, r5, r6, pc}
 800d002:	6802      	ldr	r2, [r0, #0]
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	2300      	movs	r3, #0
 800d008:	6103      	str	r3, [r0, #16]
 800d00a:	60c3      	str	r3, [r0, #12]
 800d00c:	e7f8      	b.n	800d000 <_Balloc+0x70>
 800d00e:	46c0      	nop			; (mov r8, r8)
 800d010:	0800e836 	.word	0x0800e836
 800d014:	0800e998 	.word	0x0800e998

0800d018 <_Bfree>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d01c:	0005      	movs	r5, r0
 800d01e:	000c      	movs	r4, r1
 800d020:	2e00      	cmp	r6, #0
 800d022:	d10e      	bne.n	800d042 <_Bfree+0x2a>
 800d024:	2010      	movs	r0, #16
 800d026:	f7ff ff83 	bl	800cf30 <malloc>
 800d02a:	1e02      	subs	r2, r0, #0
 800d02c:	6268      	str	r0, [r5, #36]	; 0x24
 800d02e:	d104      	bne.n	800d03a <_Bfree+0x22>
 800d030:	218a      	movs	r1, #138	; 0x8a
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <_Bfree+0x40>)
 800d034:	4809      	ldr	r0, [pc, #36]	; (800d05c <_Bfree+0x44>)
 800d036:	f001 f8df 	bl	800e1f8 <__assert_func>
 800d03a:	6046      	str	r6, [r0, #4]
 800d03c:	6086      	str	r6, [r0, #8]
 800d03e:	6006      	str	r6, [r0, #0]
 800d040:	60c6      	str	r6, [r0, #12]
 800d042:	2c00      	cmp	r4, #0
 800d044:	d007      	beq.n	800d056 <_Bfree+0x3e>
 800d046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d048:	6862      	ldr	r2, [r4, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	0092      	lsls	r2, r2, #2
 800d04e:	189b      	adds	r3, r3, r2
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	6022      	str	r2, [r4, #0]
 800d054:	601c      	str	r4, [r3, #0]
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	0800e836 	.word	0x0800e836
 800d05c:	0800e998 	.word	0x0800e998

0800d060 <__multadd>:
 800d060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d062:	000e      	movs	r6, r1
 800d064:	9001      	str	r0, [sp, #4]
 800d066:	000c      	movs	r4, r1
 800d068:	001d      	movs	r5, r3
 800d06a:	2000      	movs	r0, #0
 800d06c:	690f      	ldr	r7, [r1, #16]
 800d06e:	3614      	adds	r6, #20
 800d070:	6833      	ldr	r3, [r6, #0]
 800d072:	3001      	adds	r0, #1
 800d074:	b299      	uxth	r1, r3
 800d076:	4351      	muls	r1, r2
 800d078:	0c1b      	lsrs	r3, r3, #16
 800d07a:	4353      	muls	r3, r2
 800d07c:	1949      	adds	r1, r1, r5
 800d07e:	0c0d      	lsrs	r5, r1, #16
 800d080:	195b      	adds	r3, r3, r5
 800d082:	0c1d      	lsrs	r5, r3, #16
 800d084:	b289      	uxth	r1, r1
 800d086:	041b      	lsls	r3, r3, #16
 800d088:	185b      	adds	r3, r3, r1
 800d08a:	c608      	stmia	r6!, {r3}
 800d08c:	4287      	cmp	r7, r0
 800d08e:	dcef      	bgt.n	800d070 <__multadd+0x10>
 800d090:	2d00      	cmp	r5, #0
 800d092:	d022      	beq.n	800d0da <__multadd+0x7a>
 800d094:	68a3      	ldr	r3, [r4, #8]
 800d096:	42bb      	cmp	r3, r7
 800d098:	dc19      	bgt.n	800d0ce <__multadd+0x6e>
 800d09a:	6863      	ldr	r3, [r4, #4]
 800d09c:	9801      	ldr	r0, [sp, #4]
 800d09e:	1c59      	adds	r1, r3, #1
 800d0a0:	f7ff ff76 	bl	800cf90 <_Balloc>
 800d0a4:	1e06      	subs	r6, r0, #0
 800d0a6:	d105      	bne.n	800d0b4 <__multadd+0x54>
 800d0a8:	0002      	movs	r2, r0
 800d0aa:	21b5      	movs	r1, #181	; 0xb5
 800d0ac:	4b0c      	ldr	r3, [pc, #48]	; (800d0e0 <__multadd+0x80>)
 800d0ae:	480d      	ldr	r0, [pc, #52]	; (800d0e4 <__multadd+0x84>)
 800d0b0:	f001 f8a2 	bl	800e1f8 <__assert_func>
 800d0b4:	0021      	movs	r1, r4
 800d0b6:	6923      	ldr	r3, [r4, #16]
 800d0b8:	310c      	adds	r1, #12
 800d0ba:	1c9a      	adds	r2, r3, #2
 800d0bc:	0092      	lsls	r2, r2, #2
 800d0be:	300c      	adds	r0, #12
 800d0c0:	f7ff ff5d 	bl	800cf7e <memcpy>
 800d0c4:	0021      	movs	r1, r4
 800d0c6:	9801      	ldr	r0, [sp, #4]
 800d0c8:	f7ff ffa6 	bl	800d018 <_Bfree>
 800d0cc:	0034      	movs	r4, r6
 800d0ce:	1d3b      	adds	r3, r7, #4
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	18e3      	adds	r3, r4, r3
 800d0d4:	605d      	str	r5, [r3, #4]
 800d0d6:	1c7b      	adds	r3, r7, #1
 800d0d8:	6123      	str	r3, [r4, #16]
 800d0da:	0020      	movs	r0, r4
 800d0dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d0de:	46c0      	nop			; (mov r8, r8)
 800d0e0:	0800e8a8 	.word	0x0800e8a8
 800d0e4:	0800e998 	.word	0x0800e998

0800d0e8 <__s2b>:
 800d0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0ea:	0006      	movs	r6, r0
 800d0ec:	0018      	movs	r0, r3
 800d0ee:	000c      	movs	r4, r1
 800d0f0:	3008      	adds	r0, #8
 800d0f2:	2109      	movs	r1, #9
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	0015      	movs	r5, r2
 800d0f8:	f7f3 f8ac 	bl	8000254 <__divsi3>
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	2100      	movs	r1, #0
 800d100:	4283      	cmp	r3, r0
 800d102:	db0a      	blt.n	800d11a <__s2b+0x32>
 800d104:	0030      	movs	r0, r6
 800d106:	f7ff ff43 	bl	800cf90 <_Balloc>
 800d10a:	1e01      	subs	r1, r0, #0
 800d10c:	d108      	bne.n	800d120 <__s2b+0x38>
 800d10e:	0002      	movs	r2, r0
 800d110:	4b19      	ldr	r3, [pc, #100]	; (800d178 <__s2b+0x90>)
 800d112:	481a      	ldr	r0, [pc, #104]	; (800d17c <__s2b+0x94>)
 800d114:	31ce      	adds	r1, #206	; 0xce
 800d116:	f001 f86f 	bl	800e1f8 <__assert_func>
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	3101      	adds	r1, #1
 800d11e:	e7ef      	b.n	800d100 <__s2b+0x18>
 800d120:	9b08      	ldr	r3, [sp, #32]
 800d122:	6143      	str	r3, [r0, #20]
 800d124:	2301      	movs	r3, #1
 800d126:	6103      	str	r3, [r0, #16]
 800d128:	2d09      	cmp	r5, #9
 800d12a:	dd18      	ble.n	800d15e <__s2b+0x76>
 800d12c:	0023      	movs	r3, r4
 800d12e:	3309      	adds	r3, #9
 800d130:	001f      	movs	r7, r3
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	1964      	adds	r4, r4, r5
 800d136:	783b      	ldrb	r3, [r7, #0]
 800d138:	220a      	movs	r2, #10
 800d13a:	0030      	movs	r0, r6
 800d13c:	3b30      	subs	r3, #48	; 0x30
 800d13e:	f7ff ff8f 	bl	800d060 <__multadd>
 800d142:	3701      	adds	r7, #1
 800d144:	0001      	movs	r1, r0
 800d146:	42a7      	cmp	r7, r4
 800d148:	d1f5      	bne.n	800d136 <__s2b+0x4e>
 800d14a:	002c      	movs	r4, r5
 800d14c:	9b00      	ldr	r3, [sp, #0]
 800d14e:	3c08      	subs	r4, #8
 800d150:	191c      	adds	r4, r3, r4
 800d152:	002f      	movs	r7, r5
 800d154:	9b01      	ldr	r3, [sp, #4]
 800d156:	429f      	cmp	r7, r3
 800d158:	db04      	blt.n	800d164 <__s2b+0x7c>
 800d15a:	0008      	movs	r0, r1
 800d15c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d15e:	2509      	movs	r5, #9
 800d160:	340a      	adds	r4, #10
 800d162:	e7f6      	b.n	800d152 <__s2b+0x6a>
 800d164:	1b63      	subs	r3, r4, r5
 800d166:	5ddb      	ldrb	r3, [r3, r7]
 800d168:	220a      	movs	r2, #10
 800d16a:	0030      	movs	r0, r6
 800d16c:	3b30      	subs	r3, #48	; 0x30
 800d16e:	f7ff ff77 	bl	800d060 <__multadd>
 800d172:	3701      	adds	r7, #1
 800d174:	0001      	movs	r1, r0
 800d176:	e7ed      	b.n	800d154 <__s2b+0x6c>
 800d178:	0800e8a8 	.word	0x0800e8a8
 800d17c:	0800e998 	.word	0x0800e998

0800d180 <__hi0bits>:
 800d180:	0003      	movs	r3, r0
 800d182:	0c02      	lsrs	r2, r0, #16
 800d184:	2000      	movs	r0, #0
 800d186:	4282      	cmp	r2, r0
 800d188:	d101      	bne.n	800d18e <__hi0bits+0xe>
 800d18a:	041b      	lsls	r3, r3, #16
 800d18c:	3010      	adds	r0, #16
 800d18e:	0e1a      	lsrs	r2, r3, #24
 800d190:	d101      	bne.n	800d196 <__hi0bits+0x16>
 800d192:	3008      	adds	r0, #8
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	0f1a      	lsrs	r2, r3, #28
 800d198:	d101      	bne.n	800d19e <__hi0bits+0x1e>
 800d19a:	3004      	adds	r0, #4
 800d19c:	011b      	lsls	r3, r3, #4
 800d19e:	0f9a      	lsrs	r2, r3, #30
 800d1a0:	d101      	bne.n	800d1a6 <__hi0bits+0x26>
 800d1a2:	3002      	adds	r0, #2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	db03      	blt.n	800d1b2 <__hi0bits+0x32>
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	005b      	lsls	r3, r3, #1
 800d1ae:	d400      	bmi.n	800d1b2 <__hi0bits+0x32>
 800d1b0:	2020      	movs	r0, #32
 800d1b2:	4770      	bx	lr

0800d1b4 <__lo0bits>:
 800d1b4:	6803      	ldr	r3, [r0, #0]
 800d1b6:	0002      	movs	r2, r0
 800d1b8:	2107      	movs	r1, #7
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	4008      	ands	r0, r1
 800d1be:	420b      	tst	r3, r1
 800d1c0:	d00d      	beq.n	800d1de <__lo0bits+0x2a>
 800d1c2:	3906      	subs	r1, #6
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	420b      	tst	r3, r1
 800d1c8:	d105      	bne.n	800d1d6 <__lo0bits+0x22>
 800d1ca:	3002      	adds	r0, #2
 800d1cc:	4203      	tst	r3, r0
 800d1ce:	d003      	beq.n	800d1d8 <__lo0bits+0x24>
 800d1d0:	40cb      	lsrs	r3, r1
 800d1d2:	0008      	movs	r0, r1
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	4770      	bx	lr
 800d1d8:	089b      	lsrs	r3, r3, #2
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	e7fb      	b.n	800d1d6 <__lo0bits+0x22>
 800d1de:	b299      	uxth	r1, r3
 800d1e0:	2900      	cmp	r1, #0
 800d1e2:	d101      	bne.n	800d1e8 <__lo0bits+0x34>
 800d1e4:	2010      	movs	r0, #16
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	b2d9      	uxtb	r1, r3
 800d1ea:	2900      	cmp	r1, #0
 800d1ec:	d101      	bne.n	800d1f2 <__lo0bits+0x3e>
 800d1ee:	3008      	adds	r0, #8
 800d1f0:	0a1b      	lsrs	r3, r3, #8
 800d1f2:	0719      	lsls	r1, r3, #28
 800d1f4:	d101      	bne.n	800d1fa <__lo0bits+0x46>
 800d1f6:	3004      	adds	r0, #4
 800d1f8:	091b      	lsrs	r3, r3, #4
 800d1fa:	0799      	lsls	r1, r3, #30
 800d1fc:	d101      	bne.n	800d202 <__lo0bits+0x4e>
 800d1fe:	3002      	adds	r0, #2
 800d200:	089b      	lsrs	r3, r3, #2
 800d202:	07d9      	lsls	r1, r3, #31
 800d204:	d4e9      	bmi.n	800d1da <__lo0bits+0x26>
 800d206:	3001      	adds	r0, #1
 800d208:	085b      	lsrs	r3, r3, #1
 800d20a:	d1e6      	bne.n	800d1da <__lo0bits+0x26>
 800d20c:	2020      	movs	r0, #32
 800d20e:	e7e2      	b.n	800d1d6 <__lo0bits+0x22>

0800d210 <__i2b>:
 800d210:	b510      	push	{r4, lr}
 800d212:	000c      	movs	r4, r1
 800d214:	2101      	movs	r1, #1
 800d216:	f7ff febb 	bl	800cf90 <_Balloc>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d106      	bne.n	800d22c <__i2b+0x1c>
 800d21e:	21a0      	movs	r1, #160	; 0xa0
 800d220:	0002      	movs	r2, r0
 800d222:	4b04      	ldr	r3, [pc, #16]	; (800d234 <__i2b+0x24>)
 800d224:	4804      	ldr	r0, [pc, #16]	; (800d238 <__i2b+0x28>)
 800d226:	0049      	lsls	r1, r1, #1
 800d228:	f000 ffe6 	bl	800e1f8 <__assert_func>
 800d22c:	2301      	movs	r3, #1
 800d22e:	6144      	str	r4, [r0, #20]
 800d230:	6103      	str	r3, [r0, #16]
 800d232:	bd10      	pop	{r4, pc}
 800d234:	0800e8a8 	.word	0x0800e8a8
 800d238:	0800e998 	.word	0x0800e998

0800d23c <__multiply>:
 800d23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d23e:	690b      	ldr	r3, [r1, #16]
 800d240:	0014      	movs	r4, r2
 800d242:	6912      	ldr	r2, [r2, #16]
 800d244:	000d      	movs	r5, r1
 800d246:	b089      	sub	sp, #36	; 0x24
 800d248:	4293      	cmp	r3, r2
 800d24a:	da01      	bge.n	800d250 <__multiply+0x14>
 800d24c:	0025      	movs	r5, r4
 800d24e:	000c      	movs	r4, r1
 800d250:	692f      	ldr	r7, [r5, #16]
 800d252:	6926      	ldr	r6, [r4, #16]
 800d254:	6869      	ldr	r1, [r5, #4]
 800d256:	19bb      	adds	r3, r7, r6
 800d258:	9302      	str	r3, [sp, #8]
 800d25a:	68ab      	ldr	r3, [r5, #8]
 800d25c:	19ba      	adds	r2, r7, r6
 800d25e:	4293      	cmp	r3, r2
 800d260:	da00      	bge.n	800d264 <__multiply+0x28>
 800d262:	3101      	adds	r1, #1
 800d264:	f7ff fe94 	bl	800cf90 <_Balloc>
 800d268:	9001      	str	r0, [sp, #4]
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d106      	bne.n	800d27c <__multiply+0x40>
 800d26e:	215e      	movs	r1, #94	; 0x5e
 800d270:	0002      	movs	r2, r0
 800d272:	4b48      	ldr	r3, [pc, #288]	; (800d394 <__multiply+0x158>)
 800d274:	4848      	ldr	r0, [pc, #288]	; (800d398 <__multiply+0x15c>)
 800d276:	31ff      	adds	r1, #255	; 0xff
 800d278:	f000 ffbe 	bl	800e1f8 <__assert_func>
 800d27c:	9b01      	ldr	r3, [sp, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	3314      	adds	r3, #20
 800d282:	469c      	mov	ip, r3
 800d284:	19bb      	adds	r3, r7, r6
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4463      	add	r3, ip
 800d28a:	9303      	str	r3, [sp, #12]
 800d28c:	4663      	mov	r3, ip
 800d28e:	9903      	ldr	r1, [sp, #12]
 800d290:	428b      	cmp	r3, r1
 800d292:	d32c      	bcc.n	800d2ee <__multiply+0xb2>
 800d294:	002b      	movs	r3, r5
 800d296:	0022      	movs	r2, r4
 800d298:	3314      	adds	r3, #20
 800d29a:	00bf      	lsls	r7, r7, #2
 800d29c:	3214      	adds	r2, #20
 800d29e:	9306      	str	r3, [sp, #24]
 800d2a0:	00b6      	lsls	r6, r6, #2
 800d2a2:	19db      	adds	r3, r3, r7
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	1993      	adds	r3, r2, r6
 800d2a8:	9307      	str	r3, [sp, #28]
 800d2aa:	2304      	movs	r3, #4
 800d2ac:	9305      	str	r3, [sp, #20]
 800d2ae:	002b      	movs	r3, r5
 800d2b0:	9904      	ldr	r1, [sp, #16]
 800d2b2:	3315      	adds	r3, #21
 800d2b4:	9200      	str	r2, [sp, #0]
 800d2b6:	4299      	cmp	r1, r3
 800d2b8:	d305      	bcc.n	800d2c6 <__multiply+0x8a>
 800d2ba:	1b4b      	subs	r3, r1, r5
 800d2bc:	3b15      	subs	r3, #21
 800d2be:	089b      	lsrs	r3, r3, #2
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	9305      	str	r3, [sp, #20]
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	9a00      	ldr	r2, [sp, #0]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d311      	bcc.n	800d2f2 <__multiply+0xb6>
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	dd06      	ble.n	800d2e2 <__multiply+0xa6>
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	3b04      	subs	r3, #4
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d053      	beq.n	800d38a <__multiply+0x14e>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	9a02      	ldr	r2, [sp, #8]
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	611a      	str	r2, [r3, #16]
 800d2ea:	b009      	add	sp, #36	; 0x24
 800d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ee:	c304      	stmia	r3!, {r2}
 800d2f0:	e7cd      	b.n	800d28e <__multiply+0x52>
 800d2f2:	9b00      	ldr	r3, [sp, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	b298      	uxth	r0, r3
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d01b      	beq.n	800d334 <__multiply+0xf8>
 800d2fc:	4667      	mov	r7, ip
 800d2fe:	2400      	movs	r4, #0
 800d300:	9e06      	ldr	r6, [sp, #24]
 800d302:	ce02      	ldmia	r6!, {r1}
 800d304:	683a      	ldr	r2, [r7, #0]
 800d306:	b28b      	uxth	r3, r1
 800d308:	4343      	muls	r3, r0
 800d30a:	b292      	uxth	r2, r2
 800d30c:	189b      	adds	r3, r3, r2
 800d30e:	191b      	adds	r3, r3, r4
 800d310:	0c0c      	lsrs	r4, r1, #16
 800d312:	4344      	muls	r4, r0
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	0c11      	lsrs	r1, r2, #16
 800d318:	1861      	adds	r1, r4, r1
 800d31a:	0c1c      	lsrs	r4, r3, #16
 800d31c:	1909      	adds	r1, r1, r4
 800d31e:	0c0c      	lsrs	r4, r1, #16
 800d320:	b29b      	uxth	r3, r3
 800d322:	0409      	lsls	r1, r1, #16
 800d324:	430b      	orrs	r3, r1
 800d326:	c708      	stmia	r7!, {r3}
 800d328:	9b04      	ldr	r3, [sp, #16]
 800d32a:	42b3      	cmp	r3, r6
 800d32c:	d8e9      	bhi.n	800d302 <__multiply+0xc6>
 800d32e:	4663      	mov	r3, ip
 800d330:	9a05      	ldr	r2, [sp, #20]
 800d332:	509c      	str	r4, [r3, r2]
 800d334:	9b00      	ldr	r3, [sp, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	0c1e      	lsrs	r6, r3, #16
 800d33a:	d020      	beq.n	800d37e <__multiply+0x142>
 800d33c:	4663      	mov	r3, ip
 800d33e:	002c      	movs	r4, r5
 800d340:	4660      	mov	r0, ip
 800d342:	2700      	movs	r7, #0
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3414      	adds	r4, #20
 800d348:	6822      	ldr	r2, [r4, #0]
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	b291      	uxth	r1, r2
 800d34e:	4371      	muls	r1, r6
 800d350:	6802      	ldr	r2, [r0, #0]
 800d352:	0c12      	lsrs	r2, r2, #16
 800d354:	1889      	adds	r1, r1, r2
 800d356:	19cf      	adds	r7, r1, r7
 800d358:	0439      	lsls	r1, r7, #16
 800d35a:	430b      	orrs	r3, r1
 800d35c:	6003      	str	r3, [r0, #0]
 800d35e:	cc02      	ldmia	r4!, {r1}
 800d360:	6843      	ldr	r3, [r0, #4]
 800d362:	0c09      	lsrs	r1, r1, #16
 800d364:	4371      	muls	r1, r6
 800d366:	b29b      	uxth	r3, r3
 800d368:	0c3f      	lsrs	r7, r7, #16
 800d36a:	18cb      	adds	r3, r1, r3
 800d36c:	9a04      	ldr	r2, [sp, #16]
 800d36e:	19db      	adds	r3, r3, r7
 800d370:	0c1f      	lsrs	r7, r3, #16
 800d372:	3004      	adds	r0, #4
 800d374:	42a2      	cmp	r2, r4
 800d376:	d8e7      	bhi.n	800d348 <__multiply+0x10c>
 800d378:	4662      	mov	r2, ip
 800d37a:	9905      	ldr	r1, [sp, #20]
 800d37c:	5053      	str	r3, [r2, r1]
 800d37e:	9b00      	ldr	r3, [sp, #0]
 800d380:	3304      	adds	r3, #4
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	2304      	movs	r3, #4
 800d386:	449c      	add	ip, r3
 800d388:	e79d      	b.n	800d2c6 <__multiply+0x8a>
 800d38a:	9b02      	ldr	r3, [sp, #8]
 800d38c:	3b01      	subs	r3, #1
 800d38e:	9302      	str	r3, [sp, #8]
 800d390:	e79d      	b.n	800d2ce <__multiply+0x92>
 800d392:	46c0      	nop			; (mov r8, r8)
 800d394:	0800e8a8 	.word	0x0800e8a8
 800d398:	0800e998 	.word	0x0800e998

0800d39c <__pow5mult>:
 800d39c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d39e:	2303      	movs	r3, #3
 800d3a0:	0015      	movs	r5, r2
 800d3a2:	0007      	movs	r7, r0
 800d3a4:	000e      	movs	r6, r1
 800d3a6:	401a      	ands	r2, r3
 800d3a8:	421d      	tst	r5, r3
 800d3aa:	d008      	beq.n	800d3be <__pow5mult+0x22>
 800d3ac:	4925      	ldr	r1, [pc, #148]	; (800d444 <__pow5mult+0xa8>)
 800d3ae:	3a01      	subs	r2, #1
 800d3b0:	0092      	lsls	r2, r2, #2
 800d3b2:	5852      	ldr	r2, [r2, r1]
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	0031      	movs	r1, r6
 800d3b8:	f7ff fe52 	bl	800d060 <__multadd>
 800d3bc:	0006      	movs	r6, r0
 800d3be:	10ad      	asrs	r5, r5, #2
 800d3c0:	d03d      	beq.n	800d43e <__pow5mult+0xa2>
 800d3c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d3c4:	2c00      	cmp	r4, #0
 800d3c6:	d10f      	bne.n	800d3e8 <__pow5mult+0x4c>
 800d3c8:	2010      	movs	r0, #16
 800d3ca:	f7ff fdb1 	bl	800cf30 <malloc>
 800d3ce:	1e02      	subs	r2, r0, #0
 800d3d0:	6278      	str	r0, [r7, #36]	; 0x24
 800d3d2:	d105      	bne.n	800d3e0 <__pow5mult+0x44>
 800d3d4:	21d7      	movs	r1, #215	; 0xd7
 800d3d6:	4b1c      	ldr	r3, [pc, #112]	; (800d448 <__pow5mult+0xac>)
 800d3d8:	481c      	ldr	r0, [pc, #112]	; (800d44c <__pow5mult+0xb0>)
 800d3da:	0049      	lsls	r1, r1, #1
 800d3dc:	f000 ff0c 	bl	800e1f8 <__assert_func>
 800d3e0:	6044      	str	r4, [r0, #4]
 800d3e2:	6084      	str	r4, [r0, #8]
 800d3e4:	6004      	str	r4, [r0, #0]
 800d3e6:	60c4      	str	r4, [r0, #12]
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	689c      	ldr	r4, [r3, #8]
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	2c00      	cmp	r4, #0
 800d3f0:	d108      	bne.n	800d404 <__pow5mult+0x68>
 800d3f2:	0038      	movs	r0, r7
 800d3f4:	4916      	ldr	r1, [pc, #88]	; (800d450 <__pow5mult+0xb4>)
 800d3f6:	f7ff ff0b 	bl	800d210 <__i2b>
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	0004      	movs	r4, r0
 800d3fe:	6098      	str	r0, [r3, #8]
 800d400:	2300      	movs	r3, #0
 800d402:	6003      	str	r3, [r0, #0]
 800d404:	2301      	movs	r3, #1
 800d406:	421d      	tst	r5, r3
 800d408:	d00a      	beq.n	800d420 <__pow5mult+0x84>
 800d40a:	0031      	movs	r1, r6
 800d40c:	0022      	movs	r2, r4
 800d40e:	0038      	movs	r0, r7
 800d410:	f7ff ff14 	bl	800d23c <__multiply>
 800d414:	0031      	movs	r1, r6
 800d416:	9001      	str	r0, [sp, #4]
 800d418:	0038      	movs	r0, r7
 800d41a:	f7ff fdfd 	bl	800d018 <_Bfree>
 800d41e:	9e01      	ldr	r6, [sp, #4]
 800d420:	106d      	asrs	r5, r5, #1
 800d422:	d00c      	beq.n	800d43e <__pow5mult+0xa2>
 800d424:	6820      	ldr	r0, [r4, #0]
 800d426:	2800      	cmp	r0, #0
 800d428:	d107      	bne.n	800d43a <__pow5mult+0x9e>
 800d42a:	0022      	movs	r2, r4
 800d42c:	0021      	movs	r1, r4
 800d42e:	0038      	movs	r0, r7
 800d430:	f7ff ff04 	bl	800d23c <__multiply>
 800d434:	2300      	movs	r3, #0
 800d436:	6020      	str	r0, [r4, #0]
 800d438:	6003      	str	r3, [r0, #0]
 800d43a:	0004      	movs	r4, r0
 800d43c:	e7e2      	b.n	800d404 <__pow5mult+0x68>
 800d43e:	0030      	movs	r0, r6
 800d440:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d442:	46c0      	nop			; (mov r8, r8)
 800d444:	0800eae8 	.word	0x0800eae8
 800d448:	0800e836 	.word	0x0800e836
 800d44c:	0800e998 	.word	0x0800e998
 800d450:	00000271 	.word	0x00000271

0800d454 <__lshift>:
 800d454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d456:	000c      	movs	r4, r1
 800d458:	0017      	movs	r7, r2
 800d45a:	6923      	ldr	r3, [r4, #16]
 800d45c:	1155      	asrs	r5, r2, #5
 800d45e:	b087      	sub	sp, #28
 800d460:	18eb      	adds	r3, r5, r3
 800d462:	9302      	str	r3, [sp, #8]
 800d464:	3301      	adds	r3, #1
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	6849      	ldr	r1, [r1, #4]
 800d46a:	68a3      	ldr	r3, [r4, #8]
 800d46c:	9004      	str	r0, [sp, #16]
 800d46e:	9a01      	ldr	r2, [sp, #4]
 800d470:	4293      	cmp	r3, r2
 800d472:	db10      	blt.n	800d496 <__lshift+0x42>
 800d474:	9804      	ldr	r0, [sp, #16]
 800d476:	f7ff fd8b 	bl	800cf90 <_Balloc>
 800d47a:	2300      	movs	r3, #0
 800d47c:	0002      	movs	r2, r0
 800d47e:	0006      	movs	r6, r0
 800d480:	0019      	movs	r1, r3
 800d482:	3214      	adds	r2, #20
 800d484:	4298      	cmp	r0, r3
 800d486:	d10c      	bne.n	800d4a2 <__lshift+0x4e>
 800d488:	21da      	movs	r1, #218	; 0xda
 800d48a:	0002      	movs	r2, r0
 800d48c:	4b26      	ldr	r3, [pc, #152]	; (800d528 <__lshift+0xd4>)
 800d48e:	4827      	ldr	r0, [pc, #156]	; (800d52c <__lshift+0xd8>)
 800d490:	31ff      	adds	r1, #255	; 0xff
 800d492:	f000 feb1 	bl	800e1f8 <__assert_func>
 800d496:	3101      	adds	r1, #1
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	e7e8      	b.n	800d46e <__lshift+0x1a>
 800d49c:	0098      	lsls	r0, r3, #2
 800d49e:	5011      	str	r1, [r2, r0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	42ab      	cmp	r3, r5
 800d4a4:	dbfa      	blt.n	800d49c <__lshift+0x48>
 800d4a6:	43eb      	mvns	r3, r5
 800d4a8:	17db      	asrs	r3, r3, #31
 800d4aa:	401d      	ands	r5, r3
 800d4ac:	211f      	movs	r1, #31
 800d4ae:	0023      	movs	r3, r4
 800d4b0:	0038      	movs	r0, r7
 800d4b2:	00ad      	lsls	r5, r5, #2
 800d4b4:	1955      	adds	r5, r2, r5
 800d4b6:	6922      	ldr	r2, [r4, #16]
 800d4b8:	3314      	adds	r3, #20
 800d4ba:	0092      	lsls	r2, r2, #2
 800d4bc:	4008      	ands	r0, r1
 800d4be:	4684      	mov	ip, r0
 800d4c0:	189a      	adds	r2, r3, r2
 800d4c2:	420f      	tst	r7, r1
 800d4c4:	d02a      	beq.n	800d51c <__lshift+0xc8>
 800d4c6:	3101      	adds	r1, #1
 800d4c8:	1a09      	subs	r1, r1, r0
 800d4ca:	9105      	str	r1, [sp, #20]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	9503      	str	r5, [sp, #12]
 800d4d0:	4667      	mov	r7, ip
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	40b8      	lsls	r0, r7
 800d4d6:	4301      	orrs	r1, r0
 800d4d8:	9803      	ldr	r0, [sp, #12]
 800d4da:	c002      	stmia	r0!, {r1}
 800d4dc:	cb02      	ldmia	r3!, {r1}
 800d4de:	9003      	str	r0, [sp, #12]
 800d4e0:	9805      	ldr	r0, [sp, #20]
 800d4e2:	40c1      	lsrs	r1, r0
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d8f3      	bhi.n	800d4d0 <__lshift+0x7c>
 800d4e8:	0020      	movs	r0, r4
 800d4ea:	3015      	adds	r0, #21
 800d4ec:	2304      	movs	r3, #4
 800d4ee:	4282      	cmp	r2, r0
 800d4f0:	d304      	bcc.n	800d4fc <__lshift+0xa8>
 800d4f2:	1b13      	subs	r3, r2, r4
 800d4f4:	3b15      	subs	r3, #21
 800d4f6:	089b      	lsrs	r3, r3, #2
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	50e9      	str	r1, [r5, r3]
 800d4fe:	2900      	cmp	r1, #0
 800d500:	d002      	beq.n	800d508 <__lshift+0xb4>
 800d502:	9b02      	ldr	r3, [sp, #8]
 800d504:	3302      	adds	r3, #2
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	9b01      	ldr	r3, [sp, #4]
 800d50a:	9804      	ldr	r0, [sp, #16]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	0021      	movs	r1, r4
 800d510:	6133      	str	r3, [r6, #16]
 800d512:	f7ff fd81 	bl	800d018 <_Bfree>
 800d516:	0030      	movs	r0, r6
 800d518:	b007      	add	sp, #28
 800d51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51c:	cb02      	ldmia	r3!, {r1}
 800d51e:	c502      	stmia	r5!, {r1}
 800d520:	429a      	cmp	r2, r3
 800d522:	d8fb      	bhi.n	800d51c <__lshift+0xc8>
 800d524:	e7f0      	b.n	800d508 <__lshift+0xb4>
 800d526:	46c0      	nop			; (mov r8, r8)
 800d528:	0800e8a8 	.word	0x0800e8a8
 800d52c:	0800e998 	.word	0x0800e998

0800d530 <__mcmp>:
 800d530:	6902      	ldr	r2, [r0, #16]
 800d532:	690b      	ldr	r3, [r1, #16]
 800d534:	b530      	push	{r4, r5, lr}
 800d536:	0004      	movs	r4, r0
 800d538:	1ad0      	subs	r0, r2, r3
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d10d      	bne.n	800d55a <__mcmp+0x2a>
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	3414      	adds	r4, #20
 800d542:	3114      	adds	r1, #20
 800d544:	18e2      	adds	r2, r4, r3
 800d546:	18c9      	adds	r1, r1, r3
 800d548:	3a04      	subs	r2, #4
 800d54a:	3904      	subs	r1, #4
 800d54c:	6815      	ldr	r5, [r2, #0]
 800d54e:	680b      	ldr	r3, [r1, #0]
 800d550:	429d      	cmp	r5, r3
 800d552:	d003      	beq.n	800d55c <__mcmp+0x2c>
 800d554:	2001      	movs	r0, #1
 800d556:	429d      	cmp	r5, r3
 800d558:	d303      	bcc.n	800d562 <__mcmp+0x32>
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	4294      	cmp	r4, r2
 800d55e:	d3f3      	bcc.n	800d548 <__mcmp+0x18>
 800d560:	e7fb      	b.n	800d55a <__mcmp+0x2a>
 800d562:	4240      	negs	r0, r0
 800d564:	e7f9      	b.n	800d55a <__mcmp+0x2a>
	...

0800d568 <__mdiff>:
 800d568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d56a:	000e      	movs	r6, r1
 800d56c:	0007      	movs	r7, r0
 800d56e:	0011      	movs	r1, r2
 800d570:	0030      	movs	r0, r6
 800d572:	b087      	sub	sp, #28
 800d574:	0014      	movs	r4, r2
 800d576:	f7ff ffdb 	bl	800d530 <__mcmp>
 800d57a:	1e05      	subs	r5, r0, #0
 800d57c:	d110      	bne.n	800d5a0 <__mdiff+0x38>
 800d57e:	0001      	movs	r1, r0
 800d580:	0038      	movs	r0, r7
 800d582:	f7ff fd05 	bl	800cf90 <_Balloc>
 800d586:	1e02      	subs	r2, r0, #0
 800d588:	d104      	bne.n	800d594 <__mdiff+0x2c>
 800d58a:	4b40      	ldr	r3, [pc, #256]	; (800d68c <__mdiff+0x124>)
 800d58c:	4940      	ldr	r1, [pc, #256]	; (800d690 <__mdiff+0x128>)
 800d58e:	4841      	ldr	r0, [pc, #260]	; (800d694 <__mdiff+0x12c>)
 800d590:	f000 fe32 	bl	800e1f8 <__assert_func>
 800d594:	2301      	movs	r3, #1
 800d596:	6145      	str	r5, [r0, #20]
 800d598:	6103      	str	r3, [r0, #16]
 800d59a:	0010      	movs	r0, r2
 800d59c:	b007      	add	sp, #28
 800d59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	9301      	str	r3, [sp, #4]
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	db04      	blt.n	800d5b2 <__mdiff+0x4a>
 800d5a8:	0023      	movs	r3, r4
 800d5aa:	0034      	movs	r4, r6
 800d5ac:	001e      	movs	r6, r3
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	0038      	movs	r0, r7
 800d5b4:	6861      	ldr	r1, [r4, #4]
 800d5b6:	f7ff fceb 	bl	800cf90 <_Balloc>
 800d5ba:	1e02      	subs	r2, r0, #0
 800d5bc:	d103      	bne.n	800d5c6 <__mdiff+0x5e>
 800d5be:	2190      	movs	r1, #144	; 0x90
 800d5c0:	4b32      	ldr	r3, [pc, #200]	; (800d68c <__mdiff+0x124>)
 800d5c2:	0089      	lsls	r1, r1, #2
 800d5c4:	e7e3      	b.n	800d58e <__mdiff+0x26>
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	2700      	movs	r7, #0
 800d5ca:	60c3      	str	r3, [r0, #12]
 800d5cc:	6920      	ldr	r0, [r4, #16]
 800d5ce:	3414      	adds	r4, #20
 800d5d0:	9401      	str	r4, [sp, #4]
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	0084      	lsls	r4, r0, #2
 800d5d6:	191b      	adds	r3, r3, r4
 800d5d8:	0034      	movs	r4, r6
 800d5da:	9302      	str	r3, [sp, #8]
 800d5dc:	6933      	ldr	r3, [r6, #16]
 800d5de:	3414      	adds	r4, #20
 800d5e0:	0099      	lsls	r1, r3, #2
 800d5e2:	1863      	adds	r3, r4, r1
 800d5e4:	9303      	str	r3, [sp, #12]
 800d5e6:	0013      	movs	r3, r2
 800d5e8:	3314      	adds	r3, #20
 800d5ea:	469c      	mov	ip, r3
 800d5ec:	9305      	str	r3, [sp, #20]
 800d5ee:	9b01      	ldr	r3, [sp, #4]
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	cc02      	ldmia	r4!, {r1}
 800d5f6:	cb20      	ldmia	r3!, {r5}
 800d5f8:	9304      	str	r3, [sp, #16]
 800d5fa:	b2ab      	uxth	r3, r5
 800d5fc:	19df      	adds	r7, r3, r7
 800d5fe:	b28b      	uxth	r3, r1
 800d600:	1afb      	subs	r3, r7, r3
 800d602:	0c09      	lsrs	r1, r1, #16
 800d604:	0c2d      	lsrs	r5, r5, #16
 800d606:	1a6d      	subs	r5, r5, r1
 800d608:	1419      	asrs	r1, r3, #16
 800d60a:	186d      	adds	r5, r5, r1
 800d60c:	4661      	mov	r1, ip
 800d60e:	142f      	asrs	r7, r5, #16
 800d610:	b29b      	uxth	r3, r3
 800d612:	042d      	lsls	r5, r5, #16
 800d614:	432b      	orrs	r3, r5
 800d616:	c108      	stmia	r1!, {r3}
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	468c      	mov	ip, r1
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	d8e8      	bhi.n	800d5f2 <__mdiff+0x8a>
 800d620:	0031      	movs	r1, r6
 800d622:	9c03      	ldr	r4, [sp, #12]
 800d624:	3115      	adds	r1, #21
 800d626:	2304      	movs	r3, #4
 800d628:	428c      	cmp	r4, r1
 800d62a:	d304      	bcc.n	800d636 <__mdiff+0xce>
 800d62c:	1ba3      	subs	r3, r4, r6
 800d62e:	3b15      	subs	r3, #21
 800d630:	089b      	lsrs	r3, r3, #2
 800d632:	3301      	adds	r3, #1
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	9901      	ldr	r1, [sp, #4]
 800d638:	18cc      	adds	r4, r1, r3
 800d63a:	9905      	ldr	r1, [sp, #20]
 800d63c:	0026      	movs	r6, r4
 800d63e:	18cb      	adds	r3, r1, r3
 800d640:	469c      	mov	ip, r3
 800d642:	9902      	ldr	r1, [sp, #8]
 800d644:	428e      	cmp	r6, r1
 800d646:	d310      	bcc.n	800d66a <__mdiff+0x102>
 800d648:	9e02      	ldr	r6, [sp, #8]
 800d64a:	1ee1      	subs	r1, r4, #3
 800d64c:	2500      	movs	r5, #0
 800d64e:	428e      	cmp	r6, r1
 800d650:	d304      	bcc.n	800d65c <__mdiff+0xf4>
 800d652:	0031      	movs	r1, r6
 800d654:	3103      	adds	r1, #3
 800d656:	1b0c      	subs	r4, r1, r4
 800d658:	08a4      	lsrs	r4, r4, #2
 800d65a:	00a5      	lsls	r5, r4, #2
 800d65c:	195b      	adds	r3, r3, r5
 800d65e:	3b04      	subs	r3, #4
 800d660:	6819      	ldr	r1, [r3, #0]
 800d662:	2900      	cmp	r1, #0
 800d664:	d00f      	beq.n	800d686 <__mdiff+0x11e>
 800d666:	6110      	str	r0, [r2, #16]
 800d668:	e797      	b.n	800d59a <__mdiff+0x32>
 800d66a:	ce02      	ldmia	r6!, {r1}
 800d66c:	b28d      	uxth	r5, r1
 800d66e:	19ed      	adds	r5, r5, r7
 800d670:	0c0f      	lsrs	r7, r1, #16
 800d672:	1429      	asrs	r1, r5, #16
 800d674:	1879      	adds	r1, r7, r1
 800d676:	140f      	asrs	r7, r1, #16
 800d678:	b2ad      	uxth	r5, r5
 800d67a:	0409      	lsls	r1, r1, #16
 800d67c:	430d      	orrs	r5, r1
 800d67e:	4661      	mov	r1, ip
 800d680:	c120      	stmia	r1!, {r5}
 800d682:	468c      	mov	ip, r1
 800d684:	e7dd      	b.n	800d642 <__mdiff+0xda>
 800d686:	3801      	subs	r0, #1
 800d688:	e7e9      	b.n	800d65e <__mdiff+0xf6>
 800d68a:	46c0      	nop			; (mov r8, r8)
 800d68c:	0800e8a8 	.word	0x0800e8a8
 800d690:	00000232 	.word	0x00000232
 800d694:	0800e998 	.word	0x0800e998

0800d698 <__ulp>:
 800d698:	4b0f      	ldr	r3, [pc, #60]	; (800d6d8 <__ulp+0x40>)
 800d69a:	4019      	ands	r1, r3
 800d69c:	4b0f      	ldr	r3, [pc, #60]	; (800d6dc <__ulp+0x44>)
 800d69e:	18c9      	adds	r1, r1, r3
 800d6a0:	2900      	cmp	r1, #0
 800d6a2:	dd04      	ble.n	800d6ae <__ulp+0x16>
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	000b      	movs	r3, r1
 800d6a8:	0010      	movs	r0, r2
 800d6aa:	0019      	movs	r1, r3
 800d6ac:	4770      	bx	lr
 800d6ae:	4249      	negs	r1, r1
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	1509      	asrs	r1, r1, #20
 800d6b6:	2913      	cmp	r1, #19
 800d6b8:	dc04      	bgt.n	800d6c4 <__ulp+0x2c>
 800d6ba:	2080      	movs	r0, #128	; 0x80
 800d6bc:	0300      	lsls	r0, r0, #12
 800d6be:	4108      	asrs	r0, r1
 800d6c0:	0003      	movs	r3, r0
 800d6c2:	e7f1      	b.n	800d6a8 <__ulp+0x10>
 800d6c4:	3914      	subs	r1, #20
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	291e      	cmp	r1, #30
 800d6ca:	dc02      	bgt.n	800d6d2 <__ulp+0x3a>
 800d6cc:	2080      	movs	r0, #128	; 0x80
 800d6ce:	0600      	lsls	r0, r0, #24
 800d6d0:	40c8      	lsrs	r0, r1
 800d6d2:	0002      	movs	r2, r0
 800d6d4:	e7e8      	b.n	800d6a8 <__ulp+0x10>
 800d6d6:	46c0      	nop			; (mov r8, r8)
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	fcc00000 	.word	0xfcc00000

0800d6e0 <__b2d>:
 800d6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6e2:	0006      	movs	r6, r0
 800d6e4:	6903      	ldr	r3, [r0, #16]
 800d6e6:	3614      	adds	r6, #20
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	18f3      	adds	r3, r6, r3
 800d6ec:	1f1d      	subs	r5, r3, #4
 800d6ee:	682c      	ldr	r4, [r5, #0]
 800d6f0:	000f      	movs	r7, r1
 800d6f2:	0020      	movs	r0, r4
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	f7ff fd43 	bl	800d180 <__hi0bits>
 800d6fa:	2320      	movs	r3, #32
 800d6fc:	1a1b      	subs	r3, r3, r0
 800d6fe:	491f      	ldr	r1, [pc, #124]	; (800d77c <__b2d+0x9c>)
 800d700:	603b      	str	r3, [r7, #0]
 800d702:	280a      	cmp	r0, #10
 800d704:	dc16      	bgt.n	800d734 <__b2d+0x54>
 800d706:	230b      	movs	r3, #11
 800d708:	0027      	movs	r7, r4
 800d70a:	1a1b      	subs	r3, r3, r0
 800d70c:	40df      	lsrs	r7, r3
 800d70e:	4339      	orrs	r1, r7
 800d710:	469c      	mov	ip, r3
 800d712:	000b      	movs	r3, r1
 800d714:	2100      	movs	r1, #0
 800d716:	42ae      	cmp	r6, r5
 800d718:	d202      	bcs.n	800d720 <__b2d+0x40>
 800d71a:	9901      	ldr	r1, [sp, #4]
 800d71c:	3908      	subs	r1, #8
 800d71e:	6809      	ldr	r1, [r1, #0]
 800d720:	3015      	adds	r0, #21
 800d722:	4084      	lsls	r4, r0
 800d724:	4660      	mov	r0, ip
 800d726:	40c1      	lsrs	r1, r0
 800d728:	430c      	orrs	r4, r1
 800d72a:	0022      	movs	r2, r4
 800d72c:	0010      	movs	r0, r2
 800d72e:	0019      	movs	r1, r3
 800d730:	b003      	add	sp, #12
 800d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d734:	2700      	movs	r7, #0
 800d736:	42ae      	cmp	r6, r5
 800d738:	d202      	bcs.n	800d740 <__b2d+0x60>
 800d73a:	9d01      	ldr	r5, [sp, #4]
 800d73c:	3d08      	subs	r5, #8
 800d73e:	682f      	ldr	r7, [r5, #0]
 800d740:	230b      	movs	r3, #11
 800d742:	425b      	negs	r3, r3
 800d744:	469c      	mov	ip, r3
 800d746:	4484      	add	ip, r0
 800d748:	280b      	cmp	r0, #11
 800d74a:	d013      	beq.n	800d774 <__b2d+0x94>
 800d74c:	4663      	mov	r3, ip
 800d74e:	2020      	movs	r0, #32
 800d750:	409c      	lsls	r4, r3
 800d752:	1ac0      	subs	r0, r0, r3
 800d754:	003b      	movs	r3, r7
 800d756:	40c3      	lsrs	r3, r0
 800d758:	431c      	orrs	r4, r3
 800d75a:	4321      	orrs	r1, r4
 800d75c:	000b      	movs	r3, r1
 800d75e:	2100      	movs	r1, #0
 800d760:	42b5      	cmp	r5, r6
 800d762:	d901      	bls.n	800d768 <__b2d+0x88>
 800d764:	3d04      	subs	r5, #4
 800d766:	6829      	ldr	r1, [r5, #0]
 800d768:	4664      	mov	r4, ip
 800d76a:	40c1      	lsrs	r1, r0
 800d76c:	40a7      	lsls	r7, r4
 800d76e:	430f      	orrs	r7, r1
 800d770:	003a      	movs	r2, r7
 800d772:	e7db      	b.n	800d72c <__b2d+0x4c>
 800d774:	4321      	orrs	r1, r4
 800d776:	000b      	movs	r3, r1
 800d778:	e7fa      	b.n	800d770 <__b2d+0x90>
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	3ff00000 	.word	0x3ff00000

0800d780 <__d2b>:
 800d780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d782:	2101      	movs	r1, #1
 800d784:	0014      	movs	r4, r2
 800d786:	001e      	movs	r6, r3
 800d788:	9f08      	ldr	r7, [sp, #32]
 800d78a:	f7ff fc01 	bl	800cf90 <_Balloc>
 800d78e:	1e05      	subs	r5, r0, #0
 800d790:	d105      	bne.n	800d79e <__d2b+0x1e>
 800d792:	0002      	movs	r2, r0
 800d794:	4b26      	ldr	r3, [pc, #152]	; (800d830 <__d2b+0xb0>)
 800d796:	4927      	ldr	r1, [pc, #156]	; (800d834 <__d2b+0xb4>)
 800d798:	4827      	ldr	r0, [pc, #156]	; (800d838 <__d2b+0xb8>)
 800d79a:	f000 fd2d 	bl	800e1f8 <__assert_func>
 800d79e:	0333      	lsls	r3, r6, #12
 800d7a0:	0076      	lsls	r6, r6, #1
 800d7a2:	0b1b      	lsrs	r3, r3, #12
 800d7a4:	0d76      	lsrs	r6, r6, #21
 800d7a6:	d124      	bne.n	800d7f2 <__d2b+0x72>
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	2c00      	cmp	r4, #0
 800d7ac:	d027      	beq.n	800d7fe <__d2b+0x7e>
 800d7ae:	4668      	mov	r0, sp
 800d7b0:	9400      	str	r4, [sp, #0]
 800d7b2:	f7ff fcff 	bl	800d1b4 <__lo0bits>
 800d7b6:	9c00      	ldr	r4, [sp, #0]
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	d01e      	beq.n	800d7fa <__d2b+0x7a>
 800d7bc:	9b01      	ldr	r3, [sp, #4]
 800d7be:	2120      	movs	r1, #32
 800d7c0:	001a      	movs	r2, r3
 800d7c2:	1a09      	subs	r1, r1, r0
 800d7c4:	408a      	lsls	r2, r1
 800d7c6:	40c3      	lsrs	r3, r0
 800d7c8:	4322      	orrs	r2, r4
 800d7ca:	616a      	str	r2, [r5, #20]
 800d7cc:	9301      	str	r3, [sp, #4]
 800d7ce:	9c01      	ldr	r4, [sp, #4]
 800d7d0:	61ac      	str	r4, [r5, #24]
 800d7d2:	1e63      	subs	r3, r4, #1
 800d7d4:	419c      	sbcs	r4, r3
 800d7d6:	3401      	adds	r4, #1
 800d7d8:	612c      	str	r4, [r5, #16]
 800d7da:	2e00      	cmp	r6, #0
 800d7dc:	d018      	beq.n	800d810 <__d2b+0x90>
 800d7de:	4b17      	ldr	r3, [pc, #92]	; (800d83c <__d2b+0xbc>)
 800d7e0:	18f6      	adds	r6, r6, r3
 800d7e2:	2335      	movs	r3, #53	; 0x35
 800d7e4:	1836      	adds	r6, r6, r0
 800d7e6:	1a18      	subs	r0, r3, r0
 800d7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ea:	603e      	str	r6, [r7, #0]
 800d7ec:	6018      	str	r0, [r3, #0]
 800d7ee:	0028      	movs	r0, r5
 800d7f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d7f2:	2280      	movs	r2, #128	; 0x80
 800d7f4:	0352      	lsls	r2, r2, #13
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	e7d6      	b.n	800d7a8 <__d2b+0x28>
 800d7fa:	616c      	str	r4, [r5, #20]
 800d7fc:	e7e7      	b.n	800d7ce <__d2b+0x4e>
 800d7fe:	a801      	add	r0, sp, #4
 800d800:	f7ff fcd8 	bl	800d1b4 <__lo0bits>
 800d804:	2401      	movs	r4, #1
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	612c      	str	r4, [r5, #16]
 800d80a:	616b      	str	r3, [r5, #20]
 800d80c:	3020      	adds	r0, #32
 800d80e:	e7e4      	b.n	800d7da <__d2b+0x5a>
 800d810:	4b0b      	ldr	r3, [pc, #44]	; (800d840 <__d2b+0xc0>)
 800d812:	18c0      	adds	r0, r0, r3
 800d814:	4b0b      	ldr	r3, [pc, #44]	; (800d844 <__d2b+0xc4>)
 800d816:	6038      	str	r0, [r7, #0]
 800d818:	18e3      	adds	r3, r4, r3
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	18eb      	adds	r3, r5, r3
 800d81e:	6958      	ldr	r0, [r3, #20]
 800d820:	f7ff fcae 	bl	800d180 <__hi0bits>
 800d824:	0164      	lsls	r4, r4, #5
 800d826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d828:	1a24      	subs	r4, r4, r0
 800d82a:	601c      	str	r4, [r3, #0]
 800d82c:	e7df      	b.n	800d7ee <__d2b+0x6e>
 800d82e:	46c0      	nop			; (mov r8, r8)
 800d830:	0800e8a8 	.word	0x0800e8a8
 800d834:	0000030a 	.word	0x0000030a
 800d838:	0800e998 	.word	0x0800e998
 800d83c:	fffffbcd 	.word	0xfffffbcd
 800d840:	fffffbce 	.word	0xfffffbce
 800d844:	3fffffff 	.word	0x3fffffff

0800d848 <__ratio>:
 800d848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84a:	b087      	sub	sp, #28
 800d84c:	000f      	movs	r7, r1
 800d84e:	a904      	add	r1, sp, #16
 800d850:	0006      	movs	r6, r0
 800d852:	f7ff ff45 	bl	800d6e0 <__b2d>
 800d856:	9000      	str	r0, [sp, #0]
 800d858:	9101      	str	r1, [sp, #4]
 800d85a:	9c00      	ldr	r4, [sp, #0]
 800d85c:	9d01      	ldr	r5, [sp, #4]
 800d85e:	0038      	movs	r0, r7
 800d860:	a905      	add	r1, sp, #20
 800d862:	f7ff ff3d 	bl	800d6e0 <__b2d>
 800d866:	9002      	str	r0, [sp, #8]
 800d868:	9103      	str	r1, [sp, #12]
 800d86a:	9a02      	ldr	r2, [sp, #8]
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	6931      	ldr	r1, [r6, #16]
 800d870:	6938      	ldr	r0, [r7, #16]
 800d872:	9e05      	ldr	r6, [sp, #20]
 800d874:	1a08      	subs	r0, r1, r0
 800d876:	9904      	ldr	r1, [sp, #16]
 800d878:	0140      	lsls	r0, r0, #5
 800d87a:	1b89      	subs	r1, r1, r6
 800d87c:	1841      	adds	r1, r0, r1
 800d87e:	0508      	lsls	r0, r1, #20
 800d880:	2900      	cmp	r1, #0
 800d882:	dd07      	ble.n	800d894 <__ratio+0x4c>
 800d884:	9901      	ldr	r1, [sp, #4]
 800d886:	1845      	adds	r5, r0, r1
 800d888:	0020      	movs	r0, r4
 800d88a:	0029      	movs	r1, r5
 800d88c:	f7f3 fd88 	bl	80013a0 <__aeabi_ddiv>
 800d890:	b007      	add	sp, #28
 800d892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d894:	9903      	ldr	r1, [sp, #12]
 800d896:	1a0b      	subs	r3, r1, r0
 800d898:	e7f6      	b.n	800d888 <__ratio+0x40>

0800d89a <__copybits>:
 800d89a:	b570      	push	{r4, r5, r6, lr}
 800d89c:	0014      	movs	r4, r2
 800d89e:	0005      	movs	r5, r0
 800d8a0:	3901      	subs	r1, #1
 800d8a2:	6913      	ldr	r3, [r2, #16]
 800d8a4:	1149      	asrs	r1, r1, #5
 800d8a6:	3101      	adds	r1, #1
 800d8a8:	0089      	lsls	r1, r1, #2
 800d8aa:	3414      	adds	r4, #20
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	1841      	adds	r1, r0, r1
 800d8b0:	18e3      	adds	r3, r4, r3
 800d8b2:	42a3      	cmp	r3, r4
 800d8b4:	d80d      	bhi.n	800d8d2 <__copybits+0x38>
 800d8b6:	0014      	movs	r4, r2
 800d8b8:	3411      	adds	r4, #17
 800d8ba:	2500      	movs	r5, #0
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d803      	bhi.n	800d8c8 <__copybits+0x2e>
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	3b11      	subs	r3, #17
 800d8c4:	089b      	lsrs	r3, r3, #2
 800d8c6:	009d      	lsls	r5, r3, #2
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	1940      	adds	r0, r0, r5
 800d8cc:	4281      	cmp	r1, r0
 800d8ce:	d803      	bhi.n	800d8d8 <__copybits+0x3e>
 800d8d0:	bd70      	pop	{r4, r5, r6, pc}
 800d8d2:	cc40      	ldmia	r4!, {r6}
 800d8d4:	c540      	stmia	r5!, {r6}
 800d8d6:	e7ec      	b.n	800d8b2 <__copybits+0x18>
 800d8d8:	c008      	stmia	r0!, {r3}
 800d8da:	e7f7      	b.n	800d8cc <__copybits+0x32>

0800d8dc <__any_on>:
 800d8dc:	0002      	movs	r2, r0
 800d8de:	6900      	ldr	r0, [r0, #16]
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	3214      	adds	r2, #20
 800d8e4:	114b      	asrs	r3, r1, #5
 800d8e6:	4298      	cmp	r0, r3
 800d8e8:	db13      	blt.n	800d912 <__any_on+0x36>
 800d8ea:	dd0c      	ble.n	800d906 <__any_on+0x2a>
 800d8ec:	241f      	movs	r4, #31
 800d8ee:	0008      	movs	r0, r1
 800d8f0:	4020      	ands	r0, r4
 800d8f2:	4221      	tst	r1, r4
 800d8f4:	d007      	beq.n	800d906 <__any_on+0x2a>
 800d8f6:	0099      	lsls	r1, r3, #2
 800d8f8:	588c      	ldr	r4, [r1, r2]
 800d8fa:	0021      	movs	r1, r4
 800d8fc:	40c1      	lsrs	r1, r0
 800d8fe:	4081      	lsls	r1, r0
 800d900:	2001      	movs	r0, #1
 800d902:	428c      	cmp	r4, r1
 800d904:	d104      	bne.n	800d910 <__any_on+0x34>
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	18d3      	adds	r3, r2, r3
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d803      	bhi.n	800d916 <__any_on+0x3a>
 800d90e:	2000      	movs	r0, #0
 800d910:	bd10      	pop	{r4, pc}
 800d912:	0003      	movs	r3, r0
 800d914:	e7f7      	b.n	800d906 <__any_on+0x2a>
 800d916:	3b04      	subs	r3, #4
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	2900      	cmp	r1, #0
 800d91c:	d0f5      	beq.n	800d90a <__any_on+0x2e>
 800d91e:	2001      	movs	r0, #1
 800d920:	e7f6      	b.n	800d910 <__any_on+0x34>

0800d922 <_calloc_r>:
 800d922:	b570      	push	{r4, r5, r6, lr}
 800d924:	0c13      	lsrs	r3, r2, #16
 800d926:	0c0d      	lsrs	r5, r1, #16
 800d928:	d11e      	bne.n	800d968 <_calloc_r+0x46>
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10c      	bne.n	800d948 <_calloc_r+0x26>
 800d92e:	b289      	uxth	r1, r1
 800d930:	b294      	uxth	r4, r2
 800d932:	434c      	muls	r4, r1
 800d934:	0021      	movs	r1, r4
 800d936:	f000 f88d 	bl	800da54 <_malloc_r>
 800d93a:	1e05      	subs	r5, r0, #0
 800d93c:	d01b      	beq.n	800d976 <_calloc_r+0x54>
 800d93e:	0022      	movs	r2, r4
 800d940:	2100      	movs	r1, #0
 800d942:	f7fb ffcd 	bl	80098e0 <memset>
 800d946:	e016      	b.n	800d976 <_calloc_r+0x54>
 800d948:	1c1d      	adds	r5, r3, #0
 800d94a:	1c0b      	adds	r3, r1, #0
 800d94c:	b292      	uxth	r2, r2
 800d94e:	b289      	uxth	r1, r1
 800d950:	b29c      	uxth	r4, r3
 800d952:	4351      	muls	r1, r2
 800d954:	b2ab      	uxth	r3, r5
 800d956:	4363      	muls	r3, r4
 800d958:	0c0c      	lsrs	r4, r1, #16
 800d95a:	191c      	adds	r4, r3, r4
 800d95c:	0c22      	lsrs	r2, r4, #16
 800d95e:	d107      	bne.n	800d970 <_calloc_r+0x4e>
 800d960:	0424      	lsls	r4, r4, #16
 800d962:	b289      	uxth	r1, r1
 800d964:	430c      	orrs	r4, r1
 800d966:	e7e5      	b.n	800d934 <_calloc_r+0x12>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <_calloc_r+0x4e>
 800d96c:	1c13      	adds	r3, r2, #0
 800d96e:	e7ed      	b.n	800d94c <_calloc_r+0x2a>
 800d970:	230c      	movs	r3, #12
 800d972:	2500      	movs	r5, #0
 800d974:	6003      	str	r3, [r0, #0]
 800d976:	0028      	movs	r0, r5
 800d978:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d97c <_free_r>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	0005      	movs	r5, r0
 800d980:	2900      	cmp	r1, #0
 800d982:	d010      	beq.n	800d9a6 <_free_r+0x2a>
 800d984:	1f0c      	subs	r4, r1, #4
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	da00      	bge.n	800d98e <_free_r+0x12>
 800d98c:	18e4      	adds	r4, r4, r3
 800d98e:	0028      	movs	r0, r5
 800d990:	f000 fcbe 	bl	800e310 <__malloc_lock>
 800d994:	4a1d      	ldr	r2, [pc, #116]	; (800da0c <_free_r+0x90>)
 800d996:	6813      	ldr	r3, [r2, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d105      	bne.n	800d9a8 <_free_r+0x2c>
 800d99c:	6063      	str	r3, [r4, #4]
 800d99e:	6014      	str	r4, [r2, #0]
 800d9a0:	0028      	movs	r0, r5
 800d9a2:	f000 fcbd 	bl	800e320 <__malloc_unlock>
 800d9a6:	bd70      	pop	{r4, r5, r6, pc}
 800d9a8:	42a3      	cmp	r3, r4
 800d9aa:	d908      	bls.n	800d9be <_free_r+0x42>
 800d9ac:	6821      	ldr	r1, [r4, #0]
 800d9ae:	1860      	adds	r0, r4, r1
 800d9b0:	4283      	cmp	r3, r0
 800d9b2:	d1f3      	bne.n	800d99c <_free_r+0x20>
 800d9b4:	6818      	ldr	r0, [r3, #0]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	1841      	adds	r1, r0, r1
 800d9ba:	6021      	str	r1, [r4, #0]
 800d9bc:	e7ee      	b.n	800d99c <_free_r+0x20>
 800d9be:	001a      	movs	r2, r3
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <_free_r+0x4e>
 800d9c6:	42a3      	cmp	r3, r4
 800d9c8:	d9f9      	bls.n	800d9be <_free_r+0x42>
 800d9ca:	6811      	ldr	r1, [r2, #0]
 800d9cc:	1850      	adds	r0, r2, r1
 800d9ce:	42a0      	cmp	r0, r4
 800d9d0:	d10b      	bne.n	800d9ea <_free_r+0x6e>
 800d9d2:	6820      	ldr	r0, [r4, #0]
 800d9d4:	1809      	adds	r1, r1, r0
 800d9d6:	1850      	adds	r0, r2, r1
 800d9d8:	6011      	str	r1, [r2, #0]
 800d9da:	4283      	cmp	r3, r0
 800d9dc:	d1e0      	bne.n	800d9a0 <_free_r+0x24>
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	1841      	adds	r1, r0, r1
 800d9e4:	6011      	str	r1, [r2, #0]
 800d9e6:	6053      	str	r3, [r2, #4]
 800d9e8:	e7da      	b.n	800d9a0 <_free_r+0x24>
 800d9ea:	42a0      	cmp	r0, r4
 800d9ec:	d902      	bls.n	800d9f4 <_free_r+0x78>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	e7d5      	b.n	800d9a0 <_free_r+0x24>
 800d9f4:	6821      	ldr	r1, [r4, #0]
 800d9f6:	1860      	adds	r0, r4, r1
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	d103      	bne.n	800da04 <_free_r+0x88>
 800d9fc:	6818      	ldr	r0, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	1841      	adds	r1, r0, r1
 800da02:	6021      	str	r1, [r4, #0]
 800da04:	6063      	str	r3, [r4, #4]
 800da06:	6054      	str	r4, [r2, #4]
 800da08:	e7ca      	b.n	800d9a0 <_free_r+0x24>
 800da0a:	46c0      	nop			; (mov r8, r8)
 800da0c:	200004d4 	.word	0x200004d4

0800da10 <sbrk_aligned>:
 800da10:	b570      	push	{r4, r5, r6, lr}
 800da12:	4e0f      	ldr	r6, [pc, #60]	; (800da50 <sbrk_aligned+0x40>)
 800da14:	000d      	movs	r5, r1
 800da16:	6831      	ldr	r1, [r6, #0]
 800da18:	0004      	movs	r4, r0
 800da1a:	2900      	cmp	r1, #0
 800da1c:	d102      	bne.n	800da24 <sbrk_aligned+0x14>
 800da1e:	f000 fb59 	bl	800e0d4 <_sbrk_r>
 800da22:	6030      	str	r0, [r6, #0]
 800da24:	0029      	movs	r1, r5
 800da26:	0020      	movs	r0, r4
 800da28:	f000 fb54 	bl	800e0d4 <_sbrk_r>
 800da2c:	1c43      	adds	r3, r0, #1
 800da2e:	d00a      	beq.n	800da46 <sbrk_aligned+0x36>
 800da30:	2303      	movs	r3, #3
 800da32:	1cc5      	adds	r5, r0, #3
 800da34:	439d      	bics	r5, r3
 800da36:	42a8      	cmp	r0, r5
 800da38:	d007      	beq.n	800da4a <sbrk_aligned+0x3a>
 800da3a:	1a29      	subs	r1, r5, r0
 800da3c:	0020      	movs	r0, r4
 800da3e:	f000 fb49 	bl	800e0d4 <_sbrk_r>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	d101      	bne.n	800da4a <sbrk_aligned+0x3a>
 800da46:	2501      	movs	r5, #1
 800da48:	426d      	negs	r5, r5
 800da4a:	0028      	movs	r0, r5
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
 800da4e:	46c0      	nop			; (mov r8, r8)
 800da50:	200004d8 	.word	0x200004d8

0800da54 <_malloc_r>:
 800da54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da56:	2203      	movs	r2, #3
 800da58:	1ccb      	adds	r3, r1, #3
 800da5a:	4393      	bics	r3, r2
 800da5c:	3308      	adds	r3, #8
 800da5e:	0006      	movs	r6, r0
 800da60:	001f      	movs	r7, r3
 800da62:	2b0c      	cmp	r3, #12
 800da64:	d232      	bcs.n	800dacc <_malloc_r+0x78>
 800da66:	270c      	movs	r7, #12
 800da68:	42b9      	cmp	r1, r7
 800da6a:	d831      	bhi.n	800dad0 <_malloc_r+0x7c>
 800da6c:	0030      	movs	r0, r6
 800da6e:	f000 fc4f 	bl	800e310 <__malloc_lock>
 800da72:	4d32      	ldr	r5, [pc, #200]	; (800db3c <_malloc_r+0xe8>)
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	001c      	movs	r4, r3
 800da78:	2c00      	cmp	r4, #0
 800da7a:	d12e      	bne.n	800dada <_malloc_r+0x86>
 800da7c:	0039      	movs	r1, r7
 800da7e:	0030      	movs	r0, r6
 800da80:	f7ff ffc6 	bl	800da10 <sbrk_aligned>
 800da84:	0004      	movs	r4, r0
 800da86:	1c43      	adds	r3, r0, #1
 800da88:	d11e      	bne.n	800dac8 <_malloc_r+0x74>
 800da8a:	682c      	ldr	r4, [r5, #0]
 800da8c:	0025      	movs	r5, r4
 800da8e:	2d00      	cmp	r5, #0
 800da90:	d14a      	bne.n	800db28 <_malloc_r+0xd4>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	0029      	movs	r1, r5
 800da96:	18e3      	adds	r3, r4, r3
 800da98:	0030      	movs	r0, r6
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	f000 fb1a 	bl	800e0d4 <_sbrk_r>
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	4283      	cmp	r3, r0
 800daa4:	d143      	bne.n	800db2e <_malloc_r+0xda>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	3703      	adds	r7, #3
 800daaa:	1aff      	subs	r7, r7, r3
 800daac:	2303      	movs	r3, #3
 800daae:	439f      	bics	r7, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	2f0c      	cmp	r7, #12
 800dab4:	d200      	bcs.n	800dab8 <_malloc_r+0x64>
 800dab6:	270c      	movs	r7, #12
 800dab8:	0039      	movs	r1, r7
 800daba:	0030      	movs	r0, r6
 800dabc:	f7ff ffa8 	bl	800da10 <sbrk_aligned>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d034      	beq.n	800db2e <_malloc_r+0xda>
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	19df      	adds	r7, r3, r7
 800dac8:	6027      	str	r7, [r4, #0]
 800daca:	e013      	b.n	800daf4 <_malloc_r+0xa0>
 800dacc:	2b00      	cmp	r3, #0
 800dace:	dacb      	bge.n	800da68 <_malloc_r+0x14>
 800dad0:	230c      	movs	r3, #12
 800dad2:	2500      	movs	r5, #0
 800dad4:	6033      	str	r3, [r6, #0]
 800dad6:	0028      	movs	r0, r5
 800dad8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dada:	6822      	ldr	r2, [r4, #0]
 800dadc:	1bd1      	subs	r1, r2, r7
 800dade:	d420      	bmi.n	800db22 <_malloc_r+0xce>
 800dae0:	290b      	cmp	r1, #11
 800dae2:	d917      	bls.n	800db14 <_malloc_r+0xc0>
 800dae4:	19e2      	adds	r2, r4, r7
 800dae6:	6027      	str	r7, [r4, #0]
 800dae8:	42a3      	cmp	r3, r4
 800daea:	d111      	bne.n	800db10 <_malloc_r+0xbc>
 800daec:	602a      	str	r2, [r5, #0]
 800daee:	6863      	ldr	r3, [r4, #4]
 800daf0:	6011      	str	r1, [r2, #0]
 800daf2:	6053      	str	r3, [r2, #4]
 800daf4:	0030      	movs	r0, r6
 800daf6:	0025      	movs	r5, r4
 800daf8:	f000 fc12 	bl	800e320 <__malloc_unlock>
 800dafc:	2207      	movs	r2, #7
 800dafe:	350b      	adds	r5, #11
 800db00:	1d23      	adds	r3, r4, #4
 800db02:	4395      	bics	r5, r2
 800db04:	1aea      	subs	r2, r5, r3
 800db06:	429d      	cmp	r5, r3
 800db08:	d0e5      	beq.n	800dad6 <_malloc_r+0x82>
 800db0a:	1b5b      	subs	r3, r3, r5
 800db0c:	50a3      	str	r3, [r4, r2]
 800db0e:	e7e2      	b.n	800dad6 <_malloc_r+0x82>
 800db10:	605a      	str	r2, [r3, #4]
 800db12:	e7ec      	b.n	800daee <_malloc_r+0x9a>
 800db14:	6862      	ldr	r2, [r4, #4]
 800db16:	42a3      	cmp	r3, r4
 800db18:	d101      	bne.n	800db1e <_malloc_r+0xca>
 800db1a:	602a      	str	r2, [r5, #0]
 800db1c:	e7ea      	b.n	800daf4 <_malloc_r+0xa0>
 800db1e:	605a      	str	r2, [r3, #4]
 800db20:	e7e8      	b.n	800daf4 <_malloc_r+0xa0>
 800db22:	0023      	movs	r3, r4
 800db24:	6864      	ldr	r4, [r4, #4]
 800db26:	e7a7      	b.n	800da78 <_malloc_r+0x24>
 800db28:	002c      	movs	r4, r5
 800db2a:	686d      	ldr	r5, [r5, #4]
 800db2c:	e7af      	b.n	800da8e <_malloc_r+0x3a>
 800db2e:	230c      	movs	r3, #12
 800db30:	0030      	movs	r0, r6
 800db32:	6033      	str	r3, [r6, #0]
 800db34:	f000 fbf4 	bl	800e320 <__malloc_unlock>
 800db38:	e7cd      	b.n	800dad6 <_malloc_r+0x82>
 800db3a:	46c0      	nop			; (mov r8, r8)
 800db3c:	200004d4 	.word	0x200004d4

0800db40 <__ssputs_r>:
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	688e      	ldr	r6, [r1, #8]
 800db44:	b085      	sub	sp, #20
 800db46:	0007      	movs	r7, r0
 800db48:	000c      	movs	r4, r1
 800db4a:	9203      	str	r2, [sp, #12]
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	429e      	cmp	r6, r3
 800db50:	d83c      	bhi.n	800dbcc <__ssputs_r+0x8c>
 800db52:	2390      	movs	r3, #144	; 0x90
 800db54:	898a      	ldrh	r2, [r1, #12]
 800db56:	00db      	lsls	r3, r3, #3
 800db58:	421a      	tst	r2, r3
 800db5a:	d034      	beq.n	800dbc6 <__ssputs_r+0x86>
 800db5c:	6909      	ldr	r1, [r1, #16]
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	6960      	ldr	r0, [r4, #20]
 800db62:	1a5b      	subs	r3, r3, r1
 800db64:	9302      	str	r3, [sp, #8]
 800db66:	2303      	movs	r3, #3
 800db68:	4343      	muls	r3, r0
 800db6a:	0fdd      	lsrs	r5, r3, #31
 800db6c:	18ed      	adds	r5, r5, r3
 800db6e:	9b01      	ldr	r3, [sp, #4]
 800db70:	9802      	ldr	r0, [sp, #8]
 800db72:	3301      	adds	r3, #1
 800db74:	181b      	adds	r3, r3, r0
 800db76:	106d      	asrs	r5, r5, #1
 800db78:	42ab      	cmp	r3, r5
 800db7a:	d900      	bls.n	800db7e <__ssputs_r+0x3e>
 800db7c:	001d      	movs	r5, r3
 800db7e:	0553      	lsls	r3, r2, #21
 800db80:	d532      	bpl.n	800dbe8 <__ssputs_r+0xa8>
 800db82:	0029      	movs	r1, r5
 800db84:	0038      	movs	r0, r7
 800db86:	f7ff ff65 	bl	800da54 <_malloc_r>
 800db8a:	1e06      	subs	r6, r0, #0
 800db8c:	d109      	bne.n	800dba2 <__ssputs_r+0x62>
 800db8e:	230c      	movs	r3, #12
 800db90:	603b      	str	r3, [r7, #0]
 800db92:	2340      	movs	r3, #64	; 0x40
 800db94:	2001      	movs	r0, #1
 800db96:	89a2      	ldrh	r2, [r4, #12]
 800db98:	4240      	negs	r0, r0
 800db9a:	4313      	orrs	r3, r2
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	b005      	add	sp, #20
 800dba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dba2:	9a02      	ldr	r2, [sp, #8]
 800dba4:	6921      	ldr	r1, [r4, #16]
 800dba6:	f7ff f9ea 	bl	800cf7e <memcpy>
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	4a14      	ldr	r2, [pc, #80]	; (800dc00 <__ssputs_r+0xc0>)
 800dbae:	401a      	ands	r2, r3
 800dbb0:	2380      	movs	r3, #128	; 0x80
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	81a3      	strh	r3, [r4, #12]
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	6126      	str	r6, [r4, #16]
 800dbba:	18f6      	adds	r6, r6, r3
 800dbbc:	6026      	str	r6, [r4, #0]
 800dbbe:	6165      	str	r5, [r4, #20]
 800dbc0:	9e01      	ldr	r6, [sp, #4]
 800dbc2:	1aed      	subs	r5, r5, r3
 800dbc4:	60a5      	str	r5, [r4, #8]
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	429e      	cmp	r6, r3
 800dbca:	d900      	bls.n	800dbce <__ssputs_r+0x8e>
 800dbcc:	9e01      	ldr	r6, [sp, #4]
 800dbce:	0032      	movs	r2, r6
 800dbd0:	9903      	ldr	r1, [sp, #12]
 800dbd2:	6820      	ldr	r0, [r4, #0]
 800dbd4:	f000 fb88 	bl	800e2e8 <memmove>
 800dbd8:	68a3      	ldr	r3, [r4, #8]
 800dbda:	2000      	movs	r0, #0
 800dbdc:	1b9b      	subs	r3, r3, r6
 800dbde:	60a3      	str	r3, [r4, #8]
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	199e      	adds	r6, r3, r6
 800dbe4:	6026      	str	r6, [r4, #0]
 800dbe6:	e7da      	b.n	800db9e <__ssputs_r+0x5e>
 800dbe8:	002a      	movs	r2, r5
 800dbea:	0038      	movs	r0, r7
 800dbec:	f000 fba0 	bl	800e330 <_realloc_r>
 800dbf0:	1e06      	subs	r6, r0, #0
 800dbf2:	d1e0      	bne.n	800dbb6 <__ssputs_r+0x76>
 800dbf4:	0038      	movs	r0, r7
 800dbf6:	6921      	ldr	r1, [r4, #16]
 800dbf8:	f7ff fec0 	bl	800d97c <_free_r>
 800dbfc:	e7c7      	b.n	800db8e <__ssputs_r+0x4e>
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	fffffb7f 	.word	0xfffffb7f

0800dc04 <_svfiprintf_r>:
 800dc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc06:	b0a1      	sub	sp, #132	; 0x84
 800dc08:	9003      	str	r0, [sp, #12]
 800dc0a:	001d      	movs	r5, r3
 800dc0c:	898b      	ldrh	r3, [r1, #12]
 800dc0e:	000f      	movs	r7, r1
 800dc10:	0016      	movs	r6, r2
 800dc12:	061b      	lsls	r3, r3, #24
 800dc14:	d511      	bpl.n	800dc3a <_svfiprintf_r+0x36>
 800dc16:	690b      	ldr	r3, [r1, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10e      	bne.n	800dc3a <_svfiprintf_r+0x36>
 800dc1c:	2140      	movs	r1, #64	; 0x40
 800dc1e:	f7ff ff19 	bl	800da54 <_malloc_r>
 800dc22:	6038      	str	r0, [r7, #0]
 800dc24:	6138      	str	r0, [r7, #16]
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d105      	bne.n	800dc36 <_svfiprintf_r+0x32>
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	9a03      	ldr	r2, [sp, #12]
 800dc2e:	3801      	subs	r0, #1
 800dc30:	6013      	str	r3, [r2, #0]
 800dc32:	b021      	add	sp, #132	; 0x84
 800dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc36:	2340      	movs	r3, #64	; 0x40
 800dc38:	617b      	str	r3, [r7, #20]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	ac08      	add	r4, sp, #32
 800dc3e:	6163      	str	r3, [r4, #20]
 800dc40:	3320      	adds	r3, #32
 800dc42:	7663      	strb	r3, [r4, #25]
 800dc44:	3310      	adds	r3, #16
 800dc46:	76a3      	strb	r3, [r4, #26]
 800dc48:	9507      	str	r5, [sp, #28]
 800dc4a:	0035      	movs	r5, r6
 800dc4c:	782b      	ldrb	r3, [r5, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <_svfiprintf_r+0x52>
 800dc52:	2b25      	cmp	r3, #37	; 0x25
 800dc54:	d147      	bne.n	800dce6 <_svfiprintf_r+0xe2>
 800dc56:	1bab      	subs	r3, r5, r6
 800dc58:	9305      	str	r3, [sp, #20]
 800dc5a:	42b5      	cmp	r5, r6
 800dc5c:	d00c      	beq.n	800dc78 <_svfiprintf_r+0x74>
 800dc5e:	0032      	movs	r2, r6
 800dc60:	0039      	movs	r1, r7
 800dc62:	9803      	ldr	r0, [sp, #12]
 800dc64:	f7ff ff6c 	bl	800db40 <__ssputs_r>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d100      	bne.n	800dc6e <_svfiprintf_r+0x6a>
 800dc6c:	e0ae      	b.n	800ddcc <_svfiprintf_r+0x1c8>
 800dc6e:	6962      	ldr	r2, [r4, #20]
 800dc70:	9b05      	ldr	r3, [sp, #20]
 800dc72:	4694      	mov	ip, r2
 800dc74:	4463      	add	r3, ip
 800dc76:	6163      	str	r3, [r4, #20]
 800dc78:	782b      	ldrb	r3, [r5, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d100      	bne.n	800dc80 <_svfiprintf_r+0x7c>
 800dc7e:	e0a5      	b.n	800ddcc <_svfiprintf_r+0x1c8>
 800dc80:	2201      	movs	r2, #1
 800dc82:	2300      	movs	r3, #0
 800dc84:	4252      	negs	r2, r2
 800dc86:	6062      	str	r2, [r4, #4]
 800dc88:	a904      	add	r1, sp, #16
 800dc8a:	3254      	adds	r2, #84	; 0x54
 800dc8c:	1852      	adds	r2, r2, r1
 800dc8e:	1c6e      	adds	r6, r5, #1
 800dc90:	6023      	str	r3, [r4, #0]
 800dc92:	60e3      	str	r3, [r4, #12]
 800dc94:	60a3      	str	r3, [r4, #8]
 800dc96:	7013      	strb	r3, [r2, #0]
 800dc98:	65a3      	str	r3, [r4, #88]	; 0x58
 800dc9a:	2205      	movs	r2, #5
 800dc9c:	7831      	ldrb	r1, [r6, #0]
 800dc9e:	4854      	ldr	r0, [pc, #336]	; (800ddf0 <_svfiprintf_r+0x1ec>)
 800dca0:	f7ff f962 	bl	800cf68 <memchr>
 800dca4:	1c75      	adds	r5, r6, #1
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d11f      	bne.n	800dcea <_svfiprintf_r+0xe6>
 800dcaa:	6822      	ldr	r2, [r4, #0]
 800dcac:	06d3      	lsls	r3, r2, #27
 800dcae:	d504      	bpl.n	800dcba <_svfiprintf_r+0xb6>
 800dcb0:	2353      	movs	r3, #83	; 0x53
 800dcb2:	a904      	add	r1, sp, #16
 800dcb4:	185b      	adds	r3, r3, r1
 800dcb6:	2120      	movs	r1, #32
 800dcb8:	7019      	strb	r1, [r3, #0]
 800dcba:	0713      	lsls	r3, r2, #28
 800dcbc:	d504      	bpl.n	800dcc8 <_svfiprintf_r+0xc4>
 800dcbe:	2353      	movs	r3, #83	; 0x53
 800dcc0:	a904      	add	r1, sp, #16
 800dcc2:	185b      	adds	r3, r3, r1
 800dcc4:	212b      	movs	r1, #43	; 0x2b
 800dcc6:	7019      	strb	r1, [r3, #0]
 800dcc8:	7833      	ldrb	r3, [r6, #0]
 800dcca:	2b2a      	cmp	r3, #42	; 0x2a
 800dccc:	d016      	beq.n	800dcfc <_svfiprintf_r+0xf8>
 800dcce:	0035      	movs	r5, r6
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	200a      	movs	r0, #10
 800dcd4:	68e3      	ldr	r3, [r4, #12]
 800dcd6:	782a      	ldrb	r2, [r5, #0]
 800dcd8:	1c6e      	adds	r6, r5, #1
 800dcda:	3a30      	subs	r2, #48	; 0x30
 800dcdc:	2a09      	cmp	r2, #9
 800dcde:	d94e      	bls.n	800dd7e <_svfiprintf_r+0x17a>
 800dce0:	2900      	cmp	r1, #0
 800dce2:	d111      	bne.n	800dd08 <_svfiprintf_r+0x104>
 800dce4:	e017      	b.n	800dd16 <_svfiprintf_r+0x112>
 800dce6:	3501      	adds	r5, #1
 800dce8:	e7b0      	b.n	800dc4c <_svfiprintf_r+0x48>
 800dcea:	4b41      	ldr	r3, [pc, #260]	; (800ddf0 <_svfiprintf_r+0x1ec>)
 800dcec:	6822      	ldr	r2, [r4, #0]
 800dcee:	1ac0      	subs	r0, r0, r3
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	4083      	lsls	r3, r0
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	002e      	movs	r6, r5
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	e7ce      	b.n	800dc9a <_svfiprintf_r+0x96>
 800dcfc:	9b07      	ldr	r3, [sp, #28]
 800dcfe:	1d19      	adds	r1, r3, #4
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	9107      	str	r1, [sp, #28]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	db01      	blt.n	800dd0c <_svfiprintf_r+0x108>
 800dd08:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd0a:	e004      	b.n	800dd16 <_svfiprintf_r+0x112>
 800dd0c:	425b      	negs	r3, r3
 800dd0e:	60e3      	str	r3, [r4, #12]
 800dd10:	2302      	movs	r3, #2
 800dd12:	4313      	orrs	r3, r2
 800dd14:	6023      	str	r3, [r4, #0]
 800dd16:	782b      	ldrb	r3, [r5, #0]
 800dd18:	2b2e      	cmp	r3, #46	; 0x2e
 800dd1a:	d10a      	bne.n	800dd32 <_svfiprintf_r+0x12e>
 800dd1c:	786b      	ldrb	r3, [r5, #1]
 800dd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd20:	d135      	bne.n	800dd8e <_svfiprintf_r+0x18a>
 800dd22:	9b07      	ldr	r3, [sp, #28]
 800dd24:	3502      	adds	r5, #2
 800dd26:	1d1a      	adds	r2, r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	9207      	str	r2, [sp, #28]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	db2b      	blt.n	800dd88 <_svfiprintf_r+0x184>
 800dd30:	9309      	str	r3, [sp, #36]	; 0x24
 800dd32:	4e30      	ldr	r6, [pc, #192]	; (800ddf4 <_svfiprintf_r+0x1f0>)
 800dd34:	2203      	movs	r2, #3
 800dd36:	0030      	movs	r0, r6
 800dd38:	7829      	ldrb	r1, [r5, #0]
 800dd3a:	f7ff f915 	bl	800cf68 <memchr>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d006      	beq.n	800dd50 <_svfiprintf_r+0x14c>
 800dd42:	2340      	movs	r3, #64	; 0x40
 800dd44:	1b80      	subs	r0, r0, r6
 800dd46:	4083      	lsls	r3, r0
 800dd48:	6822      	ldr	r2, [r4, #0]
 800dd4a:	3501      	adds	r5, #1
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	6023      	str	r3, [r4, #0]
 800dd50:	7829      	ldrb	r1, [r5, #0]
 800dd52:	2206      	movs	r2, #6
 800dd54:	4828      	ldr	r0, [pc, #160]	; (800ddf8 <_svfiprintf_r+0x1f4>)
 800dd56:	1c6e      	adds	r6, r5, #1
 800dd58:	7621      	strb	r1, [r4, #24]
 800dd5a:	f7ff f905 	bl	800cf68 <memchr>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d03c      	beq.n	800dddc <_svfiprintf_r+0x1d8>
 800dd62:	4b26      	ldr	r3, [pc, #152]	; (800ddfc <_svfiprintf_r+0x1f8>)
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d125      	bne.n	800ddb4 <_svfiprintf_r+0x1b0>
 800dd68:	2207      	movs	r2, #7
 800dd6a:	9b07      	ldr	r3, [sp, #28]
 800dd6c:	3307      	adds	r3, #7
 800dd6e:	4393      	bics	r3, r2
 800dd70:	3308      	adds	r3, #8
 800dd72:	9307      	str	r3, [sp, #28]
 800dd74:	6963      	ldr	r3, [r4, #20]
 800dd76:	9a04      	ldr	r2, [sp, #16]
 800dd78:	189b      	adds	r3, r3, r2
 800dd7a:	6163      	str	r3, [r4, #20]
 800dd7c:	e765      	b.n	800dc4a <_svfiprintf_r+0x46>
 800dd7e:	4343      	muls	r3, r0
 800dd80:	0035      	movs	r5, r6
 800dd82:	2101      	movs	r1, #1
 800dd84:	189b      	adds	r3, r3, r2
 800dd86:	e7a6      	b.n	800dcd6 <_svfiprintf_r+0xd2>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	425b      	negs	r3, r3
 800dd8c:	e7d0      	b.n	800dd30 <_svfiprintf_r+0x12c>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	200a      	movs	r0, #10
 800dd92:	001a      	movs	r2, r3
 800dd94:	3501      	adds	r5, #1
 800dd96:	6063      	str	r3, [r4, #4]
 800dd98:	7829      	ldrb	r1, [r5, #0]
 800dd9a:	1c6e      	adds	r6, r5, #1
 800dd9c:	3930      	subs	r1, #48	; 0x30
 800dd9e:	2909      	cmp	r1, #9
 800dda0:	d903      	bls.n	800ddaa <_svfiprintf_r+0x1a6>
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d0c5      	beq.n	800dd32 <_svfiprintf_r+0x12e>
 800dda6:	9209      	str	r2, [sp, #36]	; 0x24
 800dda8:	e7c3      	b.n	800dd32 <_svfiprintf_r+0x12e>
 800ddaa:	4342      	muls	r2, r0
 800ddac:	0035      	movs	r5, r6
 800ddae:	2301      	movs	r3, #1
 800ddb0:	1852      	adds	r2, r2, r1
 800ddb2:	e7f1      	b.n	800dd98 <_svfiprintf_r+0x194>
 800ddb4:	ab07      	add	r3, sp, #28
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	003a      	movs	r2, r7
 800ddba:	0021      	movs	r1, r4
 800ddbc:	4b10      	ldr	r3, [pc, #64]	; (800de00 <_svfiprintf_r+0x1fc>)
 800ddbe:	9803      	ldr	r0, [sp, #12]
 800ddc0:	f7fb fe40 	bl	8009a44 <_printf_float>
 800ddc4:	9004      	str	r0, [sp, #16]
 800ddc6:	9b04      	ldr	r3, [sp, #16]
 800ddc8:	3301      	adds	r3, #1
 800ddca:	d1d3      	bne.n	800dd74 <_svfiprintf_r+0x170>
 800ddcc:	89bb      	ldrh	r3, [r7, #12]
 800ddce:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ddd0:	065b      	lsls	r3, r3, #25
 800ddd2:	d400      	bmi.n	800ddd6 <_svfiprintf_r+0x1d2>
 800ddd4:	e72d      	b.n	800dc32 <_svfiprintf_r+0x2e>
 800ddd6:	2001      	movs	r0, #1
 800ddd8:	4240      	negs	r0, r0
 800ddda:	e72a      	b.n	800dc32 <_svfiprintf_r+0x2e>
 800dddc:	ab07      	add	r3, sp, #28
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	003a      	movs	r2, r7
 800dde2:	0021      	movs	r1, r4
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <_svfiprintf_r+0x1fc>)
 800dde6:	9803      	ldr	r0, [sp, #12]
 800dde8:	f7fc f8de 	bl	8009fa8 <_printf_i>
 800ddec:	e7ea      	b.n	800ddc4 <_svfiprintf_r+0x1c0>
 800ddee:	46c0      	nop			; (mov r8, r8)
 800ddf0:	0800eaf4 	.word	0x0800eaf4
 800ddf4:	0800eafa 	.word	0x0800eafa
 800ddf8:	0800eafe 	.word	0x0800eafe
 800ddfc:	08009a45 	.word	0x08009a45
 800de00:	0800db41 	.word	0x0800db41

0800de04 <__sfputc_r>:
 800de04:	6893      	ldr	r3, [r2, #8]
 800de06:	b510      	push	{r4, lr}
 800de08:	3b01      	subs	r3, #1
 800de0a:	6093      	str	r3, [r2, #8]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	da04      	bge.n	800de1a <__sfputc_r+0x16>
 800de10:	6994      	ldr	r4, [r2, #24]
 800de12:	42a3      	cmp	r3, r4
 800de14:	db07      	blt.n	800de26 <__sfputc_r+0x22>
 800de16:	290a      	cmp	r1, #10
 800de18:	d005      	beq.n	800de26 <__sfputc_r+0x22>
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	1c58      	adds	r0, r3, #1
 800de1e:	6010      	str	r0, [r2, #0]
 800de20:	7019      	strb	r1, [r3, #0]
 800de22:	0008      	movs	r0, r1
 800de24:	bd10      	pop	{r4, pc}
 800de26:	f7fd fb59 	bl	800b4dc <__swbuf_r>
 800de2a:	0001      	movs	r1, r0
 800de2c:	e7f9      	b.n	800de22 <__sfputc_r+0x1e>

0800de2e <__sfputs_r>:
 800de2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de30:	0006      	movs	r6, r0
 800de32:	000f      	movs	r7, r1
 800de34:	0014      	movs	r4, r2
 800de36:	18d5      	adds	r5, r2, r3
 800de38:	42ac      	cmp	r4, r5
 800de3a:	d101      	bne.n	800de40 <__sfputs_r+0x12>
 800de3c:	2000      	movs	r0, #0
 800de3e:	e007      	b.n	800de50 <__sfputs_r+0x22>
 800de40:	7821      	ldrb	r1, [r4, #0]
 800de42:	003a      	movs	r2, r7
 800de44:	0030      	movs	r0, r6
 800de46:	f7ff ffdd 	bl	800de04 <__sfputc_r>
 800de4a:	3401      	adds	r4, #1
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d1f3      	bne.n	800de38 <__sfputs_r+0xa>
 800de50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de54 <_vfiprintf_r>:
 800de54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de56:	b0a1      	sub	sp, #132	; 0x84
 800de58:	0006      	movs	r6, r0
 800de5a:	000c      	movs	r4, r1
 800de5c:	001f      	movs	r7, r3
 800de5e:	9203      	str	r2, [sp, #12]
 800de60:	2800      	cmp	r0, #0
 800de62:	d004      	beq.n	800de6e <_vfiprintf_r+0x1a>
 800de64:	6983      	ldr	r3, [r0, #24]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d101      	bne.n	800de6e <_vfiprintf_r+0x1a>
 800de6a:	f7fe fbd9 	bl	800c620 <__sinit>
 800de6e:	4b8e      	ldr	r3, [pc, #568]	; (800e0a8 <_vfiprintf_r+0x254>)
 800de70:	429c      	cmp	r4, r3
 800de72:	d11c      	bne.n	800deae <_vfiprintf_r+0x5a>
 800de74:	6874      	ldr	r4, [r6, #4]
 800de76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de78:	07db      	lsls	r3, r3, #31
 800de7a:	d405      	bmi.n	800de88 <_vfiprintf_r+0x34>
 800de7c:	89a3      	ldrh	r3, [r4, #12]
 800de7e:	059b      	lsls	r3, r3, #22
 800de80:	d402      	bmi.n	800de88 <_vfiprintf_r+0x34>
 800de82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de84:	f7fe ffe5 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800de88:	89a3      	ldrh	r3, [r4, #12]
 800de8a:	071b      	lsls	r3, r3, #28
 800de8c:	d502      	bpl.n	800de94 <_vfiprintf_r+0x40>
 800de8e:	6923      	ldr	r3, [r4, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d11d      	bne.n	800ded0 <_vfiprintf_r+0x7c>
 800de94:	0021      	movs	r1, r4
 800de96:	0030      	movs	r0, r6
 800de98:	f7fd fb76 	bl	800b588 <__swsetup_r>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d017      	beq.n	800ded0 <_vfiprintf_r+0x7c>
 800dea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dea2:	07db      	lsls	r3, r3, #31
 800dea4:	d50d      	bpl.n	800dec2 <_vfiprintf_r+0x6e>
 800dea6:	2001      	movs	r0, #1
 800dea8:	4240      	negs	r0, r0
 800deaa:	b021      	add	sp, #132	; 0x84
 800deac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deae:	4b7f      	ldr	r3, [pc, #508]	; (800e0ac <_vfiprintf_r+0x258>)
 800deb0:	429c      	cmp	r4, r3
 800deb2:	d101      	bne.n	800deb8 <_vfiprintf_r+0x64>
 800deb4:	68b4      	ldr	r4, [r6, #8]
 800deb6:	e7de      	b.n	800de76 <_vfiprintf_r+0x22>
 800deb8:	4b7d      	ldr	r3, [pc, #500]	; (800e0b0 <_vfiprintf_r+0x25c>)
 800deba:	429c      	cmp	r4, r3
 800debc:	d1db      	bne.n	800de76 <_vfiprintf_r+0x22>
 800debe:	68f4      	ldr	r4, [r6, #12]
 800dec0:	e7d9      	b.n	800de76 <_vfiprintf_r+0x22>
 800dec2:	89a3      	ldrh	r3, [r4, #12]
 800dec4:	059b      	lsls	r3, r3, #22
 800dec6:	d4ee      	bmi.n	800dea6 <_vfiprintf_r+0x52>
 800dec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deca:	f7fe ffc3 	bl	800ce54 <__retarget_lock_release_recursive>
 800dece:	e7ea      	b.n	800dea6 <_vfiprintf_r+0x52>
 800ded0:	2300      	movs	r3, #0
 800ded2:	ad08      	add	r5, sp, #32
 800ded4:	616b      	str	r3, [r5, #20]
 800ded6:	3320      	adds	r3, #32
 800ded8:	766b      	strb	r3, [r5, #25]
 800deda:	3310      	adds	r3, #16
 800dedc:	76ab      	strb	r3, [r5, #26]
 800dede:	9707      	str	r7, [sp, #28]
 800dee0:	9f03      	ldr	r7, [sp, #12]
 800dee2:	783b      	ldrb	r3, [r7, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d001      	beq.n	800deec <_vfiprintf_r+0x98>
 800dee8:	2b25      	cmp	r3, #37	; 0x25
 800deea:	d14e      	bne.n	800df8a <_vfiprintf_r+0x136>
 800deec:	9b03      	ldr	r3, [sp, #12]
 800deee:	1afb      	subs	r3, r7, r3
 800def0:	9305      	str	r3, [sp, #20]
 800def2:	9b03      	ldr	r3, [sp, #12]
 800def4:	429f      	cmp	r7, r3
 800def6:	d00d      	beq.n	800df14 <_vfiprintf_r+0xc0>
 800def8:	9b05      	ldr	r3, [sp, #20]
 800defa:	0021      	movs	r1, r4
 800defc:	0030      	movs	r0, r6
 800defe:	9a03      	ldr	r2, [sp, #12]
 800df00:	f7ff ff95 	bl	800de2e <__sfputs_r>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d100      	bne.n	800df0a <_vfiprintf_r+0xb6>
 800df08:	e0b5      	b.n	800e076 <_vfiprintf_r+0x222>
 800df0a:	696a      	ldr	r2, [r5, #20]
 800df0c:	9b05      	ldr	r3, [sp, #20]
 800df0e:	4694      	mov	ip, r2
 800df10:	4463      	add	r3, ip
 800df12:	616b      	str	r3, [r5, #20]
 800df14:	783b      	ldrb	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d100      	bne.n	800df1c <_vfiprintf_r+0xc8>
 800df1a:	e0ac      	b.n	800e076 <_vfiprintf_r+0x222>
 800df1c:	2201      	movs	r2, #1
 800df1e:	1c7b      	adds	r3, r7, #1
 800df20:	9303      	str	r3, [sp, #12]
 800df22:	2300      	movs	r3, #0
 800df24:	4252      	negs	r2, r2
 800df26:	606a      	str	r2, [r5, #4]
 800df28:	a904      	add	r1, sp, #16
 800df2a:	3254      	adds	r2, #84	; 0x54
 800df2c:	1852      	adds	r2, r2, r1
 800df2e:	602b      	str	r3, [r5, #0]
 800df30:	60eb      	str	r3, [r5, #12]
 800df32:	60ab      	str	r3, [r5, #8]
 800df34:	7013      	strb	r3, [r2, #0]
 800df36:	65ab      	str	r3, [r5, #88]	; 0x58
 800df38:	9b03      	ldr	r3, [sp, #12]
 800df3a:	2205      	movs	r2, #5
 800df3c:	7819      	ldrb	r1, [r3, #0]
 800df3e:	485d      	ldr	r0, [pc, #372]	; (800e0b4 <_vfiprintf_r+0x260>)
 800df40:	f7ff f812 	bl	800cf68 <memchr>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	1c5f      	adds	r7, r3, #1
 800df48:	2800      	cmp	r0, #0
 800df4a:	d120      	bne.n	800df8e <_vfiprintf_r+0x13a>
 800df4c:	682a      	ldr	r2, [r5, #0]
 800df4e:	06d3      	lsls	r3, r2, #27
 800df50:	d504      	bpl.n	800df5c <_vfiprintf_r+0x108>
 800df52:	2353      	movs	r3, #83	; 0x53
 800df54:	a904      	add	r1, sp, #16
 800df56:	185b      	adds	r3, r3, r1
 800df58:	2120      	movs	r1, #32
 800df5a:	7019      	strb	r1, [r3, #0]
 800df5c:	0713      	lsls	r3, r2, #28
 800df5e:	d504      	bpl.n	800df6a <_vfiprintf_r+0x116>
 800df60:	2353      	movs	r3, #83	; 0x53
 800df62:	a904      	add	r1, sp, #16
 800df64:	185b      	adds	r3, r3, r1
 800df66:	212b      	movs	r1, #43	; 0x2b
 800df68:	7019      	strb	r1, [r3, #0]
 800df6a:	9b03      	ldr	r3, [sp, #12]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	2b2a      	cmp	r3, #42	; 0x2a
 800df70:	d016      	beq.n	800dfa0 <_vfiprintf_r+0x14c>
 800df72:	2100      	movs	r1, #0
 800df74:	68eb      	ldr	r3, [r5, #12]
 800df76:	9f03      	ldr	r7, [sp, #12]
 800df78:	783a      	ldrb	r2, [r7, #0]
 800df7a:	1c78      	adds	r0, r7, #1
 800df7c:	3a30      	subs	r2, #48	; 0x30
 800df7e:	4684      	mov	ip, r0
 800df80:	2a09      	cmp	r2, #9
 800df82:	d94f      	bls.n	800e024 <_vfiprintf_r+0x1d0>
 800df84:	2900      	cmp	r1, #0
 800df86:	d111      	bne.n	800dfac <_vfiprintf_r+0x158>
 800df88:	e017      	b.n	800dfba <_vfiprintf_r+0x166>
 800df8a:	3701      	adds	r7, #1
 800df8c:	e7a9      	b.n	800dee2 <_vfiprintf_r+0x8e>
 800df8e:	4b49      	ldr	r3, [pc, #292]	; (800e0b4 <_vfiprintf_r+0x260>)
 800df90:	682a      	ldr	r2, [r5, #0]
 800df92:	1ac0      	subs	r0, r0, r3
 800df94:	2301      	movs	r3, #1
 800df96:	4083      	lsls	r3, r0
 800df98:	4313      	orrs	r3, r2
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	9703      	str	r7, [sp, #12]
 800df9e:	e7cb      	b.n	800df38 <_vfiprintf_r+0xe4>
 800dfa0:	9b07      	ldr	r3, [sp, #28]
 800dfa2:	1d19      	adds	r1, r3, #4
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	9107      	str	r1, [sp, #28]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	db01      	blt.n	800dfb0 <_vfiprintf_r+0x15c>
 800dfac:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfae:	e004      	b.n	800dfba <_vfiprintf_r+0x166>
 800dfb0:	425b      	negs	r3, r3
 800dfb2:	60eb      	str	r3, [r5, #12]
 800dfb4:	2302      	movs	r3, #2
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	783b      	ldrb	r3, [r7, #0]
 800dfbc:	2b2e      	cmp	r3, #46	; 0x2e
 800dfbe:	d10a      	bne.n	800dfd6 <_vfiprintf_r+0x182>
 800dfc0:	787b      	ldrb	r3, [r7, #1]
 800dfc2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfc4:	d137      	bne.n	800e036 <_vfiprintf_r+0x1e2>
 800dfc6:	9b07      	ldr	r3, [sp, #28]
 800dfc8:	3702      	adds	r7, #2
 800dfca:	1d1a      	adds	r2, r3, #4
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	9207      	str	r2, [sp, #28]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	db2d      	blt.n	800e030 <_vfiprintf_r+0x1dc>
 800dfd4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfd6:	2203      	movs	r2, #3
 800dfd8:	7839      	ldrb	r1, [r7, #0]
 800dfda:	4837      	ldr	r0, [pc, #220]	; (800e0b8 <_vfiprintf_r+0x264>)
 800dfdc:	f7fe ffc4 	bl	800cf68 <memchr>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d007      	beq.n	800dff4 <_vfiprintf_r+0x1a0>
 800dfe4:	4b34      	ldr	r3, [pc, #208]	; (800e0b8 <_vfiprintf_r+0x264>)
 800dfe6:	682a      	ldr	r2, [r5, #0]
 800dfe8:	1ac0      	subs	r0, r0, r3
 800dfea:	2340      	movs	r3, #64	; 0x40
 800dfec:	4083      	lsls	r3, r0
 800dfee:	4313      	orrs	r3, r2
 800dff0:	3701      	adds	r7, #1
 800dff2:	602b      	str	r3, [r5, #0]
 800dff4:	7839      	ldrb	r1, [r7, #0]
 800dff6:	1c7b      	adds	r3, r7, #1
 800dff8:	2206      	movs	r2, #6
 800dffa:	4830      	ldr	r0, [pc, #192]	; (800e0bc <_vfiprintf_r+0x268>)
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	7629      	strb	r1, [r5, #24]
 800e000:	f7fe ffb2 	bl	800cf68 <memchr>
 800e004:	2800      	cmp	r0, #0
 800e006:	d045      	beq.n	800e094 <_vfiprintf_r+0x240>
 800e008:	4b2d      	ldr	r3, [pc, #180]	; (800e0c0 <_vfiprintf_r+0x26c>)
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d127      	bne.n	800e05e <_vfiprintf_r+0x20a>
 800e00e:	2207      	movs	r2, #7
 800e010:	9b07      	ldr	r3, [sp, #28]
 800e012:	3307      	adds	r3, #7
 800e014:	4393      	bics	r3, r2
 800e016:	3308      	adds	r3, #8
 800e018:	9307      	str	r3, [sp, #28]
 800e01a:	696b      	ldr	r3, [r5, #20]
 800e01c:	9a04      	ldr	r2, [sp, #16]
 800e01e:	189b      	adds	r3, r3, r2
 800e020:	616b      	str	r3, [r5, #20]
 800e022:	e75d      	b.n	800dee0 <_vfiprintf_r+0x8c>
 800e024:	210a      	movs	r1, #10
 800e026:	434b      	muls	r3, r1
 800e028:	4667      	mov	r7, ip
 800e02a:	189b      	adds	r3, r3, r2
 800e02c:	3909      	subs	r1, #9
 800e02e:	e7a3      	b.n	800df78 <_vfiprintf_r+0x124>
 800e030:	2301      	movs	r3, #1
 800e032:	425b      	negs	r3, r3
 800e034:	e7ce      	b.n	800dfd4 <_vfiprintf_r+0x180>
 800e036:	2300      	movs	r3, #0
 800e038:	001a      	movs	r2, r3
 800e03a:	3701      	adds	r7, #1
 800e03c:	606b      	str	r3, [r5, #4]
 800e03e:	7839      	ldrb	r1, [r7, #0]
 800e040:	1c78      	adds	r0, r7, #1
 800e042:	3930      	subs	r1, #48	; 0x30
 800e044:	4684      	mov	ip, r0
 800e046:	2909      	cmp	r1, #9
 800e048:	d903      	bls.n	800e052 <_vfiprintf_r+0x1fe>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d0c3      	beq.n	800dfd6 <_vfiprintf_r+0x182>
 800e04e:	9209      	str	r2, [sp, #36]	; 0x24
 800e050:	e7c1      	b.n	800dfd6 <_vfiprintf_r+0x182>
 800e052:	230a      	movs	r3, #10
 800e054:	435a      	muls	r2, r3
 800e056:	4667      	mov	r7, ip
 800e058:	1852      	adds	r2, r2, r1
 800e05a:	3b09      	subs	r3, #9
 800e05c:	e7ef      	b.n	800e03e <_vfiprintf_r+0x1ea>
 800e05e:	ab07      	add	r3, sp, #28
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	0022      	movs	r2, r4
 800e064:	0029      	movs	r1, r5
 800e066:	0030      	movs	r0, r6
 800e068:	4b16      	ldr	r3, [pc, #88]	; (800e0c4 <_vfiprintf_r+0x270>)
 800e06a:	f7fb fceb 	bl	8009a44 <_printf_float>
 800e06e:	9004      	str	r0, [sp, #16]
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	3301      	adds	r3, #1
 800e074:	d1d1      	bne.n	800e01a <_vfiprintf_r+0x1c6>
 800e076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e078:	07db      	lsls	r3, r3, #31
 800e07a:	d405      	bmi.n	800e088 <_vfiprintf_r+0x234>
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	059b      	lsls	r3, r3, #22
 800e080:	d402      	bmi.n	800e088 <_vfiprintf_r+0x234>
 800e082:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e084:	f7fe fee6 	bl	800ce54 <__retarget_lock_release_recursive>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	065b      	lsls	r3, r3, #25
 800e08c:	d500      	bpl.n	800e090 <_vfiprintf_r+0x23c>
 800e08e:	e70a      	b.n	800dea6 <_vfiprintf_r+0x52>
 800e090:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e092:	e70a      	b.n	800deaa <_vfiprintf_r+0x56>
 800e094:	ab07      	add	r3, sp, #28
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	0022      	movs	r2, r4
 800e09a:	0029      	movs	r1, r5
 800e09c:	0030      	movs	r0, r6
 800e09e:	4b09      	ldr	r3, [pc, #36]	; (800e0c4 <_vfiprintf_r+0x270>)
 800e0a0:	f7fb ff82 	bl	8009fa8 <_printf_i>
 800e0a4:	e7e3      	b.n	800e06e <_vfiprintf_r+0x21a>
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	0800e8dc 	.word	0x0800e8dc
 800e0ac:	0800e8fc 	.word	0x0800e8fc
 800e0b0:	0800e8bc 	.word	0x0800e8bc
 800e0b4:	0800eaf4 	.word	0x0800eaf4
 800e0b8:	0800eafa 	.word	0x0800eafa
 800e0bc:	0800eafe 	.word	0x0800eafe
 800e0c0:	08009a45 	.word	0x08009a45
 800e0c4:	0800de2f 	.word	0x0800de2f

0800e0c8 <nan>:
 800e0c8:	2000      	movs	r0, #0
 800e0ca:	4901      	ldr	r1, [pc, #4]	; (800e0d0 <nan+0x8>)
 800e0cc:	4770      	bx	lr
 800e0ce:	46c0      	nop			; (mov r8, r8)
 800e0d0:	7ff80000 	.word	0x7ff80000

0800e0d4 <_sbrk_r>:
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	b570      	push	{r4, r5, r6, lr}
 800e0d8:	4d06      	ldr	r5, [pc, #24]	; (800e0f4 <_sbrk_r+0x20>)
 800e0da:	0004      	movs	r4, r0
 800e0dc:	0008      	movs	r0, r1
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	f7f6 ff9a 	bl	8005018 <_sbrk>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d103      	bne.n	800e0f0 <_sbrk_r+0x1c>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d000      	beq.n	800e0f0 <_sbrk_r+0x1c>
 800e0ee:	6023      	str	r3, [r4, #0]
 800e0f0:	bd70      	pop	{r4, r5, r6, pc}
 800e0f2:	46c0      	nop			; (mov r8, r8)
 800e0f4:	200004dc 	.word	0x200004dc

0800e0f8 <__sread>:
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	000c      	movs	r4, r1
 800e0fc:	250e      	movs	r5, #14
 800e0fe:	5f49      	ldrsh	r1, [r1, r5]
 800e100:	f000 f946 	bl	800e390 <_read_r>
 800e104:	2800      	cmp	r0, #0
 800e106:	db03      	blt.n	800e110 <__sread+0x18>
 800e108:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e10a:	181b      	adds	r3, r3, r0
 800e10c:	6563      	str	r3, [r4, #84]	; 0x54
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	89a3      	ldrh	r3, [r4, #12]
 800e112:	4a02      	ldr	r2, [pc, #8]	; (800e11c <__sread+0x24>)
 800e114:	4013      	ands	r3, r2
 800e116:	81a3      	strh	r3, [r4, #12]
 800e118:	e7f9      	b.n	800e10e <__sread+0x16>
 800e11a:	46c0      	nop			; (mov r8, r8)
 800e11c:	ffffefff 	.word	0xffffefff

0800e120 <__swrite>:
 800e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e122:	001f      	movs	r7, r3
 800e124:	898b      	ldrh	r3, [r1, #12]
 800e126:	0005      	movs	r5, r0
 800e128:	000c      	movs	r4, r1
 800e12a:	0016      	movs	r6, r2
 800e12c:	05db      	lsls	r3, r3, #23
 800e12e:	d505      	bpl.n	800e13c <__swrite+0x1c>
 800e130:	230e      	movs	r3, #14
 800e132:	5ec9      	ldrsh	r1, [r1, r3]
 800e134:	2200      	movs	r2, #0
 800e136:	2302      	movs	r3, #2
 800e138:	f000 f8c2 	bl	800e2c0 <_lseek_r>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	4a05      	ldr	r2, [pc, #20]	; (800e154 <__swrite+0x34>)
 800e140:	0028      	movs	r0, r5
 800e142:	4013      	ands	r3, r2
 800e144:	81a3      	strh	r3, [r4, #12]
 800e146:	0032      	movs	r2, r6
 800e148:	230e      	movs	r3, #14
 800e14a:	5ee1      	ldrsh	r1, [r4, r3]
 800e14c:	003b      	movs	r3, r7
 800e14e:	f000 f83f 	bl	800e1d0 <_write_r>
 800e152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e154:	ffffefff 	.word	0xffffefff

0800e158 <__sseek>:
 800e158:	b570      	push	{r4, r5, r6, lr}
 800e15a:	000c      	movs	r4, r1
 800e15c:	250e      	movs	r5, #14
 800e15e:	5f49      	ldrsh	r1, [r1, r5]
 800e160:	f000 f8ae 	bl	800e2c0 <_lseek_r>
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	1c42      	adds	r2, r0, #1
 800e168:	d103      	bne.n	800e172 <__sseek+0x1a>
 800e16a:	4a05      	ldr	r2, [pc, #20]	; (800e180 <__sseek+0x28>)
 800e16c:	4013      	ands	r3, r2
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	bd70      	pop	{r4, r5, r6, pc}
 800e172:	2280      	movs	r2, #128	; 0x80
 800e174:	0152      	lsls	r2, r2, #5
 800e176:	4313      	orrs	r3, r2
 800e178:	81a3      	strh	r3, [r4, #12]
 800e17a:	6560      	str	r0, [r4, #84]	; 0x54
 800e17c:	e7f8      	b.n	800e170 <__sseek+0x18>
 800e17e:	46c0      	nop			; (mov r8, r8)
 800e180:	ffffefff 	.word	0xffffefff

0800e184 <__sclose>:
 800e184:	b510      	push	{r4, lr}
 800e186:	230e      	movs	r3, #14
 800e188:	5ec9      	ldrsh	r1, [r1, r3]
 800e18a:	f000 f853 	bl	800e234 <_close_r>
 800e18e:	bd10      	pop	{r4, pc}

0800e190 <strncmp>:
 800e190:	b530      	push	{r4, r5, lr}
 800e192:	0005      	movs	r5, r0
 800e194:	1e10      	subs	r0, r2, #0
 800e196:	d008      	beq.n	800e1aa <strncmp+0x1a>
 800e198:	2400      	movs	r4, #0
 800e19a:	3a01      	subs	r2, #1
 800e19c:	5d2b      	ldrb	r3, [r5, r4]
 800e19e:	5d08      	ldrb	r0, [r1, r4]
 800e1a0:	4283      	cmp	r3, r0
 800e1a2:	d101      	bne.n	800e1a8 <strncmp+0x18>
 800e1a4:	4294      	cmp	r4, r2
 800e1a6:	d101      	bne.n	800e1ac <strncmp+0x1c>
 800e1a8:	1a18      	subs	r0, r3, r0
 800e1aa:	bd30      	pop	{r4, r5, pc}
 800e1ac:	3401      	adds	r4, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1f4      	bne.n	800e19c <strncmp+0xc>
 800e1b2:	e7f9      	b.n	800e1a8 <strncmp+0x18>

0800e1b4 <__ascii_wctomb>:
 800e1b4:	0003      	movs	r3, r0
 800e1b6:	1e08      	subs	r0, r1, #0
 800e1b8:	d005      	beq.n	800e1c6 <__ascii_wctomb+0x12>
 800e1ba:	2aff      	cmp	r2, #255	; 0xff
 800e1bc:	d904      	bls.n	800e1c8 <__ascii_wctomb+0x14>
 800e1be:	228a      	movs	r2, #138	; 0x8a
 800e1c0:	2001      	movs	r0, #1
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	4240      	negs	r0, r0
 800e1c6:	4770      	bx	lr
 800e1c8:	2001      	movs	r0, #1
 800e1ca:	700a      	strb	r2, [r1, #0]
 800e1cc:	e7fb      	b.n	800e1c6 <__ascii_wctomb+0x12>
	...

0800e1d0 <_write_r>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	0004      	movs	r4, r0
 800e1d4:	0008      	movs	r0, r1
 800e1d6:	0011      	movs	r1, r2
 800e1d8:	001a      	movs	r2, r3
 800e1da:	2300      	movs	r3, #0
 800e1dc:	4d05      	ldr	r5, [pc, #20]	; (800e1f4 <_write_r+0x24>)
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	f7f6 fed1 	bl	8004f86 <_write>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d103      	bne.n	800e1f0 <_write_r+0x20>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d000      	beq.n	800e1f0 <_write_r+0x20>
 800e1ee:	6023      	str	r3, [r4, #0]
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	200004dc 	.word	0x200004dc

0800e1f8 <__assert_func>:
 800e1f8:	b530      	push	{r4, r5, lr}
 800e1fa:	0014      	movs	r4, r2
 800e1fc:	001a      	movs	r2, r3
 800e1fe:	4b09      	ldr	r3, [pc, #36]	; (800e224 <__assert_func+0x2c>)
 800e200:	0005      	movs	r5, r0
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	b085      	sub	sp, #20
 800e206:	68d8      	ldr	r0, [r3, #12]
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <__assert_func+0x30>)
 800e20a:	2c00      	cmp	r4, #0
 800e20c:	d101      	bne.n	800e212 <__assert_func+0x1a>
 800e20e:	4b07      	ldr	r3, [pc, #28]	; (800e22c <__assert_func+0x34>)
 800e210:	001c      	movs	r4, r3
 800e212:	9301      	str	r3, [sp, #4]
 800e214:	9100      	str	r1, [sp, #0]
 800e216:	002b      	movs	r3, r5
 800e218:	4905      	ldr	r1, [pc, #20]	; (800e230 <__assert_func+0x38>)
 800e21a:	9402      	str	r4, [sp, #8]
 800e21c:	f000 f81c 	bl	800e258 <fiprintf>
 800e220:	f000 f8ca 	bl	800e3b8 <abort>
 800e224:	2000000c 	.word	0x2000000c
 800e228:	0800eb05 	.word	0x0800eb05
 800e22c:	0800eb40 	.word	0x0800eb40
 800e230:	0800eb12 	.word	0x0800eb12

0800e234 <_close_r>:
 800e234:	2300      	movs	r3, #0
 800e236:	b570      	push	{r4, r5, r6, lr}
 800e238:	4d06      	ldr	r5, [pc, #24]	; (800e254 <_close_r+0x20>)
 800e23a:	0004      	movs	r4, r0
 800e23c:	0008      	movs	r0, r1
 800e23e:	602b      	str	r3, [r5, #0]
 800e240:	f7f6 febd 	bl	8004fbe <_close>
 800e244:	1c43      	adds	r3, r0, #1
 800e246:	d103      	bne.n	800e250 <_close_r+0x1c>
 800e248:	682b      	ldr	r3, [r5, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d000      	beq.n	800e250 <_close_r+0x1c>
 800e24e:	6023      	str	r3, [r4, #0]
 800e250:	bd70      	pop	{r4, r5, r6, pc}
 800e252:	46c0      	nop			; (mov r8, r8)
 800e254:	200004dc 	.word	0x200004dc

0800e258 <fiprintf>:
 800e258:	b40e      	push	{r1, r2, r3}
 800e25a:	b503      	push	{r0, r1, lr}
 800e25c:	0001      	movs	r1, r0
 800e25e:	ab03      	add	r3, sp, #12
 800e260:	4804      	ldr	r0, [pc, #16]	; (800e274 <fiprintf+0x1c>)
 800e262:	cb04      	ldmia	r3!, {r2}
 800e264:	6800      	ldr	r0, [r0, #0]
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	f7ff fdf4 	bl	800de54 <_vfiprintf_r>
 800e26c:	b002      	add	sp, #8
 800e26e:	bc08      	pop	{r3}
 800e270:	b003      	add	sp, #12
 800e272:	4718      	bx	r3
 800e274:	2000000c 	.word	0x2000000c

0800e278 <_fstat_r>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b570      	push	{r4, r5, r6, lr}
 800e27c:	4d06      	ldr	r5, [pc, #24]	; (800e298 <_fstat_r+0x20>)
 800e27e:	0004      	movs	r4, r0
 800e280:	0008      	movs	r0, r1
 800e282:	0011      	movs	r1, r2
 800e284:	602b      	str	r3, [r5, #0]
 800e286:	f7f6 fea4 	bl	8004fd2 <_fstat>
 800e28a:	1c43      	adds	r3, r0, #1
 800e28c:	d103      	bne.n	800e296 <_fstat_r+0x1e>
 800e28e:	682b      	ldr	r3, [r5, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d000      	beq.n	800e296 <_fstat_r+0x1e>
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	bd70      	pop	{r4, r5, r6, pc}
 800e298:	200004dc 	.word	0x200004dc

0800e29c <_isatty_r>:
 800e29c:	2300      	movs	r3, #0
 800e29e:	b570      	push	{r4, r5, r6, lr}
 800e2a0:	4d06      	ldr	r5, [pc, #24]	; (800e2bc <_isatty_r+0x20>)
 800e2a2:	0004      	movs	r4, r0
 800e2a4:	0008      	movs	r0, r1
 800e2a6:	602b      	str	r3, [r5, #0]
 800e2a8:	f7f6 fea1 	bl	8004fee <_isatty>
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	d103      	bne.n	800e2b8 <_isatty_r+0x1c>
 800e2b0:	682b      	ldr	r3, [r5, #0]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d000      	beq.n	800e2b8 <_isatty_r+0x1c>
 800e2b6:	6023      	str	r3, [r4, #0]
 800e2b8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ba:	46c0      	nop			; (mov r8, r8)
 800e2bc:	200004dc 	.word	0x200004dc

0800e2c0 <_lseek_r>:
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	0004      	movs	r4, r0
 800e2c4:	0008      	movs	r0, r1
 800e2c6:	0011      	movs	r1, r2
 800e2c8:	001a      	movs	r2, r3
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4d05      	ldr	r5, [pc, #20]	; (800e2e4 <_lseek_r+0x24>)
 800e2ce:	602b      	str	r3, [r5, #0]
 800e2d0:	f7f6 fe96 	bl	8005000 <_lseek>
 800e2d4:	1c43      	adds	r3, r0, #1
 800e2d6:	d103      	bne.n	800e2e0 <_lseek_r+0x20>
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d000      	beq.n	800e2e0 <_lseek_r+0x20>
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	bd70      	pop	{r4, r5, r6, pc}
 800e2e2:	46c0      	nop			; (mov r8, r8)
 800e2e4:	200004dc 	.word	0x200004dc

0800e2e8 <memmove>:
 800e2e8:	b510      	push	{r4, lr}
 800e2ea:	4288      	cmp	r0, r1
 800e2ec:	d902      	bls.n	800e2f4 <memmove+0xc>
 800e2ee:	188b      	adds	r3, r1, r2
 800e2f0:	4298      	cmp	r0, r3
 800e2f2:	d303      	bcc.n	800e2fc <memmove+0x14>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	e007      	b.n	800e308 <memmove+0x20>
 800e2f8:	5c8b      	ldrb	r3, [r1, r2]
 800e2fa:	5483      	strb	r3, [r0, r2]
 800e2fc:	3a01      	subs	r2, #1
 800e2fe:	d2fb      	bcs.n	800e2f8 <memmove+0x10>
 800e300:	bd10      	pop	{r4, pc}
 800e302:	5ccc      	ldrb	r4, [r1, r3]
 800e304:	54c4      	strb	r4, [r0, r3]
 800e306:	3301      	adds	r3, #1
 800e308:	429a      	cmp	r2, r3
 800e30a:	d1fa      	bne.n	800e302 <memmove+0x1a>
 800e30c:	e7f8      	b.n	800e300 <memmove+0x18>
	...

0800e310 <__malloc_lock>:
 800e310:	b510      	push	{r4, lr}
 800e312:	4802      	ldr	r0, [pc, #8]	; (800e31c <__malloc_lock+0xc>)
 800e314:	f7fe fd9d 	bl	800ce52 <__retarget_lock_acquire_recursive>
 800e318:	bd10      	pop	{r4, pc}
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	200004d0 	.word	0x200004d0

0800e320 <__malloc_unlock>:
 800e320:	b510      	push	{r4, lr}
 800e322:	4802      	ldr	r0, [pc, #8]	; (800e32c <__malloc_unlock+0xc>)
 800e324:	f7fe fd96 	bl	800ce54 <__retarget_lock_release_recursive>
 800e328:	bd10      	pop	{r4, pc}
 800e32a:	46c0      	nop			; (mov r8, r8)
 800e32c:	200004d0 	.word	0x200004d0

0800e330 <_realloc_r>:
 800e330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e332:	0007      	movs	r7, r0
 800e334:	000e      	movs	r6, r1
 800e336:	0014      	movs	r4, r2
 800e338:	2900      	cmp	r1, #0
 800e33a:	d105      	bne.n	800e348 <_realloc_r+0x18>
 800e33c:	0011      	movs	r1, r2
 800e33e:	f7ff fb89 	bl	800da54 <_malloc_r>
 800e342:	0005      	movs	r5, r0
 800e344:	0028      	movs	r0, r5
 800e346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e348:	2a00      	cmp	r2, #0
 800e34a:	d103      	bne.n	800e354 <_realloc_r+0x24>
 800e34c:	f7ff fb16 	bl	800d97c <_free_r>
 800e350:	0025      	movs	r5, r4
 800e352:	e7f7      	b.n	800e344 <_realloc_r+0x14>
 800e354:	f000 f837 	bl	800e3c6 <_malloc_usable_size_r>
 800e358:	9001      	str	r0, [sp, #4]
 800e35a:	4284      	cmp	r4, r0
 800e35c:	d803      	bhi.n	800e366 <_realloc_r+0x36>
 800e35e:	0035      	movs	r5, r6
 800e360:	0843      	lsrs	r3, r0, #1
 800e362:	42a3      	cmp	r3, r4
 800e364:	d3ee      	bcc.n	800e344 <_realloc_r+0x14>
 800e366:	0021      	movs	r1, r4
 800e368:	0038      	movs	r0, r7
 800e36a:	f7ff fb73 	bl	800da54 <_malloc_r>
 800e36e:	1e05      	subs	r5, r0, #0
 800e370:	d0e8      	beq.n	800e344 <_realloc_r+0x14>
 800e372:	9b01      	ldr	r3, [sp, #4]
 800e374:	0022      	movs	r2, r4
 800e376:	429c      	cmp	r4, r3
 800e378:	d900      	bls.n	800e37c <_realloc_r+0x4c>
 800e37a:	001a      	movs	r2, r3
 800e37c:	0031      	movs	r1, r6
 800e37e:	0028      	movs	r0, r5
 800e380:	f7fe fdfd 	bl	800cf7e <memcpy>
 800e384:	0031      	movs	r1, r6
 800e386:	0038      	movs	r0, r7
 800e388:	f7ff faf8 	bl	800d97c <_free_r>
 800e38c:	e7da      	b.n	800e344 <_realloc_r+0x14>
	...

0800e390 <_read_r>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	0004      	movs	r4, r0
 800e394:	0008      	movs	r0, r1
 800e396:	0011      	movs	r1, r2
 800e398:	001a      	movs	r2, r3
 800e39a:	2300      	movs	r3, #0
 800e39c:	4d05      	ldr	r5, [pc, #20]	; (800e3b4 <_read_r+0x24>)
 800e39e:	602b      	str	r3, [r5, #0]
 800e3a0:	f7f6 fdd4 	bl	8004f4c <_read>
 800e3a4:	1c43      	adds	r3, r0, #1
 800e3a6:	d103      	bne.n	800e3b0 <_read_r+0x20>
 800e3a8:	682b      	ldr	r3, [r5, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d000      	beq.n	800e3b0 <_read_r+0x20>
 800e3ae:	6023      	str	r3, [r4, #0]
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}
 800e3b2:	46c0      	nop			; (mov r8, r8)
 800e3b4:	200004dc 	.word	0x200004dc

0800e3b8 <abort>:
 800e3b8:	2006      	movs	r0, #6
 800e3ba:	b510      	push	{r4, lr}
 800e3bc:	f000 f836 	bl	800e42c <raise>
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f7f6 fdb7 	bl	8004f34 <_exit>

0800e3c6 <_malloc_usable_size_r>:
 800e3c6:	1f0b      	subs	r3, r1, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	1f18      	subs	r0, r3, #4
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	da01      	bge.n	800e3d4 <_malloc_usable_size_r+0xe>
 800e3d0:	580b      	ldr	r3, [r1, r0]
 800e3d2:	18c0      	adds	r0, r0, r3
 800e3d4:	4770      	bx	lr

0800e3d6 <_raise_r>:
 800e3d6:	b570      	push	{r4, r5, r6, lr}
 800e3d8:	0004      	movs	r4, r0
 800e3da:	000d      	movs	r5, r1
 800e3dc:	291f      	cmp	r1, #31
 800e3de:	d904      	bls.n	800e3ea <_raise_r+0x14>
 800e3e0:	2316      	movs	r3, #22
 800e3e2:	6003      	str	r3, [r0, #0]
 800e3e4:	2001      	movs	r0, #1
 800e3e6:	4240      	negs	r0, r0
 800e3e8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d004      	beq.n	800e3fa <_raise_r+0x24>
 800e3f0:	008a      	lsls	r2, r1, #2
 800e3f2:	189b      	adds	r3, r3, r2
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	2a00      	cmp	r2, #0
 800e3f8:	d108      	bne.n	800e40c <_raise_r+0x36>
 800e3fa:	0020      	movs	r0, r4
 800e3fc:	f000 f832 	bl	800e464 <_getpid_r>
 800e400:	002a      	movs	r2, r5
 800e402:	0001      	movs	r1, r0
 800e404:	0020      	movs	r0, r4
 800e406:	f000 f81b 	bl	800e440 <_kill_r>
 800e40a:	e7ed      	b.n	800e3e8 <_raise_r+0x12>
 800e40c:	2000      	movs	r0, #0
 800e40e:	2a01      	cmp	r2, #1
 800e410:	d0ea      	beq.n	800e3e8 <_raise_r+0x12>
 800e412:	1c51      	adds	r1, r2, #1
 800e414:	d103      	bne.n	800e41e <_raise_r+0x48>
 800e416:	2316      	movs	r3, #22
 800e418:	3001      	adds	r0, #1
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	e7e4      	b.n	800e3e8 <_raise_r+0x12>
 800e41e:	2400      	movs	r4, #0
 800e420:	0028      	movs	r0, r5
 800e422:	601c      	str	r4, [r3, #0]
 800e424:	4790      	blx	r2
 800e426:	0020      	movs	r0, r4
 800e428:	e7de      	b.n	800e3e8 <_raise_r+0x12>
	...

0800e42c <raise>:
 800e42c:	b510      	push	{r4, lr}
 800e42e:	4b03      	ldr	r3, [pc, #12]	; (800e43c <raise+0x10>)
 800e430:	0001      	movs	r1, r0
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	f7ff ffcf 	bl	800e3d6 <_raise_r>
 800e438:	bd10      	pop	{r4, pc}
 800e43a:	46c0      	nop			; (mov r8, r8)
 800e43c:	2000000c 	.word	0x2000000c

0800e440 <_kill_r>:
 800e440:	2300      	movs	r3, #0
 800e442:	b570      	push	{r4, r5, r6, lr}
 800e444:	4d06      	ldr	r5, [pc, #24]	; (800e460 <_kill_r+0x20>)
 800e446:	0004      	movs	r4, r0
 800e448:	0008      	movs	r0, r1
 800e44a:	0011      	movs	r1, r2
 800e44c:	602b      	str	r3, [r5, #0]
 800e44e:	f7f6 fd61 	bl	8004f14 <_kill>
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	d103      	bne.n	800e45e <_kill_r+0x1e>
 800e456:	682b      	ldr	r3, [r5, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d000      	beq.n	800e45e <_kill_r+0x1e>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd70      	pop	{r4, r5, r6, pc}
 800e460:	200004dc 	.word	0x200004dc

0800e464 <_getpid_r>:
 800e464:	b510      	push	{r4, lr}
 800e466:	f7f6 fd4f 	bl	8004f08 <_getpid>
 800e46a:	bd10      	pop	{r4, pc}

0800e46c <_init>:
 800e46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46e:	46c0      	nop			; (mov r8, r8)
 800e470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e472:	bc08      	pop	{r3}
 800e474:	469e      	mov	lr, r3
 800e476:	4770      	bx	lr

0800e478 <_fini>:
 800e478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47a:	46c0      	nop			; (mov r8, r8)
 800e47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e47e:	bc08      	pop	{r3}
 800e480:	469e      	mov	lr, r3
 800e482:	4770      	bx	lr
